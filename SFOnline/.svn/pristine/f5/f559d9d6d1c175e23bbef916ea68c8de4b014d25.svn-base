package common.services;

import java.sql.Connection;
import java.util.Map;

import com.dcfs.esb.client.converter.PackUtil;
import com.ecc.emp.core.Context;
import com.ecc.emp.core.EMPException;
import com.ecc.emp.service.EMPService;
import common.action.db.SqlExecAction;
import common.exception.SFException;
import common.sql.dao.DBHandler;
import common.sql.dao.DaoBase;
import common.util.SFConst;
import common.util.SFUtil;
import core.log.SFLogger;
import edu.emory.mathcs.backport.java.util.concurrent.ScheduledFuture;

/**
 * 
 * <b>功能描述：</b><br>
 * FBS公共服务对象，提供各种存管系统的基本公共函数<br>
 * <b>函数列表：</b><br>
 * &lt;name="getSQLExecAction"&gt;&lt;function="获取Sql语句执行的Action"&gt;<br>
 * @version 1.0
 * @modifier
 * 
 */

public class PublicService extends EMPService {

	/**
	 * 新产生一个公共的SQL语句执行对象.
	 * 
	 * @param context
	 * @throws EMPException
	 */
	public SqlExecAction getSQLExecAction(Context context)
			throws EMPException {
		SqlExecAction sqlExecAction = null;

		sqlExecAction = new SqlExecAction();
		sqlExecAction.setDataSource((String) context
				.getDataValue(SFConst.SERVICE_DATASOURCE));
		sqlExecAction.setSqlService((String) context
				.getDataValue(SFConst.SERVICE_SQL));

		return sqlExecAction;
	}
	
	
	
	public String baffle(Context context,String type,String serverId,String receiveNo)throws SFException{
		SFLogger.info(context, "报文挡版检查开始。");
		DaoBase db = new DaoBase();
		String sql = "SELECT t.msgtext FROM trdbaffle t where t.trancode = ? and t.type = ?  and t.serverid = ? and (? is null or t.receiveno = ?) and t.condition = '1'";
//		String[] param = new String[5];
//		param[0] = tranCode;
//		param[1] = type;
//		param[2] = serverId;
//		param[3] = receiveNo;
//		param[4] = receiveNo;
		Connection connection = SFUtil.getDataValue(context, SFConst.PUBLIC_TRAN_CONNECTION);
		if(connection==null){
			connection = DBHandler.getConnection(context);
		}
		String tranCode = SFUtil.getDataValue(context, SFConst.PUBLIC_TX_CODE);
			
		Map<String, Object> map = db.queryMap(context, connection, sql, tranCode,type,serverId,receiveNo,receiveNo);
		if(map!=null){
			String msgText = (String)map.get("msgtext");
			if(SFUtil.isNotEmpty(msgText)){
				SFLogger.info(context, "存在报文挡板，挡板内容为："+msgText);
				SFLogger.info(context, "报文挡版检查结束。");
				return msgText;
			}
		}
		
		
		SFLogger.info(context, "不存在报文挡板。");
		SFLogger.info(context, "报文挡版检查结束。");
		return null;
		
	}
	
	
	
	
}
