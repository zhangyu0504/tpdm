package module.dao;

import java.sql.Connection;

import module.bean.AcctDetail;
import module.trans.Page;

import com.ecc.emp.core.Context;
import common.exception.SFException;
import common.sql.dao.DaoBase;
import common.util.SFConst;
import common.util.SFUtil;

/**
 * 交易详情Dao
 * @author 申双江
 *
 */
public class AcctDetailDao extends DaoBase {
	/* 正副表 */
	private static final String CTX_PUBLIC_TAB_ACCTDETAIL_ZB = "TRDACCTDETAIL";
	private static final String CTX_PUBLIC_TAB_ACCTDETAIL_FB = "TRDACCTDETAIL_FB";
	
	/**
	 * 保存交易详情
	 * @param context
	 * @param connection
	 * @param bean
	 * @throws SFException
	 */
	public void saveAcctDetail(Context context, Connection connection, AcctDetail bean) throws SFException {
		String tableName = null;
		try {
			
			SFUtil.chkCond(context, SFUtil.isEmpty(bean.getTxDate()), "ST4895", "必要参数[TXDATE]没有提供");
			SFUtil.chkCond(context, SFUtil.isEmpty(bean.getSubTxSeqId()), "ST4895", "必要参数[SUBTXSEQID]没有提供");
			
			//是否清算时间段标识
			String workMode = SFUtil.getDataValue(context, SFConst.PUBLIC_WORKMODE);
			
			if(SFConst.WORKMODE_724CLEAR.equals(workMode)){
				tableName = CTX_PUBLIC_TAB_ACCTDETAIL_FB;
			}else{
				tableName = CTX_PUBLIC_TAB_ACCTDETAIL_ZB;
			}
			super.save(context, connection, bean.getSaveAcctDetailSQLStruct(tableName));
			
		} catch (SFException e){
			throw e;
		} catch (Exception e ){
			SFUtil.chkCond(context, "ST4895", e.getMessage());
		} finally {
			if(null!=bean){
				bean.resetChangedFlag();
			}
		}
	}

	public void updAcctDetail(Context context, Connection connection, String workMode,String secAcct,int secAcctSeq,String capAcct,String secCompCode) throws SFException {
		String tableName = null;
		try {
			if(SFConst.WORKMODE_724CLEAR.equals(workMode)){
				tableName = CTX_PUBLIC_TAB_ACCTDETAIL_FB;
			}else{
				tableName = CTX_PUBLIC_TAB_ACCTDETAIL_ZB;
			}
			
			String sql = "UPDATE "+ tableName + " SET SECACCT = ?,SECACCTSEQ = ? WHERE CAPACCT = ? AND SECCOMPCODE = ?";
			
			super.save( context, connection, sql,  secAcct, secAcctSeq, capAcct, secCompCode);
		} catch (SFException e){
			throw e;
		} catch (Exception e ){
			SFUtil.chkCond(context, "ST4895", e.getMessage());
		}
	}
	
	/**
	 * 查询交易详情
	 * @param context
	 * @param connection
	 * @param bean
	 * @return
	 * @throws SFException
	 */
	public AcctDetail qryAcctDetail(Context context, Connection connection, String subTxSeqId,String txDate) throws SFException {
		AcctDetail acctDetail = null;
		String tableName = null;
		try {
			//是否清算时间段标识
			String workMode = SFUtil.getDataValue(context, SFConst.PUBLIC_WORKMODE);
			
			if(SFConst.WORKMODE_724CLEAR.equals(workMode)){
				tableName = CTX_PUBLIC_TAB_ACCTDETAIL_FB;
			}else{
				tableName = CTX_PUBLIC_TAB_ACCTDETAIL_ZB;
			}		
			StringBuffer buffer = new StringBuffer();
			buffer.append("SELECT O.TXDATE,O.INITSIDE,O.USERID,O.TXSEQID,O.SECSEQID,O.SUBTXSEQID,O.INVTYPE,");
			buffer.append("O.SECACCT,O.SECACCTSEQ,O.ACCTID,O.OPENDEPID,O.OPENBRANCHID,O.SECCOMPCODE,O.CAPACCT,");
			buffer.append("O.CURCODE,O.DCFLAG,O.TXAMOUNT,O.ACCTBAL,O.ABSTRACT  abst,O.ABSTRACTSTR,O.JOURFLAG,O.TXCODE,");
			buffer.append("O.BUSITYPE,O.TXTIME,O.DEPID,O.BRANCHID,O.UNITTELLERID,O.CASHREMITFLAG,O.ACCTDEALID,");
			buffer.append("O.ACCTHOSTSEQID,O.PRESEQID,O.ACCTDEALDATE,O.COLFLAG,O.MEMO,O.TRANSEQID,O.BUSISEQID,O.UMID");
			buffer.append(" FROM " + tableName + " O");
			buffer.append(" WHERE O.SUBTXSEQID=? AND O.TXDATE=?");		
			acctDetail = super.query(context, connection, buffer.toString(), AcctDetail.class,subTxSeqId,txDate);			
		} catch (SFException e){
			throw e;
		} catch (Exception e ){
			SFUtil.chkCond(context, "ST4895", e.getMessage());
		}finally{
			if(acctDetail!=null){
				acctDetail.resetChangedFlag();
			}
		}
		return acctDetail;
	}
	
	/**
	 * (银行渠道发起)、(合作行发起) 查询交易明细
	 * @param context
	 * @param connection
	 * @param bean
	 * @return
	 * @throws SFException
	 */
	public Page<AcctDetail> qryAcctDetailInfo(Context context,
			Connection connection, String startDate, String endDate,String acctId, String capAcct,
			String secCompCode,String curCode,String workDate, Page<AcctDetail> page)
			throws SFException {
		try {	
			//是否清算时间段标识
			String workMode = SFUtil.getDataValue(context, SFConst.PUBLIC_WORKMODE);				
			StringBuffer buffer = new StringBuffer();
			if(startDate.equals(workDate)){	
				buffer.append("SELECT A.CURCODE curCode,A.TXAMOUNT txAmount,A.TXDATE txDate,A.CAPACCT capAcct,A.SECCOMPCODE secCompCode,B.SECCOMPNAME secCompName,A.INITSIDE initSide,A.BUSITYPE busiType,A.ACCTID acctId FROM ");
				if(SFConst.WORKMODE_724CLEAR.equals(workMode)){ //清算时间段操作副表
					buffer.append(CTX_PUBLIC_TAB_ACCTDETAIL_FB + " A, TRDSECCOMPDATA B");//查询副表TRDACCTDETAIL_FB	
				}else{
					buffer.append(CTX_PUBLIC_TAB_ACCTDETAIL_ZB + " A, TRDSECCOMPDATA B");//查询正式表TRDACCTDETAIL
				}
			}else{
				buffer.append("SELECT /*+ INDEX(a TRDACCTDETAILHIS_IDX3) */ A.CURCODE curCode,A.TXAMOUNT txAmount,A.TXDATE txDate,A.CAPACCT capAcct,A.SECCOMPCODE secCompCode,B.SECCOMPNAME secCompName,A.INITSIDE initSide,A.BUSITYPE busiType,A.ACCTID acctId FROM ");
				buffer.append(" TRDACCTDETAILHIS A, TRDSECCOMPDATA B");//查询历史表TRDACCTDETAILHIS
			}
			buffer.append(" WHERE A.TXDATE BETWEEN ? AND ? AND (A.ACCTID = ? OR ? IS NULL)");
			buffer.append(" AND A.SECCOMPCODE = B.SECCOMPCODE AND A.BUSITYPE IN ('01','02')");
			buffer.append(" AND JOURFLAG LIKE '0%'");
			buffer.append(" AND A.CURCODE = ? ");
			if(SFUtil.isNotEmpty(secCompCode) && SFUtil.isNotEmpty(capAcct)){
				buffer.append(" AND A.CAPACCT = ? AND A.SECCOMPCODE = ? ORDER BY A.TXDATE");
				page = super.queryPageing(context, connection, buffer.toString(),AcctDetail.class,page,startDate,endDate,acctId,acctId,curCode,capAcct,secCompCode);
			}else{
				buffer.append(" ORDER BY A.TXDATE");
				page = super.queryPageing(context, connection, buffer.toString(),AcctDetail.class,page,startDate,endDate,acctId,acctId,curCode);
			}					
		} catch (SFException e){
			throw e;
		} catch (Exception e ){
			SFUtil.chkCond(context, "ST4895", e.getMessage());
		}
		return page;
	}	
	
}
