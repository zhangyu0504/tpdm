package core.communication.access.tcpip;

import java.net.InetAddress;

import com.ecc.emp.core.Context;
import com.ecc.emp.core.EMPException;
import com.ecc.emp.data.InvalidArgumentException;
import com.ecc.emp.data.KeyedCollection;
import com.ecc.emp.data.ObjectNotFoundException;
import com.ecc.emp.flow.reversal.HostAccessAction;
import com.ecc.emp.format.FormatElement;
import common.exception.SFException;
import common.services.PublicService;
import common.util.BizUtil;
import common.util.DateUtil;
import common.util.SFConst;
import common.util.SFUtil;

import core.communication.format.KeyedFormat;
import core.communication.util.AccessConstance;
import core.log.SFLogger;


/**
 * 【类名】动态TCPIP主机通讯扩展。  
 * <p>
 * 类功能说明：
 * <pre>
 * 动态TCPIP主机通讯扩展类。
 * 扩展TCPIP主机通讯功能，使用时配置动态IP和动态端口。
 * 访问TCPIP主机的操作步骤，通过访问TCPIP主机服务（TCPIPService），实现TCP/IP协议的通讯功能。
 * </pre> 
 * 使用说明： 
 * <pre>
 * 
 * </pre>
 * 其他说明：
 *<pre>
 * 返回状态：<br>
 * 0，成功；2，得到TCPIPService服务错误；3，主机通讯异常；4，超时异常
 *</pre>
 * 参数说明：
 *<pre>
 * 类成员变量说明 
 * serviceName：TCPIP通讯服务ID<br>
 * timeOut：通讯超时时间(ms)<br>
 * SendFormatName：发送报文格式定义名称，默认为sendHostFormat<br>
 * ReceiveFormatName：接收报文格式定义名称，默认为receiveFormatName<br>
 * encoding：字符编码
 * hostIP: 主机IP地址
 * hostPort: 主机端口
 *</pre>
 * @author hzf
 * @since  1.0 2011-04-16
 * @version 1.0
 * 修改说明：修改了通讯实现类，原emp实现的在压力测试高并发下无法承受压力 
 * 该组件目前支持6位或4位或0位报文长度的通讯协议 如果需要支持其他长度协议则需要作相应修改 by zhanglm@hundsun
 */
public class TCPIPDynamicAccessAction extends HostAccessAction {


//	/**
//	 * 发送报文格式定义名称
//	 */
//	private String sendFormatName = "sendHostFormat";
//	
//	/**
//	 * 接收报文格式定义名称
//	 */
//	private String receiveFormatName = "receiveFormatName";
//	
	/**
	 * 超时时间
	 */
	private int timeOut = 40000;
	
	/**
	 * 报文鉴别对象所在数据域
	 */
//	private String identityField;
	
	/**
	 * 字符编码
	 */
	private String encoding;
	
	/**
	 * 主机IP
	 */
	private String hostIP;
	
	/**
	 * 主机端口
	 */
	private String hostPort;
	

	/**
	 * 报文长度字段的长度
	 */
//	private String lengthHeadLen;
	/**
	 * MAC标识
	 */
	private String mac;
	/**
	 * 合作行编号
	 */
	private String bankNo;
	/**
	 * 服务代码
	 */
	private String svrCode;
	
	public TCPIPDynamicAccessAction() {
		super();
	}
	
	/**
	 * 函数功能说明：
	 * <pre>
	 * HostAccessAction的执行入口。调用TCPIPService进行通讯处理。
	 * </pre>
	 *  修改记录说明： 
	 * <pre>
	 * 
	 * </pre>
	 * @param context 交易上下文
	 * @return 0，成功；2，得到TCPIPService服务错误；3，主机通讯异常; 4, 超时
	 * @throws EMPException
	 * 
	 */
	public String doExecute(Context context) throws EMPException {
		long beginTime=System.currentTimeMillis();
		SFLogger.info(context, "TCPIPDynamicAccessAction执行开始时间:["+beginTime+"]");
		String hostIP = (String)getParamValue(context,"hostIP",this.hostIP,true);
		String hostPort = (String)getParamValue(context,"hostPort",this.hostPort,true);	
		String bankNo = null , svrCode = null;
		bankNo = getParamValue(context,"bankNo",this.bankNo,true).toString();
		svrCode = getParamValue(context,"svrCode",this.svrCode,true).toString();
		try {			
			SFLogger.info(context,"通讯连接方向： [/"+InetAddress.getLocalHost().getHostAddress()+"<-->/"+hostIP+"]");
			BBCPCommClient client = null;
			byte[] toSendMessage = null;
			byte[] repMsg = null;
			repMsg = getRequestMsg(context);
			
			//挡板检查
			PublicService pubService = ((PublicService) context.getService((String) context.getDataValue(SFConst.SERVICE_PUBLICSERVICENAME)));
			String reqData = pubService.baffle(context, "2", svrCode, bankNo);
			if(SFUtil.isNotEmpty(reqData)){
				handleResponse(context,reqData.getBytes());
				return "0";
			}
			
//			SFLogger.info(context, "报文内容："+new String(repMsg) );
			client = new BBCPCommClient(hostIP,hostPort,timeOut,4);
			String len = "0000"+repMsg.length;
			toSendMessage = new byte[4+repMsg.length];
			System.arraycopy((len.substring(len.length()-4, len.length())).getBytes(), 0, toSendMessage, 0, 4);
			System.arraycopy(repMsg, 0, toSendMessage, 4, repMsg.length);
			/*
			 * Mac 加密
			 */
			String sendMsg=new String(toSendMessage);
			sendMsg=sendMsg+BizUtil.genCoBankMac(context,sendMsg);
			toSendMessage=sendMsg.getBytes();
			
			String ret = client.SendCMD(context,toSendMessage);
			if(!"0".equals(ret)){
				if("2".equals(ret)){
					SFUtil.setDataValue(context,"A_RESPONSE_HEAD.RESPCODE", SFConst.RESPCODE_TIMEOUT_COBANK);
				}
				
				throw new EMPException("YYPTERROR9999","TCPIPDynamicAccessAction通讯错误："+ret);	
			}
			byte[] toReciveMessage = null;
			toReciveMessage = client.getResult().getBytes();//接收下来的全部报文
			if(toReciveMessage == null || toReciveMessage.length == 0){
				SFLogger.info(context, "TCPIPDynamicAccessAction通讯错误：接收返回数据为空。当做超时返回处理，返回超时4" );
				return "4";
			}
			/*
			 * Mac 校验
			 */
			String macMsg=new String(toReciveMessage);
			BizUtil.chkCoBankMac(context,macMsg);
			
			handleResponse(context,toReciveMessage);
	
		} catch (Exception tempE) {
			SFLogger.error(context, "通讯发生异常："+tempE.getMessage(), tempE );
			if("receiveTimeOut".equals(tempE.getMessage())){
				SFUtil.setDataValue(context,"A_RESPONSE_HEAD.RESPCODE", SFConst.RESPCODE_TIMEOUT_COBANK);
				return "4";						//扩展，如果BBCPComm返回接受超时
			}
			return "3";
		}finally{
			long endTime=System.currentTimeMillis();
			SFLogger.info(context, "TCPIPDynamicAccessAction执行结束时间:["+endTime+"],总耗时： "+(endTime-beginTime)+"(ms)" );
		}
		
		return "0";
	}
	
	
	//处理返回数据
	private void handleResponse(Context context,byte[] responseMsg) throws Exception {
		
		
		KeyedCollection kColl = new KeyedCollection(AccessConstance.A_RESPONSE_HEAD);
		kColl.setAppend( true );
		FormatElement requestHeadFormat = context.getFormat(AccessConstance.A_RESPONSE_HEAD);
		if(requestHeadFormat.isBin())
			requestHeadFormat.unFormat(responseMsg, kColl );
		else
			requestHeadFormat.unFormat(new String(responseMsg), kColl );
		
		//去掉空格
		if(kColl != null){
		    for(int i=0;i<kColl.size();i++){
		    	String value = (String) kColl.getDataValue(kColl.getDataElement(i).getName());
		    	kColl.setDataValue(kColl.getDataElement(i).getName(), value.trim());
		    	
		    }
		    
		}
		
		if(!context.containsKey(AccessConstance.A_RESPONSE_HEAD)){
			context.addDataElement(kColl);
		}else{
			context.removeDataElement(AccessConstance.A_RESPONSE_HEAD);
			context.addDataElement(kColl);
		}
		
		//根据报文头的返回码来判断是否需要加入报文体内容，只有返回"000000"成功时才返回报文体
        if(!SFConst.RESPCODE_SUCCCODE_COBANK.equals(SFUtil.getDataValue(context,"A_RESPONSE_HEAD.RESPCODE"))){
        	return ;
        }
		
		
		
		KeyedFormat headFormat = (KeyedFormat)requestHeadFormat.getFormatElement();
		
		int headLen = headFormat.getHeadLen();
		
		int length = responseMsg.length - headLen;
		if( length > 0 )
		{
			byte[] msg = new byte[length];
			System.arraycopy(responseMsg, headLen, msg, 0, length);
			
//			KeyedCollection outColl = new KeyedCollection(this.svrCode+"_O");
//			outColl.setAppend( true );
			FormatElement resFormat = context.getFormat(this.svrCode+"_O");
			if(resFormat.isBin())
				resFormat.unFormat(msg, context );
			else
				resFormat.unFormat(new String(msg), context );
			
		}
		
	}
	
	


	public byte[] getRequestMsg(Context context) throws EMPException {
		
		initHeadKcoll(context);
//		initMsgHead(1, context);
		KeyedCollection headColl = (KeyedCollection)context.getDataElement(AccessConstance.A_REQUEST_HEAD);
		FormatElement headFormat = context.getFormat(AccessConstance.A_REQUEST_HEAD);
		String headData = (String)headFormat.format(headColl);
//		KeyedCollection inColl = (KeyedCollection)context.getDataElement(this.svrCode + "_I");
		FormatElement msgFormat = context.getFormat(this.svrCode + "_I");
		
		if(msgFormat==null){
			throw new SFException("ST9999","上下文没找到"+this.svrCode + "_I"+"请检查CobankFormats.xml文件");
		}
		
		String responseData = (String)msgFormat.format(context);
//		String responseData = (String)msgFormat.format(outColl);
		int len = headData.length()+responseData.length();
		String resData = headData+responseData;//String.valueOf(len)+
		return resData.getBytes();
		
	}
	
	
	
	public void initHeadKcoll(Context context) throws EMPException {
//		initMsgHead(1, context);
		
		String strJournalNo = null;
		
		strJournalNo = SFUtil.getDataValue(context, SFConst.PUBLIC_MSG_SEQ_NO);
		if(SFUtil.isEmpty(strJournalNo)){
			strJournalNo =  BizUtil.getInitSeqId(context);
		}
		
		
		KeyedCollection headColl = null;
		if(context.containsKey(AccessConstance.A_REQUEST_HEAD)){
			headColl = SFUtil.getDataElement(context, AccessConstance.A_REQUEST_HEAD);//(KeyedCollection)context.getDataElement(AccessConstance.A_REQUEST_HEAD);
			
			
			handleKcollValue(headColl,"RESPCODE", "SF9999");
			handleKcollValue(headColl,"RESPMSG", "");
			
			handleKcollValue(headColl,"serviceId", this.svrCode);
			handleKcollValue(headColl,"TRANSDATE", DateUtil.getMacDateShort());
			handleKcollValue(headColl,"TRANSTIME", DateUtil.getMacTime());
			
			
			
			handleKcollValue(headColl,"CHANNELSERIALNO", strJournalNo);
			handleKcollValue(headColl,"BUSINESSDATE", DateUtil.getMacDateShort());
			handleKcollValue(headColl,"BANKNO", this.bankNo);
			handleKcollValue(headColl,"RESERVE", "");
			
//			headColl.setDataValue("serviceId", this.svrCode);
//			headColl.setDataValue("TRANSDATE", DateUtil.getMacDateShort());
//			headColl.setDataValue("TRANSTIME", DateUtil.getMacTime());
//			headColl.setDataValue("CHANNELSERIALNO", BizUtil.getInitSeqId(context));
//			headColl.setDataValue("BUSINESSDATE", DateUtil.getMacDateShort());
//			headColl.setDataValue("BANKNO", this.bankNo);
//			headColl.setDataValue("RESERVE", "");
		}else{
			
			headColl = new KeyedCollection(AccessConstance.A_REQUEST_HEAD);
			headColl.addDataField("RESPCODE", "SF9999");
			headColl.addDataField("RESPMSG", "");
			headColl.addDataField("serviceId", this.svrCode);
			headColl.addDataField("TRANSDATE", DateUtil.getMacDateShort());
			headColl.addDataField("TRANSTIME", DateUtil.getMacTime());
			headColl.addDataField("CHANNELSERIALNO", strJournalNo);
			headColl.addDataField("BUSINESSDATE", DateUtil.getMacDateShort());
			headColl.addDataField("BANKNO", this.bankNo);
			headColl.addDataField("RESERVE", "");
			context.addDataElement(headColl);
		}
		
		
		
	}
	
	
	public void handleKcollValue(KeyedCollection kcoll,String key,String value){
		
		String oldValue = null;
		try {
			oldValue = (String) kcoll.getDataValue(key);
			if(SFUtil.isEmpty(oldValue)){
				kcoll.setDataValue(key, value);
			}
			
		} catch (ObjectNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvalidArgumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

	/**
	 * 给报文加上mac串
	 * @param msg 不带mac的报文
	 * @param bankNo 
	 * @param svrCode
	 * @return  带mac的报文
	 * @throws EMPException 
	 */
	/*private byte[] getMessageByMac(byte[] message,String bankNo,String svrCode) throws EMPException{
		String tmpMsg = new String(message);
		String mac = MacUtil.genMac(StringTool.FillString(tmpMsg, ' ', 1, message.length+8).getBytes(), getMacKey(bankNo, svrCode));
		
		return (tmpMsg+mac).getBytes();	
	}*/
	
	/*private String getMacKey(String bankNo,String svrCode)  throws EMPException{
		BankInfo bankInfo = SysParamCache.getSysCPIPMap().get(bankNo+svrCode);

		if(bankInfo == null){
			EMPLog.log(SFConst.SF_SYS_TRXCODE, EMPLog.ERROR, 0,
					"BBCPTCPIPDynamicAccessByMacAction:参数表未配置，取合作行服务对应的联机信息为空：bankno=["+bankNo+"],svrcode=["+svrCode+"]");
			throw new EMPException("999999","取合作行服务对应的联机信息为空：bankno=["+bankNo+"],svrcode=["+svrCode+"]");			
		}
		
		return bankInfo.getMacKey();
	}*/
	



	/**
	 * 设置通讯超时时间。
	 * 
	 * @param timeOut 通讯超时时间
	 * @emp:isAttribute true
	 * @emp:name 超时时间
	 * @emp:desc 通讯超时时间
	 */
	public void setTimeOut(int timeOut) {
		this.timeOut = timeOut;
	}

	/**
	 * 设置字符编码。
	 * 
	 * @param encoding 字符编码
	 * @emp:isAttribute true
	 * @emp:name 字符编码
	 * @emp:desc 报文转换为字节流所使用的字符编码
	 */
	public void setEncoding(String encoding) {
		this.encoding = encoding;
	}

	/**
	 * 设置报文鉴别对象所在数据域。
	 * 会将该数据域中存放的对象传给TCPIPService，在接收到响应报文后根据该对象判断是否为需要报文。
	 * 
	 * @param identityField 报文鉴别对象所在数据域
	 * @emp:isAttribute true
	 * @emp:name 报文鉴别对象数据域
	 * @emp:desc 会将该数据域中存放的对象传给TCPIPService，在接收到响应报文后根据该对象判断是否为需要报文
	 * @emp:editClass com.ecc.ide.editor.transaction.DataNamePropertyEditor
	 */
//	public void setIdentityField(String identityField) {
//		this.identityField = identityField;
//	}

	public void setHostIP(String hostIP) {
		this.hostIP = hostIP;
	}

	public void setHostPort(String hostPort) {
		this.hostPort = hostPort;
	}



//	public void setLengthHeadLen(String lengthHeadLen) {
//		this.lengthHeadLen = lengthHeadLen;
//	}

	/**
	 * @param mac the mac to set
	 */
	public void setMac(String mac) {
		this.mac = mac;
	}

	/**
	 * @param bankNo the bankNo to set
	 */
	public void setBankNo(String bankNo) {
		this.bankNo = bankNo;
	}

	/**
	 * @param svrCode the svrCode to set
	 */
	public void setSvrCode(String svrCode) {
		this.svrCode = svrCode;
	}
	
	
	
	
	
}
