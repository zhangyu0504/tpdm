package common.util;

import java.sql.Connection;
import java.text.DecimalFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import module.bean.AcctJour;
import module.bean.AgtAgentInfo;
import module.bean.AutoBecif;
import module.bean.BankCodeInfo;
import module.bean.LocalInfo;
import module.bean.Param;
import module.bean.SecCompData;
import module.bean.ServStatus;
import module.bean.SignAccountData;
import module.bean.Trans;
import module.cache.ParamCache;
import module.cache.TransCache;
import module.dao.AcctJourDao;
import module.dao.AutoBecifDao;
import module.dao.BankCodeInfoDao;
import module.dao.ServStatusDao;
import module.dao.SignAccountDataDao;
import module.trans.sf2bankchl.QryBalClient;
import module.trans.sf2bankchl.QryCardAttrClient;
import module.trans.sf2bankchl.QryCardLevelClient;
import module.trans.sf2bankchl.QryCardTypeClient;
import module.trans.sf2bankchl.QryKeyInvestinfoClient;
import module.trans.sf2bankchl.SetCardStatusWordClient;
import module.trans.sf2cobank.T810026Client;

import com.ecc.emp.core.Context;
import com.ecc.emp.data.IndexedCollection;
import com.ecc.emp.data.KeyedCollection;
import common.exception.SFException;
import common.sql.dao.DBHandler;
import common.sql.dao.DaoBase;

import core.log.SFLogger;

public class BizUtil {

	/**
	 * 千亿检查
	 * 
	 * @param context
	 * @param txAmount
	 * @throws SFException
	 */
	public static void chkMaxAmount( Context context, double txAmount ) throws SFException {
		SFUtil.chkCond( context, txAmount > 100000000000d, "ST4516" ,"单笔交易金额超限");
	}

	/**
	 * 获取交易配置日志级别
	 * 
	 * @param context
	 * @return
	 * @throws SFException
	 */
	public static String getLogLevel( Context context ) throws SFException {
		String txcode = SFUtil.getDataValue( context, SFConst.PUBLIC_TX_CODE );
		return getLogLevel( txcode );
	}

	/**
	 * 获取交易配置日志级别
	 * 
	 * @param context
	 * @return
	 * @throws SFException
	 */
	public static String getLogLevel( String txcode ) throws SFException {
		Trans trans = TransCache.getValue( txcode );
		return trans != null ? trans.getLogLevel() : null;
	}

	/**
	 * 公共方法： 获取数据库序列号
	 * 
	 * @param context
	 * @param sqeName
	 * @return seqId
	 * @throws SFException
	 */
	public static String genSeqId( Context context, String sqeName ) throws SFException {
		SFLogger.info( context, "genSeqId()开始" );
		DaoBase dao = new DaoBase();
		Connection tranConnection = null;
		String seqId = null;

		try {
			tranConnection = SFUtil.getDataValue( context, SFConst.PUBLIC_TRAN_CONNECTION );
			// 查询序列表当前序列号,不够10位左补0
			String sql = "SELECT SUBSTR('0000000000' || " + sqeName + ".NEXTVAL ,-10) TRCNO FROM DUAL";
			Map<String, Object> result = dao.queryMap( context, tranConnection, sql );

			if( result != null ) {
				seqId = ( String )result.get( "TRCNO" );
			}

		} catch( SFException e ) {
			throw e;
		} catch( Exception e ) {
			SFLogger.error( context, e.getMessage() );
		}
		SFLogger.info( context, "genSeqId()结束" );
		return DateUtil.getDateShort() + seqId;// 6位日期+10位seqId
	}

	/**
	 * 公共方法： 生成定长ID（系统初始流水号16位）
	 * 
	 * @return
	 * @throws SFException
	 */
	public static String getInitSeqId( Context context ) throws SFException {
		return genSeqId( context, "TRCNO" );
	}

	/**
	 * 公共方法： 生成定长ID（系统初始流水号16位）
	 * 
	 * @return
	 * @throws SFException
	 */
	public static String getInitSeqId( Context context, String sqeName ) throws SFException {
		return genSeqId( context, sqeName );
	}

	/**
	 * 公共方法： 生成发起方交易流水号 （8位券商流水号，左补0）
	 * 
	 * @param seqId
	 * @return txSeqId
	 * 
	 */
	public static String getTxSeqId( int len, String seqId ) {

		int idxSeqId = ( seqId.length() - len ) < 0 ? 0 : ( seqId.length() - len );

		String txSeqId = seqId.substring( idxSeqId );

		// 长度不足，左补0
		while( txSeqId.length() < len ) {
			txSeqId = "0" + txSeqId;
		}

		return txSeqId;

	}

	/**
	 * 公共方法： 生成发起方交易流水号 （8位券商流水号，左补0）
	 * 
	 * @param seqId
	 * @return txSeqId
	 * 
	 */
	public static String getTxSeqId( String seqId ) {

		String txSeqId = getTxSeqId( 8, seqId );
		return txSeqId;

	}

	
	/**
	 * 公共方法： 获取数据库8位序列号
	 * 
	 * @param context
	 * @param sqeName
	 * @return seqId
	 * @throws SFException
	 */
	public static String getSeqCorbankId( Context context,String sqeName) throws SFException {
		SFLogger.info( context, "getSeqCorbankId()开始" );
		DaoBase dao = new DaoBase();
		Connection tranConnection = null;
		String seqId = null;

		try {
			tranConnection = SFUtil.getDataValue( context, SFConst.PUBLIC_TRAN_CONNECTION );
			// 查询序列表当前序列号,不够8位左补0
			String sql = "SELECT SUBSTR('00000000' || " + sqeName + ".NEXTVAL ,-8) SEQCORBANK FROM DUAL";
			Map<String, Object> result = dao.queryMap( context, tranConnection, sql );

			if( result != null ) {
				seqId = ( String )result.get( "SEQCORBANK" );
			}

		} catch( SFException e ) {
			throw e;
		} catch( Exception e ) {
			SFLogger.error( context, e.getMessage() );
		}
		SFLogger.info( context, "getSeqCorbankId()结束" );
		return DateUtil.getDateShort() + seqId;// 6位日期+8位seqId
	}
	
	
	/**
	 * 公共方法： 生成交易记账流水号 （14位券商流水号，左补0）
	 * 
	 * @param seqId
	 * @return txSeqId
	 * 
	 */
	public static String getAcctDealId( Context context ) throws SFException {
		return getSeqCorbankId(context,"SEQ_CORBANK");
	}

	/**
	 * 公共方法： 字符串补位
	 * 
	 * @param seqId
	 * @return txSeqId
	 * 
	 */
	public static String fixChar( String str, int len, char c, String aligment ) {

		if( SFUtil.isNotEmpty( str ) ) {
			str = str.trim();

			// int idxLen = (len -str.length()) < 0 ? 0 : (len -str.length());

			// 长度不足，左补c
			while( str.length() < len ) {
				if( "right".equals( aligment ) ) {
					str = str + c;
				} else {
					str = c + str;
				}
			}
		}

		return str;

	}

	/**
	 * 公共方法： 生成22位ESB流水号
	 * 
	 * @param initSeqId
	 *            初始流水号
	 * @return esbNo
	 */
	public static String getChlSeqId( Context context, String initSeqId ) {
		return SFConst.SYS_SYSID + initSeqId; // 6系统ID+16位流水号;
	}

	/**
	 * 公共方法： 生成22位ESB流水号
	 * 
	 * @param initSeqId
	 *            初始流水号
	 * @return esbNo
	 * @throws SFException
	 */
	public static String getChlSeqId( Context context ) throws SFException {
		return getChlSeqId( context, genSeqId( context, "TRCNO" ) );
	}

	/**
	 * 公共方法： 初始化生成预约号
	 * 
	 * @param seqName
	 * @return
	 * @throws SFException
	 */
	public static String genBookId( Context context, String seqName ) throws SFException {
		return genSeqId( context, seqName );
	}

	/**
	 * 公共方法： 初始化生成预约号
	 * 
	 * @param seqName
	 * @return
	 * @throws SFException
	 */
	public static String genBookId( Context context ) throws SFException {
		return genSeqId( context, "TRCNO" );
	}

	/**
	 * 公共方法： 生成投资人管理帐号
	 * 
	 * @return
	 * @throws SFException
	 */
	public static String genSecAcctId( Context context ) throws SFException {
		String secAcctId = genSeqId( context, "TRCNO" );
		// 修改：原先是从数据库表取值，现在是改为从sequence取值。但原函数genSecAcct()的其他步骤，是保持不变的
		return "88888"+secAcctId;
	}

	/**
	 * 根据交易码判断银证交易类型
	 * 
	 * @param context
	 * @return
	 * @throws SFException
	 */
	public static String getTranType( Context context ) throws SFException {
		String tranType = null;
		String txCode = SFUtil.getDataValue( context, SFConst.PUBLIC_TX_CODE );// 获取交易码
		if( "100200".equals( txCode ) || "200200".equals( txCode ) || "300200".equals( txCode ) ) {// 银转证交易
			tranType = SFConst.BUSI_TYPE_B2S;
		} else if( "100201".equals( txCode ) || "200201".equals( txCode ) || "300201".equals( txCode ) ) {// 证转银交易
			tranType = SFConst.BUSI_TYPE_S2B;
		}
		return tranType;
	}

	/**
	 * 公共方法： 生成对账单号
	 * 
	 * @return
	 * @throws SFException
	 */
	public static String getStatmentId( Context context ) throws SFException {
		String statmentId = null;
		if( SFConst.BUSI_TYPE_B2S.equals( getTranType( context ) ) ) {// 银转证TPDM01
			statmentId = SFConst.STATEMENT_NO_B2S + DateUtil.getMacDate();
		} else if( SFConst.BUSI_TYPE_S2B.equals( getTranType( context ) ) ) {// 证转银TPDM02
			statmentId = SFConst.STATEMENT_NO_S2B + DateUtil.getMacDate();
		}
		return statmentId;
	}

	/**
	 * 检查钞汇标识是否合法 add by lch
	 * 
	 * @param context
	 * @return
	 * @throws SFException
	 */
	public static String chkCashRemitFlag( Context context, String cashRemitFlag ) throws SFException {

		if( SFUtil.isEmpty( cashRemitFlag ) ) {// 如果钞汇标识为空,则默认为钞
			cashRemitFlag = SFConst.CASH_FLAG;
		} else if( !SFConst.REMIT_FLAG.equals( cashRemitFlag ) && !SFConst.CASH_FLAG.equals( cashRemitFlag ) ) {
			SFUtil.chkCond( context, "ST4895", "钞汇标识非法" );
		}
		return cashRemitFlag;
	}

	/**
	 * 获取当前工作模式 0：正常交易时间段 1：清算时间段 2：节假日时间段 3：其他724时间段
	 * 
	 * @param context
	 * @throws SFException
	 */
	public static void setWorkMode( Context context, Connection connection ) throws SFException {
		try {
			LocalInfo localInfo = SFUtil.getDataValue( context, SFConst.PUBLIC_LOCAL_INFO );// 营业时间信息
			String txDate = DateUtil.getMacDate();// 系统交易日期
			String bankDate = localInfo.getBankDate();// 营业日期
			String lastBankDate = localInfo.getLastBankDate();// 前一营业日期
			String workDate = localInfo.getWorkdate();// 交易日期

			ServStatusDao servStatusDao = new ServStatusDao();
			// 有记录则为平台服务停止，没记录则为启动
			ServStatus servStatus = servStatusDao.qryServStatus( context, connection, bankDate );

			if( txDate.equals( bankDate ) && txDate.equals( workDate ) && SFUtil.isEmpty( servStatus ) ) {// 0-正常交易时间段
				SFUtil.setDataValue( context, SFConst.PUBLIC_WORKMODE, SFConst.WORKMODE_NORMAL );
			} else {// 724时间段
				if( !bankDate.equals( workDate ) ) {// 1-清算时间段
					SFUtil.setDataValue( context, SFConst.PUBLIC_WORKMODE, SFConst.WORKMODE_724CLEAR );
				} else if( txDate.compareTo( lastBankDate ) > 0 && txDate.compareTo( bankDate ) < 0 ) {// 2-节假日时间段
					SFUtil.setDataValue( context, SFConst.PUBLIC_WORKMODE, SFConst.WORKMODE_724HOLIDAY );
				} else {// 3-724其他时间段
					SFUtil.setDataValue( context, SFConst.PUBLIC_WORKMODE, SFConst.WORKMODE_724OTHER );
				}
			}

		} catch( Exception e ) {
			SFLogger.error( context, e.getMessage() );
			throw new SFException( e );
		}

	}

	/**
	 * 主机证件类型转换系统证件类型
	 * 
	 * @param idCode
	 *            证件类型（主机证件类型/系统证件类型）
	 * @param type
	 * @return
	 */
	private static String convHostAndSF4IdType( Context context, String idType, String type ) throws SFException {
		String newTypeId = "";
		idType = idType.trim(); // 对证件类型进行去空格
		Param param = null;
		SFLogger.info( context, String.format( "主机证件类型转换系统证件类型idCode=[%s],type=[%s]", idType, type ) );
		// 主机证件类型转系统证件类型
		if( "HOSTTOSF".equals( type.trim() ) ) {
			param = ParamCache.getValue( "SF_HOST2SF_ID_TYPE", idType );
			if( param != null ) {
				newTypeId = param.getValue();
			}
		} else if( "SFTOHOST".equals( type.trim() ) ) {// 系统证件类型转主机证件类型+
			param = ParamCache.getValue( "SF_SF2HOST_ID_TYPE", idType );
			if( param != null ) {
				if ("0".equals(idType)){
					String invType = SFUtil.getDataValue( context, SFConst.PUBLIC_INV_TYPE );// 客户类型
					newTypeId = SFConst.INV_TYPE_CORP.equals(invType)?"900":"0";//0-其它个人证件,900-其他企业证件 
				} else if ("51".equals(idType)){
					String chlIdType = SFUtil.getReqDataValue(context, "ID_TYPE");//渠道过来的证件类型，没送则为null
					newTypeId= "989".equals(chlIdType)?chlIdType:"996";//996-营业执照,989-统一社会信用代码 优先使用996
				} else {
					newTypeId = param.getValue();
				}
			}
		} else if( "COBANKTOSF".equals( type.trim() ) ) {// 合作行证件类型转系统证件类型
			param = ParamCache.getValue( "SF_ZL2SF_ID_TYPE", idType );
			if( param != null ) {
				newTypeId = param.getValue();
			}
		} else if( "SFTOCOBANK".equals( type.trim() ) ) {// 系统证件类型转合作行证件类型
			param = ParamCache.getValue( "SF_SF2ZL_ID_TYPE", idType );
			if( param != null ) {
				newTypeId = param.getValue();
			}
		} else {// 不是正确的请求类型直接返回空字符串
			return "";
		}
		SFLogger.info( context, String.format( "主机证件类型转换系统证件类型成功，方法返回：[%s]", newTypeId ) );
		return newTypeId;
	}

	/**
	 * 主机转三方
	 * 
	 * @param context
	 * @param idCode
	 * @param type
	 * @return
	 */
	public static String convHost2SF4IdType( Context context, String idType ) throws SFException {
		String newIdType = convHostAndSF4IdType( context, idType, "HOSTTOSF" );
		return newIdType;
	}

	/**
	 * 三方转主机
	 * 
	 * @param context
	 * @param idCode
	 * @return
	 * @throws SFException
	 */
	public static String convSF2Host4IdType( Context context, String idType ) throws SFException {
		String newIdType = convHostAndSF4IdType( context, idType, "SFTOHOST" );
		return newIdType;
	}



	/**
	 * 合作行转三方
	 * 
	 * @param context
	 * @param idCode
	 * @param type
	 * @return
	 */
	public static String convCoBank2SF4IdType( Context context, String idType ) throws SFException {
		String newIdType = convHostAndSF4IdType( context, idType, "COBANKTOSF" );
		return newIdType;
	}

	/**
	 * 三方转合作行
	 * 
	 * @param context
	 * @param idCode
	 * @param type
	 * @return
	 */
	public static String convSF2CoBank4IdType( Context context, String idType ) throws SFException {
		String newIdType = convHostAndSF4IdType( context, idType, "SFTOCOBANK" );
		return newIdType;
	}

	/**
	 * 深证通券商，直连券商证件互转
	 * 
	 * @param idCode
	 *            证件号码
	 * @param context
	 * @return 证件类型
	 */
	private static String convSecuAndSF4IdType( Context context, String idType, String turnType ) throws SFException {
		String newTypeId = "";
		Param param = null;
		SFLogger.info( context, String.format( "深证通,直连券商证件互转idType=[%s]", idType ) );
		Object sztFlag = SFUtil.getDataValue( context, SFConst.PUBLIC_SECU_TYPE );// 从上下文中获取深证通标识
		if( "SECU2SF".equals( turnType ) ) {// 券商转三方存管证件类型
			if( SFConst.SECU_SZT.equals( sztFlag ) && !"4".equals( idType ) ) {// 深证通证件类型并且不是港澳台类型
				param = ParamCache.getValue( "SF_SZT2SF_ID_TYPE", idType );
				if( param != null ) {
					newTypeId = param.getValue();
				}
			} else if( SFConst.SECU_ZL.equals( sztFlag ) && !"16".equals( idType ) ) {
				param = ParamCache.getValue( "SF_ZL2SF_ID_TYPE", idType );
				if( param != null ) {
					newTypeId = param.getValue();
				}
			} else {// 港澳台类型
				String idCode = SFUtil.getReqDataValue( context, "INV_ID_CODE" );
				if( idCode.trim().length() > 0 ) {
//					if( "H".equals( idCode.charAt( 0 ) ) || "M".equals( idCode.charAt( 0 ) ) ) {// 判断idCode第一位为H或者M则是港澳台类型
//						if( "1".equals( sztFlag ) )
//							return "60";// 返回60(港澳台居民通行证深证通类型)
//						else
//							return "3";// 返回16(港澳台居民通行证直连类型)

//					}
					return "3";
				} 
//				else if( SFUtil.isNum( idCode ) ) {
//					if( "1".equals( sztFlag ) )
//						return "70";// 返回70(台湾居民通行证深证通类型)
//					else
//						return "17";// 返回17(台湾居民通行证直连类型)
//				} 
//				else {
//					return "3";
//				}
			}
		} else if( "SF2SECU".equals( turnType ) ) {// 三方存管转券商证件类型
			if( SFConst.SECU_SZT.equals( sztFlag ) ) {// 深证通证件类型
				param = ParamCache.getValue( "SF_SF2SZT_ID_TYPE", idType );
				if( param != null ) {
					newTypeId = param.getValue();
				}
			} else {
				param = ParamCache.getValue( "SF_SF2ZL_ID_TYPE", idType );
				if( param != null ) {
					newTypeId = param.getValue();
				}
			}
		}

		SFLogger.info( context, String.format( "深证通,直连券商证件互转成功，convSecuAndSF4IdType方法返回:[%s]", newTypeId ) );
		return newTypeId;
	}

	/**
	 * 券商转三方
	 * 
	 * @param context
	 * @param idCode
	 * @param idType
	 * @return
	 * @throws SFException
	 */
	public static String convSecu2SF4IdType( Context context, String idType ) throws SFException {
		String newIdType = convSecuAndSF4IdType( context, idType, "SECU2SF" );
		return newIdType;
	}

	/**
	 * 三方转券商
	 * 
	 * @param context
	 * @param idCode
	 * @param idType
	 * @return
	 * @throws SFException
	 */
	public static String convSF2Secu4IdType( Context context, String idType ) throws SFException {
		String newIdType = convSecuAndSF4IdType( context, idType, "SF2SECU" );
		return newIdType;
	}

	/**
	 * 检查发起方流水号是否存在
	 * 
	 * @param context
	 *            上下文对象
	 * @param seqId
	 *            发起方流水
	 * @throws SFException
	 */
	public static void chkUniqueSeqId( Context context, String seqId ) throws SFException {
		SFLogger.info( context, String.format( "检查发起方流水号是否存在seqId=[%s]", seqId ) );
		AcctJourDao acctJourDao = new AcctJourDao();
		Connection tranConnection = SFUtil.getDataValue( context, SFConst.PUBLIC_TRAN_CONNECTION );
		try {
			AcctJour acctJour = acctJourDao.qryAcctJourByTxSeqId( context, tranConnection, seqId );
			SFUtil.chkCond( context, acctJour == null, "ST4031", "发起方流水号已经存在" );
		} catch( SFException e ) {
			throw e;
		} catch( Exception e ) {
			SFUtil.chkCond( context, "ST4895", e.getMessage() );
		}

	}

	/**
	 * 检查当天是否发生过转账交易
	 * 
	 * @param context
	 * @throws SFException
	 */
	public static void chkTransfer( Context context ) throws SFException {
		Object tranCode = SFUtil.getDataValue( context, SFConst.PUBLIC_TX_CODE );// 从上下文中获取交易码
		Connection tranConnection = SFUtil.getDataValue( context, SFConst.PUBLIC_TRAN_CONNECTION );
		try {
			AcctJourDao acctJourDao = new AcctJourDao();
			AcctJour acctJour = acctJourDao.qryAcctJourByTxCode( context, tranConnection );
			if( "300102".equals( tranCode ) || "200102".equals( tranCode ) || "100102".equals( tranCode ) ) {
				SFUtil.chkCond( context, acctJour != null, "ST4815", "当日发生过转账交易,不允许变更结算帐号" );
			} else if( "100101".equals( tranCode ) ) {
				SFUtil.chkCond( context, acctJour != null, "ST4815", "当日发生过转账交易,不允许撤销签约关系" );
			}
		} catch( SFException e ) {
			throw e;
		} catch( Exception e ) {
			SFUtil.chkCond( context, "ST4895", e.getMessage() );
		}

	}

	/**
	 * 将字符数组转换成数字数组
	 * 
	 * @param ca
	 *            字符数组
	 * @return 数字数组
	 */
	public static int[] converCharToInt( char[] ca ) {
		int len = ca.length;
		int[] iArr = new int[ len ];
		try {
			for( int i = 0; i < len; i++ ) {
				iArr[ i ] = Integer.parseInt( String.valueOf( ca[ i ] ) );
			}
		} catch( NumberFormatException e ) {
			e.printStackTrace();
		}
		return iArr;
	}

	/**
	 * 数字验证
	 * 
	 * @param val
	 * @return 提取的数字。
	 */
	public static boolean isNum( String val ) {
		return val == null || "".equals( val ) ? false : val.matches( "^[0-9]*$" );
	}

	/** 每位加权因子 */
	public static final int power[] = { 7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2 };

	/**
	 * 将身份证的每位和对应位的加权因子相乘之后，再得到和值
	 * 
	 * @param iArr
	 * @return 身份证编码。
	 */
	public static int getPowerSum( int[] iArr ) {
		int iSum = 0;
		if( power.length == iArr.length ) {
			for( int i = 0; i < iArr.length; i++ ) {
				for( int j = 0; j < power.length; j++ ) {
					if( i == j ) {
						iSum = iSum + iArr[ i ] * power[ j ];
					}
				}
			}
		}
		return iSum;
	}

	/**
	 * 将power和值与11取模获得余数进行校验码判断
	 * 
	 * @param iSum
	 * @return 校验位
	 */
	public static String getCheckCode18( int iSum ) {
		String sCode = "";
		switch( iSum % 11 ) {
		case 10:
			sCode = "2";
			break;
		case 9:
			sCode = "3";
			break;
		case 8:
			sCode = "4";
			break;
		case 7:
			sCode = "5";
			break;
		case 6:
			sCode = "6";
			break;
		case 5:
			sCode = "7";
			break;
		case 4:
			sCode = "8";
			break;
		case 3:
			sCode = "9";
			break;
		case 2:
			sCode = "x";
			break;
		case 1:
			sCode = "0";
			break;
		case 0:
			sCode = "1";
			break;
		}
		return sCode;
	}

	/**
	 * 将15位身份证号码转换为18位（19**）
	 * 
	 * @param invIdCode
	 * @return
	 * @throws SFException
	 */
	public static String converTo18Card19( String invIdCode ) throws SFException {
		return conver15CardTo18( invIdCode, "19" );
	}

	/**
	 * 将15位身份证号码转换为18位（20**）
	 * 
	 * @param invIdCode
	 * @return
	 * @throws SFException
	 */
	public static String converTo18Card20( String invIdCode ) throws SFException {
		return conver15CardTo18( invIdCode, "20" );
	}

	/**
	 * 将15位身份证号码转换为18位
	 * 
	 * @param idCard
	 *            15位身份编码
	 * @return 18位身份编码
	 */
	private static String conver15CardTo18( String invIdCode, String preYear ) throws SFException {
		String idCard18 = null;
		if( SFUtil.isEmpty( invIdCode ) || invIdCode.length() != 15 ) {
			return null;
		}
		try {
			if( BizUtil.isNum( invIdCode ) ) {
				// 获取出生年月日
				String birthday = invIdCode.substring( 6, 12 );
				Date birthDate;
				birthDate = DateUtil.strToDate( "yyyyMMdd", preYear + birthday );
				Calendar cal = Calendar.getInstance();
				if( birthDate != null )
					cal.setTime( birthDate );
				// 获取出生年(完全表现形式,如：2010)
				String sYear = String.valueOf( cal.get( Calendar.YEAR ) );
				idCard18 = invIdCode.substring( 0, 6 ) + sYear + invIdCode.substring( 8 );
				// 转换字符数组
				char[] cArr = idCard18.toCharArray();
				if( cArr != null ) {
					int[] iCard = BizUtil.converCharToInt( cArr );
					int iSum17 = BizUtil.getPowerSum( iCard );
					// 获取校验位
					String sVal = BizUtil.getCheckCode18( iSum17 );
					if( sVal.length() > 0 ) {
						idCard18 += sVal;
					} else {
						return null;
					}
				}
			}
		} catch( Exception e ) {
			throw new SFException( "ST5799", "将15位身份证号码转换为18位失败！", e );
		}
		return idCard18;
	}

	/**
	 * 根据证件类型区分境内外标志
	 * 
	 * @param IdType
	 * @return
	 */
	public static String convInterFlag( String idType ) {
		return ( "4".equals( idType ) || "3".equals( idType ) || "19".equals( idType ) || "20".equals( idType ) ) ? SFConst.INTER_FLAG_DOMESTIC : SFConst.INTER_FLAG_ABROAD;
	}

	/**
	 * 0/20/21不允许做此交易
	 * 
	 * @param IdType
	 * @return
	 * @throws SFException
	 */
	public static void chkIdType( Context context, String idType,String invType ) throws SFException {
		if ( SFConst.INV_TYPE_RETAIL.equals(invType) && SFConst.ID_TYPE_OTHERS.equals( idType ) ){
			// 个人客户0证件类型不允许做此交易
			SFUtil.chkCond( context, "ST4055", String.format( "该证件类型不允许做此业务ID_TYPE=[%s]", idType ) );
		} else if ( SFConst.INV_TYPE_CORP.equals(invType) && (SFConst.ID_TYPE_PERSON_WGGMQTZJ.equals( idType ) || "21".equals( idType ))){
			// 对公客户20/21证件类型不允许做此交易
			SFUtil.chkCond( context, "ST4055", String.format( "该证件类型不允许做此业务ID_TYPE=[%s]", idType ) );
		}

	}

	/**
	 * 银行端交易交易币种校验
	 * 
	 * @param context
	 * @param initSide
	 *            渠道
	 * @param curCode
	 *            币种
	 * @return
	 * @throws SFException
	 */
	public static String convCurCode( Context context, String curCode ) throws SFException {
		String initSide = SFUtil.getDataValue( context, "CTX_PUBLIC_INIT_SIDE" );// 获取渠道
		if( !SFConst.INIT_SIDE_ABBANK.equals( initSide ) && SFUtil.isEmpty( curCode ) ) {
			curCode = SFConst.CUR_CODE_RMB;
		}
		SFUtil.chkCond( context, !SFConst.CUR_CODE_RMB.equals( curCode ), "ST4055", String.format( "币种错误！CUR_CODE=[%s]", curCode ) );
		return curCode;
	}

	/**
	 * 转加密券商资金密码
	 * 
	 * @param context
	 * @param initSide 渠道
	 * @param chnPwd  资金密码
	 * @return
	 * @throws SFException
	 */
	public static String convEncryptPwd(Context context,String secCompCode,String initSide,String chnPwd) throws SFException {
		String txtPwd = null;// 解密后明文
		String eptPwd = null;// 转加密后密文
		try {
			/*
			 * 获取券商密钥
			 */
			String secretKey=ParamCache.getValue2("SEC_ENCRYPT",secCompCode);
			
			/*
			 ******************* 解密渠道密码*****************
			 */
			if( "F".equals( initSide ) || "O".equals( initSide ) || "G".equals( initSide ) 
					|| "H".equals( initSide ) || "J".equals( initSide ) || "K".equals( initSide ) 
					|| "L".equals( initSide ) || "P".equals( initSide ) || "Q".equals( initSide ) 
					|| "R".equals( initSide ) || "N".equals( initSide ) ) {
				// 对网银渠道的资金密码解密成明文，其它渠道均为明文不需转成明文
				txtPwd = DESUtil.decode(chnPwd, SFConst.EB_ENCRYPT_KEY);
				if(txtPwd!=null&&txtPwd.length()>6){
					txtPwd=txtPwd.substring(0,6);
				}
			} else {
				// 除网银发来的密文，其它渠道均为明文，不需转成明文
				txtPwd = chnPwd;
			}
			
			/*
			 ******************加密券商密码*****************
			 */
			//密钥的ASCILL转换成十六进制
			String hKey=DESUtil.bytesToHex(secretKey.getBytes());
			hKey=DESUtil.formatString(hKey,16);
			//明文ASCILL转换成十六进制
			String hData=DESUtil.bytesToHex(txtPwd.getBytes());			
			//String hKey=DESUtil.bytesToHex(secretKey.getBytes());			
			//格式化字符串，不足部份补0
			hData=DESUtil.formatString(hData,16);
			//hData=hData+"0030";
			//加密
			eptPwd = DESUtil.encode(hData, hKey);
			SFUtil.chkCond( context,SFUtil.isEmpty(eptPwd), "ST4223", "加密券商资金密码失败！" );
		} catch( SFException e ) {
			SFLogger.error(context, e.getMessage());
			throw e ;
		}catch( Exception e ) {
			SFLogger.error(context, e.getMessage());
			throw new SFException("ST4223",e.getMessage(),e);
		}
		return eptPwd;

	}
	
	/**
	 * 银行渠道转加密券商资金密码
	 * 
	 * @param context
	 * @param initSide 渠道
	 * @param chnPwd  资金密码
	 * @return
	 * @throws SFException
	 */
	public static String convBankChLEncryptPwd(Context context,String secCompCode,String initSide,String invType,String chnPwd) throws SFException {
		String txtPwd = null;// 解密后明文
		String eptPwd = null;// 转加密后密文
		try {
			/*
			 * 获取券商密钥
			 */
			String secretKey = ParamCache.getValue2("SEC_ENCRYPT",secCompCode);
			
			/*
			 ******************* 解密渠道密码*****************
			 */
			if( "F".equals( initSide ) || "O".equals( initSide ) || "G".equals( initSide ) 
					|| "H".equals( initSide ) || "J".equals( initSide ) || "K".equals( initSide ) 
					|| "L".equals( initSide ) || "P".equals( initSide ) || "Q".equals( initSide ) 
					|| "R".equals( initSide ) || "N".equals( initSide ) && "1".equals(invType) ) {
				// 对个人客户网银渠道的资金密码解密成明文，其它渠道均为明文不需转成明文
				txtPwd = DESUtil.decode(chnPwd, SFConst.EB_ENCRYPT_KEY);
				if(txtPwd!=null&&txtPwd.length()>6){
					txtPwd=txtPwd.substring(0,6);
				}
			} else {
				// 除网银发来的密文，其它渠道均为明文，不需转成明文
				txtPwd = chnPwd;
			}
			
			/*
			 ******************加密券商密码*****************
			 */
			//密钥的ASCILL转换成十六进制
			String hKey=DESUtil.bytesToHex(secretKey.getBytes());
			hKey=DESUtil.formatString(hKey,16);
			//明文ASCILL转换成十六进制
			String hData=DESUtil.bytesToHex(txtPwd.getBytes());			
			//String hKey=DESUtil.bytesToHex(secretKey.getBytes());			
			//格式化字符串，不足部份补0
			hData=DESUtil.formatString(hData,16);
			//hData=hData+"0030";
			//加密
			eptPwd = DESUtil.encode(hData, hKey);
			SFUtil.chkCond( context,SFUtil.isEmpty(eptPwd), "ST4223", "加密券商资金密码失败！" );
		} catch( SFException e ) {
			SFLogger.error(context, e.getMessage());
			throw e ;
		}catch( Exception e ) {
			SFLogger.error(context, e.getMessage());
			throw new SFException("ST4223",e.getMessage(),e);
		}
		return eptPwd;

	}

	/**
	 * 合作行端交易转加密券商资金密码
	 * 
	 * @param context
	 * @param initSide 渠道
	 * @param chnPwd  资金密码
	 * @return
	 * @throws SFException
	 */
	public static String convCobankEncryptPwd(Context context,String secCompCode,AgtAgentInfo agtInfo,String chnPwd) throws SFException {
		String txtPwd = null;// 解密后明文
		String eptPwd = null;// 转加密后密文
		try {
			if(agtInfo==null){
				throw new SFException("ST4223","证券资金帐号密码加密失败，请与银行技术人员联系！");
			}
			
			/*
			 ******************* 解密渠道密码*****************
			 */
			if(SFUtil.isNotEmpty(agtInfo.getPinkey())&&chnPwd.length()>6) {
				// 对网银渠道的资金密码解密成明文，其它渠道均为明文不需转成明文
				txtPwd = DESUtil.decode(chnPwd, agtInfo.getPinkey());
				if(txtPwd!=null&&txtPwd.length()>6){
					txtPwd=txtPwd.substring(0,6);
				}
			} else {
				// 除网银发来的密文，其它渠道均为明文，不需转成明文
				txtPwd = chnPwd;
			}
			
			/*
			 ******************加密券商密码*****************
			 */
			//获取券商密钥
			String secretKey=ParamCache.getValue2("SEC_ENCRYPT",secCompCode);
			//密钥的ASCILL转换成十六进制
			String hKey=DESUtil.bytesToHex(secretKey.getBytes());
			hKey=DESUtil.formatString(hKey,16);
			//明文ASCILL转换成十六进制
			String hData=DESUtil.bytesToHex(txtPwd.getBytes());			
			//String hKey=DESUtil.bytesToHex(secretKey.getBytes());			
			//格式化字符串，不足部份补0
			hData=DESUtil.formatString(hData,16);
			//hData=hData+"0030";
			//加密
			eptPwd = DESUtil.encode(hData, hKey);
			SFUtil.chkCond( context,SFUtil.isEmpty(eptPwd), "ST4223", "加密券商资金密码失败！" );
		} catch( SFException e ) {
			SFLogger.error(context, e.getMessage());
			throw e ;
		}catch( Exception e ) {
			SFLogger.error(context, e.getMessage());
			throw new SFException("ST4223",e.getMessage(),e);
		}
		return eptPwd;

	}
	
	/**
	 * 客户类型转换：深证通转三方
	 * 
	 * @param context
	 * @param invTypeSZT
	 * @return
	 * @throws SFException
	 */
	public static String convSZT2SFInvType( Context context, String invTypeSZT ) throws SFException {
		String invType = null;
		if( SFConst.INV_TYPE_CORP_SZT.equals( invTypeSZT ) ) {
			invType = SFConst.INV_TYPE_CORP;
		} else {
			invType = SFConst.INV_TYPE_RETAIL;
		}
		return invType;
	}

	/**
	 * 客户类型转换：三方转深证通
	 * 
	 * @param context
	 * @param invTypeSZT
	 * @return
	 * @throws SFException
	 */
	public static String convSF2SZTInvType( Context context, String invType ) throws SFException {
		String invTypeSZT = null;
		if( SFConst.INV_TYPE_CORP.equals( invType ) ) {
			invTypeSZT = SFConst.INV_TYPE_CORP_SZT;
		} else {
			invTypeSZT = SFConst.INV_TYPE_RETAIL_SZT;
		}
		return invTypeSZT;
	}

	/**
	 * 
	 * 通过客户类型设置默认性别
	 * @param context
	 * @param sex
	 * @param invType
	 * @return
	 * @throws SFException
	 */
	public static String convSZT2SFSex( Context context, String sex, String invType ) throws SFException {
		if( SFUtil.isEmpty( sex ) ) {
			if( "1".equals( invType ) ) {
				sex = "M";
			} else {
				sex = "-";
			}
		}
		return sex;
	}

	public static String convSZT2SFNationality( Context context, String nationality) throws SFException {
		if( SFUtil.isEmpty( nationality ) ) {
			nationality = "CHN";
		}
		return nationality;
	}
	
	/**
	 * 上主机查询校验卡状态
	 * @param context
	 * @param msg
	 * @return
	 * @throws SFException
	 */
	public static Context qryCardAttrClient( Context context, Map<String, Object> msg ) throws SFException {
		SFLogger.info( context, "上主机查询卡状态开始" );

		Context msgContext = null;
		try {
			Map<String, Object> tmpMsg = new HashMap<String, Object>();
			tmpMsg.put( "ACCT_ID", msg.get( "ACCT_ID" ) );// 账号ACCT_NO
			QryCardAttrClient qryCardAttrClient = new QryCardAttrClient();
			msgContext = qryCardAttrClient.send( context, tmpMsg );

			String retFlag = SFUtil.getDataValue( msgContext, SFConst.PUBLIC_RET_FLAG );
			IndexedCollection iColl = SFUtil.getDataElement(msgContext,"RET");
			KeyedCollection kColl = (KeyedCollection) iColl.getElementAt(0);// 获取响应数组
			//String retCode = SFUtil.getDataValue(msgContext, kColl, "RET_CODE");
			String retMsg = SFUtil.getDataValue(msgContext, kColl,"RET_MSG");//响应信息
			
			// 主机返回失败或异常,交易退出
			SFUtil.chkCond( context, !SFConst.RET_SUCCESS.equals( retFlag ), "ST5601", String.format("上主机[查询卡状态]失败,主机返回[%s]", retMsg));

			// 卡状态校验
			String resultFlag = "1";// 是否第三方存管系统卡校验位，0-是，1-否
			String invType = SFUtil.getDataValue( context, SFConst.PUBLIC_INV_TYPE );// 客户类型
			if( SFConst.INV_TYPE_RETAIL.equals( invType ) ) {// 个人
				String retStat = SFUtil.getDataValue( msgContext, "SYS_HEAD.RET_STATUS" );
				if( "S".equals( retStat ) ) {
					// 校验卡挂失状态
					IndexedCollection iColl1 = SFUtil.getDataElement( msgContext, "MSG_O_ICOLL1" );
					for( int i = 0; iColl1 != null && i < iColl1.size(); i++ ) {
						String certType = SFUtil.getDataValue( msgContext, ( KeyedCollection )iColl1.getElementAt( i ), "CERT_TYPE" );// 凭证类型
						if( "000".equals( certType ) ) {// 000-类型为卡
							iColl1 = SFUtil.getDataElement( msgContext, "CERT_PROPERTY_ARRAY" );
							String certStatus = SFUtil.getDataValue( msgContext, ( KeyedCollection )iColl1.getElementAt( i ), "CERT_STATUS" );// 凭证状态
							// 73-银行卡口头挂失;74-银行卡书面挂失
							SFUtil.chkCond( context, "73".equals( certStatus ) || "74".equals( certStatus ), "ST4112", String.format( "卡状态异常，卡已挂失！" ) );
							// 71.司法冻结
							SFUtil.chkCond( context, "71".equals( certStatus ), "ST5101", String.format( "银行帐号状态不正常[账户已被司法冻结]，不能开通第三方存管业务" ) );
							// 判断一账通卡是否过期
							SFUtil.chkCond( context, "90".equals( certStatus ), "ST5101", String.format( "银行帐号状态不正常[一账通卡已过期]，不能开通第三方存管业务" ) );
						}
					}
					// 校验个贷放款账户
					IndexedCollection iColl2 = SFUtil.getDataElement( msgContext, "ACCT_PROPERTY_ARRAY" );
					for( int i = 0; iColl2 != null && i < iColl2.size(); i++ ) {
						String acctStatus = SFUtil.getDataValue( msgContext, ( KeyedCollection )iColl2.getElementAt( i ), "ACCT_STATUS" );// 账户状态
						// 校验个贷放款账户 51.信贷资金监管账户(公司)
						SFUtil.chkCond( context, "51".equals( acctStatus ), "ST5102", String.format( "卡下有账号为[贷款账号]，不能开通第三方存管业务" ) );
						// 校验三方存管状态字 50:第三方存管
						if( "50".equals( acctStatus ) ) {
							resultFlag = "0";// 是三方存管帐号
						}
					}
				}
			}
			SFUtil.addDataField( msgContext, "RESULT_FLAG", resultFlag );
			SFLogger.info( context, "上主机查询卡状态结束" );
		} catch( SFException e ) {
			throw e;
		} catch( Exception e ) {
			SFUtil.chkCond( context, "ST4895", String.format( "qryCardAttrClient()失败%s", e.getMessage() ) );
		}

		return msgContext;
	}

	/**
	 * 上卡管查询卡类型和等级
	 * @param context
	 * @param msg
	 * @return
	 * @throws SFException
	 */
	public static Context qryCardTypeClient( Context context, Map<String, Object> msg ) throws SFException {
		SFLogger.info( context, "上主机查询是否联名卡开始" );
		String cardType = null;// 卡类型
		String cardlevel = null;// 卡等级
		Context msgContext = null;
		try {
			/******上卡管判断是否是联名卡开始********/
			SFLogger.info( context, "平安卡签约上卡管判断是否是联名卡开始" );

			Map<String, Object> tmpMsg = new HashMap<String, Object>();
			tmpMsg.put( "ACCT_ID", msg.get( "ACCT_ID" ) );// 账号ACCT_NO
			QryCardTypeClient qcTypeClient = new QryCardTypeClient();
			msgContext = qcTypeClient.send( context, tmpMsg ); // 发送报文

			String retFlag = SFUtil.getDataValue( msgContext, SFConst.PUBLIC_RET_FLAG );
			IndexedCollection iColl = SFUtil.getDataElement(msgContext,"RET");
			KeyedCollection kColl = (KeyedCollection) iColl.getElementAt(0);// 获取响应数组
			//String respCode = SFUtil.getDataValue(msgContext, kColl, "RET_CODE");
			String respMsg = SFUtil.getDataValue(msgContext, kColl,"RET_MSG");//响应信息
			
			SFUtil.chkCond( context, !SFConst.RET_SUCCESS.equals( retFlag ), "ST4377", String.format( "上主机查询是否联名卡失败,主机返回[%s]",respMsg) );
			cardType = SFUtil.getDataValue( msgContext, "MSG_O.CARD_TYPE" );// 是否联名卡 1-是 lmcard
			SFLogger.info( context, String.format( "平安卡签约上卡管判断是否是联名卡结束" ) );
			/******上卡管判断是否是联名卡结束********/

			if( "1".equals( cardType ) ) {
				SFLogger.info( context, String.format( "此卡cardno[%s]为联名卡！", msg.get( "ACCT_ID" ) ) );
				// 判断该联名卡是否是要签约平安证券，如果不是则直接退出报错
				if( !SFConst.SECU_PINGANZQ.equals( msg.get( "SEC_COMP_CODE" ) ) && !SFConst.SECU_PINGANXY.equals( msg.get( "SEC_COMP_CODE" ) ) )// 10629999 10620000 放常量
				{
					SFUtil.chkCond( context, "ST5111", String.format( "银证联名卡不能签约非平安证券" ) );
				}

				/******联名卡签约上卡管判断卡等级开始********/
				SFLogger.info( context, String.format( "联名卡签约上卡管判断卡等级开始" ) );
				tmpMsg = new HashMap<String, Object>();
				tmpMsg.put( "ACCT_ID", msg.get( "ACCT_ID" ) );// 账号ACCT_NO
				QryCardLevelClient qcLeveClient = new QryCardLevelClient();
				msgContext = qcLeveClient.send( context, tmpMsg ); // 发送报文

				retFlag = SFUtil.getDataValue( msgContext, SFConst.PUBLIC_RET_FLAG );
				String retMsg = SFUtil.getDataValue( msgContext, "MSG_O.RET_MSG" );// 响应信息
				// 判断查询是否成功
				if( !SFConst.RET_SUCCESS.equals( retFlag ) ) {
					SFUtil.chkCond( context, "ST4377", String.format( retMsg ) );
				}
				cardlevel = SFUtil.getDataValue( msgContext, "MSG_O.CARD_LEVEL" );// 联名卡等级
				SFLogger.info( context, String.format( "联名卡签约平安证券卡片等级为cardlv[%s]", cardlevel ) );
				SFLogger.info( context, String.format( "联名卡签约上卡管判断卡等级结束" ) );
				/******联名卡签约上卡管判断卡等级结束*******/
			}
			SFUtil.addDataField( msgContext, "CARD_TYPE", cardType );
			SFUtil.addDataField( msgContext, "CARD_LEVEL", cardlevel );
		} catch( SFException e ) {
			throw e;
		} catch( Exception e ) {
			SFUtil.chkCond( context, "ST4895", String.format( "qryCardAttrClient()失败%s", e.getMessage() ) );
		}
		SFLogger.info( context, "上主机查询是否联名卡结束" );
		return msgContext;
	}

	/**
	 * 上主机查询卡主帐号开始
	 * @param context
	 * @param msg
	 * @return
	 * @throws SFException
	 */
	public static Context qryBalClient( Context context) throws SFException {
		Context msgContext = null;
		try {
			String acctId = SFUtil.getReqDataValue(context, "ACCT_ID");//账号ACCT_NO
			String curCode = SFUtil.getReqDataValue(context, "CUR_CODE");//币种CCY
			String invName = SFUtil.getReqDataValue(context, "INV_NAME");//账户名称ACCT_NAME
			String secCompCode = SFUtil.getReqDataValue(context, "SEC_COMP_CODE");//券商代码
			
			SFLogger.info(context, "上主机查询卡主帐号开始");  
			Map<String, Object> tmpMsg = new HashMap<String, Object>();
			tmpMsg.put("ACCT_ID",acctId);
			tmpMsg.put("CUR_CODE",curCode);
			tmpMsg.put("INV_NAME",invName);
			QryBalClient qryBalClient = new QryBalClient();
			msgContext = qryBalClient.send(context, tmpMsg);	//发送报文
			String retFlag=SFUtil.getDataValue(msgContext,SFConst.PUBLIC_RET_FLAG);
			IndexedCollection iColl = SFUtil.getDataElement(msgContext,"RET");
			KeyedCollection kColl = (KeyedCollection) iColl.getElementAt(0);// 获取响应数组
			//String respCode = SFUtil.getDataValue(msgContext, kColl, "RET_CODE");
			String respMsg = SFUtil.getDataValue(msgContext, kColl,"RET_MSG");//响应信息
			
			SFUtil.chkCond(context, !SFConst.RET_SUCCESS.equals(retFlag), "ST5602", String.format("上主机获取[卡主账号]失败，主机返回[%s]",respMsg));

			String savAcct = null;
			String invType = SFUtil.getDataValue( context, SFConst.PUBLIC_INV_TYPE );// 客户类型
			if (SFConst.INV_TYPE_RETAIL.equals(invType)) {//个人
				IndexedCollection iColl1=SFUtil.getDataElement(msgContext,"MSG_O_ICOLL");
				kColl=(KeyedCollection)iColl1.getElementAt(0);//获取响应数组
				savAcct = SFUtil.getDataValue(msgContext,kColl,"ACCT_ID");//卡主帐号 
				SFLogger.info(context,String.format("取卡下主帐号[%s]",savAcct));
				SFUtil.chkCond(context, SFUtil.isEmpty(savAcct), "ST5602", String.format("上主机获取[卡主账号]失败"));

				String pbcAcctType=SFUtil.getDataValue(msgContext,kColl,"PBC_ACCT_TYPE");//取人行账户分类 
				SFLogger.info(context,String.format("取人行账户分类[%s]",pbcAcctType));
				SFUtil.chkCond(context, SFUtil.isEmpty(pbcAcctType), "ST5602", String.format("上主机获取[人行账户分类]失败"));

				if("2".equals(pbcAcctType)){//二类账户
					SFLogger.info(context,String.format("该券商已进入二类账户校验[%s]",secCompCode));
					//没查到允许二类账户签约记录，拦截报错
					SecCompData secCompData = SFUtil.getDataValue(context, SFConst.PUBLIC_SECU);//获取券商信息
					SFUtil.chkCond(context,"1".equals(secCompData.getIIAcctFlag()),"ST5421",String.format("该券商不允许办理[二类账户签约]"));
					SFLogger.info(context,String.format("该券商二类账户校验通过"));
				}
			}

			String branchId = SFUtil.getDataValue(msgContext,"APP_HEAD.BRANCH_ID");//开户网点号
			SFLogger.info(context,String.format("取卡开户网点号[%s]",branchId));
			SFUtil.chkCond(context, SFUtil.isEmpty(branchId), "ST5602", String.format("上主机获取[账号开户网点]失败"));
			SFUtil.addDataField( msgContext, "SAV_ACCT", savAcct );
		} catch( SFException e ) {
			throw e;
		} catch( Exception e ) {
			SFUtil.chkCond( context, "ST4895", String.format( "qryCardAttrClient()失败%s", e.getMessage() ) );
		}
		SFLogger.info( context, "上主机查询卡主帐号结束" );
		return msgContext;
	}
	
	/**
	 * 发送BECIF协议 
	 * @param context
	 * @return
	 * @throws SFException
	 */
	public static void addAutoBecif( Context context, Connection tranConnection, Map<String, Object> msg ) throws SFException {
		try {
			// 发送BECIF协议
			String acctId = SFUtil.getReqDataValue( context, "ACCT_ID" );// 银行帐号
			String initSide = SFUtil.getReqDataValue( context, "INIT_SIDE" );// 渠道
			String counterID = SFUtil.getDataValue( context, "APP_HEAD.USER_ID" );// USERID
			String openDepId = SFUtil.getReqDataValue( context, "OPEN_DEP_ID" );// 推荐网点号 //个人客户参数
			String secCompCode = SFUtil.getReqDataValue( context, "SEC_COMP_CODE" );// 券商代码
			AutoBecifDao autoBecifDao = new AutoBecifDao();
			SignAccountDataDao signAccountDataDao = new SignAccountDataDao();
			SecCompData secCompData = SFUtil.getDataValue( context, SFConst.PUBLIC_SECU );// 获取券商信息
			DBHandler.beginTransaction( context, tranConnection );// 开启事务

			String subType = null;
			String tpdmFlag = secCompData.getTpdmFlag();
			/* 判断是普通证券还是融资融券 */
			if( SFConst.TPDM_FLAG_NORMAL.equals( tpdmFlag ) ) {// 普通证券
				subType = "R81";
			} else if( SFConst.TPDM_FLAG_MARGIN.equals( tpdmFlag ) ) {// 融资融券
				subType = "R83";
			}
			// 拼接协议号 券商代码（8位）-协议小类（R81 为A股、R82为B股 、R83为融资融券）-卡号
			String agreementNo = secCompCode + "-" + subType + "-" + acctId;

			// 查询卡号对应成功签约该券商的个数，如果只有一个，即是刚刚签约的这一条。需要发协议到BECIF
			List<SignAccountData> signAccountDataList = signAccountDataDao.qrySignAccountDataListByAcctId( context, tranConnection, acctId, secCompCode );
			if( signAccountDataList != null && signAccountDataList.size() == 1 && !SFUtil.isEmpty( subType ) ) {

				if( !SFConst.INIT_SIDE_ABBANK.equals( initSide ) ) {// 非柜面的电子渠道来的交易，操作柜员置为EB001
					counterID = "EB001";
					openDepId = "9998";
				}

				// 拼接协议号 券商代码（8位）-协议小类（R81 为A股、R82为B股 、R83为融资融券）-卡号*/
				AutoBecif autoBecif = new AutoBecif();
				autoBecif.setTxTime( ( String )msg.get( "TX_TIME" ) );
				autoBecif.setStatus( "0" );
				autoBecif.setAgreementNo( agreementNo );
				autoBecif.setBecifNo( ( String )msg.get( "ECIF_NO" ) );
				autoBecif.setAgreementType( "R8" );
				autoBecif.setAgreementSubType( subType );
				autoBecif.setAgreementStatus( "1" );
				autoBecif.setProductNo( acctId );
				autoBecif.setOpenDate( ( String )msg.get( "TX_DATE" ) );
				autoBecif.setCloseDate( "" );
				autoBecif.setDeptNo( openDepId );
				autoBecif.setUserId( counterID );
				autoBecif.setBusinessSeriesCD( SFConst.SYS_SYSID );
				autoBecif.setTxDate( ( String )msg.get( "TX_DATE" ) );
				autoBecif.setSubTxSeqId( ( String )SFUtil.getDataValue( context, SFConst.PUBLIC_LOG_ID ) );
				autoBecifDao.saveAutoBecif( context, tranConnection, autoBecif );
			}
			DBHandler.commitTransaction( context, tranConnection ); // 提交事务
		} catch( Exception e ) {
			DBHandler.rollBackTransaction( context, tranConnection );
			throw new SFException( e );
		}
	}

	/**
	 * 
	 *〈方法功能描述〉
	 * 上主机验证客户信息 - 区分个人和机构客户
	 * @param context
	 * @param msg
	 * @throws SFException
	 */
	public static void chkKeyInvestInfoClient( Context context, Map<String, Object> msg ) throws SFException {
		SFLogger.info( context, "chkKeyInvestInfoClient()开始" );
		try {

			QryKeyInvestinfoClient qryKeyInvestInfoClient = new QryKeyInvestinfoClient();// 客户信息查询
			String invName = SFUtil.getReqDataValue( context, "INV_NAME" );// 客户名称
			String invType = SFUtil.getReqDataValue( context, "INV_TYPE" );// 客户类型
			String invIdCode = SFUtil.getReqDataValue( context, "INV_ID_CODE" );// 证件号码
			String hostIdType =  SFUtil.getDataValue( context, SFConst.PUBLIC_ID_TYPE );// 券商证件类型转换为主机证件类型
			SFLogger.info( context, String.format( "证件类型转换为主机证件类型 [%s]", hostIdType ) );
			/* 证件类型转换 增加15,18位兼容 */
			String invIdCode18Card19 = null; // 15位转18位证件号码，20世纪
			String invIdCode18Card20 = null; // 15位转18位证件号码，21世纪
			String hostInvIdCode18Card19 = null; // 主机返回证件号码15位转18位证件号码，20世纪
			String hostInvIdCode18Card20 = null; // 主机返回证件号码15位转18位证件号码，21世纪

			// 上主机查询客户信息
			Context msgContext = qryKeyInvestInfoClient.send( context, msg );

			// 响应报文返回标识
			String retFlag = SFUtil.getDataValue( msgContext, SFConst.PUBLIC_RET_FLAG );
			SFUtil.chkCond( context, !SFConst.RET_SUCCESS.equals( retFlag ), "ST1033", String.format( "银行处理失败" ) );

			/* 主机返回客户类型、客户编码、客户名称 */
			KeyedCollection oKeyColl = ( KeyedCollection )msgContext.getDataElement( "MSG_O" );
			String hostInvName = SFUtil.getDataValue( msgContext, oKeyColl, "INV_NAME" );

			if( SFConst.INV_TYPE_RETAIL.equals( invType ) ) {// 个人客户

				String hostRetIdType = SFUtil.getDataValue( msgContext, oKeyColl, "ID_TYPE" );
				String hostInvIdCode = SFUtil.getDataValue( msgContext, oKeyColl, "INV_ID_CODE" );

				SFLogger.info( context, String.format( "查询主机数据返回客户卡号获取客户证件类型 [%s]", hostRetIdType ) );
				SFLogger.info( context, String.format( "查询主机数据返回客户卡号获取客户名称 [%s]", hostInvName ) );
				SFLogger.info( context, String.format( "查询主机数据返回客户卡号获取客户证件号码 [%s]", hostInvIdCode ) );

				SFUtil.chkCond( context, ( !hostIdType.equals( hostRetIdType ) ), "ST4144", String.format( "客户证件信息不符" ) );
				SFUtil.chkCond( context, ( !invName.equals( hostInvName ) ), "ST4143", String.format( "客户名称不符" ) );

				// 三方证件类型15位转18位
				if(invIdCode != null && invIdCode.length() == 15) {
					invIdCode18Card19 = BizUtil.converTo18Card19( invIdCode );
					invIdCode18Card20 = BizUtil.converTo18Card19( invIdCode );
					
				}
				// 主机返回证件类型15位转18位
				if(hostInvIdCode != null && hostInvIdCode.length() == 15){
					hostInvIdCode18Card19 = BizUtil.converTo18Card19( hostInvIdCode );
					hostInvIdCode18Card20 = BizUtil.converTo18Card19( hostInvIdCode );
				}
				
				// 比较转换后证件类型是否一致
				if(( invIdCode18Card19 != null && invIdCode18Card20 != null) || (hostInvIdCode18Card19 != null && hostInvIdCode18Card20 != null)) {
					if( !invIdCode18Card19.equals( hostInvIdCode18Card19 ) && ( !invIdCode18Card20.equals( hostInvIdCode18Card20 ) ) && ( !invIdCode18Card19.equals( hostInvIdCode18Card20 ) ) && ( !invIdCode18Card20.equals( hostInvIdCode18Card19 ) ) ) {
						SFUtil.chkCond( context, "ST4047", String.format( "客户身份信息核对不符" ) );
					}
				}
			} else { // 机构客户

				SFUtil.chkCond( context, !SFConst.RET_SUCCESS.equals( retFlag ), "ST5601", String.format( "上主机[查询客户资料]失败" ) );

				String hostRetIdType = SFUtil.getDataValue( msgContext, oKeyColl, "GLOBAL_TYPE" );
				String hostInvIdCode = SFUtil.getDataValue( msgContext, oKeyColl, "GLOBAL_ID" );
				String finFlag = SFUtil.getDataValue( msgContext, oKeyColl, "FIN_FLAG" );

				//同业账号从OTHER_PROVE_FILE_TYPE取证件类型，OTHER_PROVE_FILE_NO取证件号码
				if( "I".equals( finFlag ) ) {
					hostRetIdType = SFUtil.getDataValue( msgContext, oKeyColl, "OTHER_PROVE_FILE_TYPE" );
					hostInvIdCode = SFUtil.getDataValue( msgContext, oKeyColl, "OTHER_PROVE_FILE_NO" );
					SFUtil.chkCond( context, SFUtil.isEmpty( hostRetIdType ), "ST5602", String.format( "上主机获取[同业帐户证件类型]失败" ) );
					SFUtil.chkCond( context, SFUtil.isEmpty( hostInvIdCode ), "ST5602", String.format( "上主机获取[同业帐户营业执照号码]失败" ) );
				}
				if( "73".equals( hostRetIdType ) ) {
					hostRetIdType = "51";
				}

				//主机证件类型转三方证件类型
				hostRetIdType = BizUtil.convHost2SF4IdType( msgContext, hostRetIdType );
				SFUtil.chkCond( context, ( !hostIdType.equals( hostRetIdType ) ), "ST5040", String.format( "[客户信息]不符，客户必须先到银行更新资料" ) );
				
				// 三方证件类型15位转18位
				if(invIdCode != null && invIdCode.length() == 15) {
					invIdCode18Card19 = BizUtil.converTo18Card19( invIdCode );
					invIdCode18Card20 = BizUtil.converTo18Card19( invIdCode );
					
				}
				// 主机返回证件类型15位转18位
				if(hostInvIdCode != null && hostInvIdCode.length() == 15){
					hostInvIdCode18Card19 = BizUtil.converTo18Card19( hostInvIdCode );
					hostInvIdCode18Card20 = BizUtil.converTo18Card19( hostInvIdCode );
				}
				
				// 比较转换后证件类型是否一致
				if(( invIdCode18Card19 != null && invIdCode18Card20 != null) || (hostInvIdCode18Card19 != null && hostInvIdCode18Card20 != null)) {
					if( !invIdCode18Card19.equals( hostInvIdCode18Card19 ) && ( !invIdCode18Card20.equals( hostInvIdCode18Card20 ) ) && ( !invIdCode18Card19.equals( hostInvIdCode18Card20 ) ) && ( !invIdCode18Card20.equals( hostInvIdCode18Card19 ) ) ) {
						SFUtil.chkCond( context, "ST4047", String.format( "客户身份信息核对不符" ) );
					}
				}

			}

		} catch( SFException e ) {
			throw e;
		} catch( Exception e ) {
			SFUtil.chkCond( context, "ST4895", String.format( "qryKeyInvestInfoClient()失败%s", e.getMessage() ) );
		}
		SFLogger.info( context, "chkKeyInvestInfoClient()结束" );

	}

	/**
	 * 
	 *〈方法功能描述〉
	 * 上合作行验证客户信息
	 * @param context
	 * @param tranConnection
	 * @param coBankMsg
	 * @param bankId
	 * @throws SFException
	 */
	public static Context chkKeyInvestorBycoBankClient( Context context, Connection tranConnection,  Map<String, Object> coBankMsg, String bankId ) throws SFException {
		SFLogger.info( context, "qryKeyInvestorBycoBankClient()开始" );
		Context msgContext = null;
		try {

			String invName = SFUtil.getReqDataValue( context, "INV_NAME" );// 客户名称
			String invType = SFUtil.getReqDataValue( context, "INV_TYPE" );// 客户类型
			String invIdCode = SFUtil.getReqDataValue( context, "INV_ID_CODE" );// 证件号码
			String hostIdType = SFUtil.getDataValue( context, SFConst.PUBLIC_ID_TYPE );// 券商证件类型转换为主机证件类型

			/* 证件类型转换 增加15,18位兼容 */
			String invIdCode18Card19 = null; // 15位转18位证件号码，20世纪
			String invIdCode18Card20 = null; // 15位转18位证件号码，21世纪
			String hostInvIdCode18Card19 = null; // 主机返回证件号码15位转18位证件号码，20世纪
			String hostInvIdCode18Card20 = null; // 主机返回证件号码15位转18位证件号码，21世纪

			// tranToHost 612326 上合作行校验一步式签约客户信息
			T810026Client qryKeyInvestorBycoBankClient = new T810026Client();// 合作行返回账户信息以及账户状态
			msgContext = qryKeyInvestorBycoBankClient.send( context, coBankMsg, bankId );

			// 返回报文信息
			String retFlag = SFUtil.getDataValue( msgContext, SFConst.PUBLIC_RET_FLAG );
			String respCode = SFUtil.getDataValue( msgContext, "A_REQUEST_HEAD.RESPCODE" );// 返回报文获取返回码&返回信息

			// 上合作行明确返回失败
			if( SFConst.RET_FAILURE.equals( retFlag ) ) {
				// 根据错误码从数据库中找出对应的错误信息
				BankCodeInfoDao bankCodeInfoDao = new BankCodeInfoDao();
				BankCodeInfo bankCodeInfo = bankCodeInfoDao.qryBankCodeInfo( context, tranConnection, respCode );
				if( null != bankCodeInfo ) {
					SFUtil.chkCond( context, ( !SFConst.RET_SUCCESS.equals( retFlag ) ), "ST4051", String.format( bankCodeInfo.getMsg() ) );
				} else {
					SFLogger.info( context, "数据库中未保存此主机错误码,请增加" );
				}
			}

			// 上合作行超时或异常
			SFUtil.chkCond( context, ( SFConst.RET_OVERTIME.equals( retFlag ) ), "ST4032", String.format( "银行处理失败" ) );

			// 上合作行返回成功
			KeyedCollection oKeyCol = SFUtil.getDataElement( msgContext, "810026_O" );
			String coBankInvName = SFUtil.getDataValue(msgContext, oKeyCol, "INV_NAME" );// 银行端客户名称InvName
			String coBankHostIdType = SFUtil.getDataValue(msgContext, oKeyCol, "ID_TYPE" );// 银行端证件类型IdType
			String coBankInvIdCode = SFUtil.getDataValue(msgContext, oKeyCol, "INV_ID_CODE" );// 银行端证件号码InvIdCode

			//主机证件类型转换为合作行证件类型
			String dlHostIdType = BizUtil.convSF2CoBank4IdType( context, hostIdType );
			SFUtil.chkCond( context, ( !invName.equals( coBankInvName ) ), "ST4143", String.format( "客户名称不符" ) );
			SFUtil.chkCond( context, ( !dlHostIdType.equals( coBankHostIdType ) ), "ST4144", String.format( "客户证件信息不符" ) );

			// 校验证件类型是否一致
			if( !coBankInvIdCode.equals( invIdCode ) && SFConst.INV_TYPE_RETAIL.equals( invType ) && SFConst.ID_TYPE_PERSON_SFZ.equals( hostIdType ) ) {

				// 三方证件类型15位转18位
				if( invIdCode != null && invIdCode.length() == 15 ) {
					invIdCode18Card19 = BizUtil.converTo18Card19( invIdCode );
					invIdCode18Card20 = BizUtil.converTo18Card19( invIdCode );
				}

				// 主机返回证件类型15位转18位
				if( coBankInvIdCode != null && coBankInvIdCode.length() == 15 ) {
					hostInvIdCode18Card19 = BizUtil.converTo18Card19( coBankInvIdCode );
					hostInvIdCode18Card20 = BizUtil.converTo18Card19( coBankInvIdCode );
				}

				// 比较转换后证件类型是否一致
				if( !invIdCode18Card19.equals( hostInvIdCode18Card19 ) && ( !invIdCode18Card20.equals( hostInvIdCode18Card20 ) ) && ( !invIdCode18Card19.equals( hostInvIdCode18Card20 ) ) && ( !invIdCode18Card20.equals( hostInvIdCode18Card19 ) ) ) {
					SFUtil.chkCond( context, "ST5040", String.format( "客户证件号码与代理系统不一致,客户必须先到银行进行更新资料" ) );
				}
			}

		} catch( SFException e ) {
			throw e;
		} catch( Exception e ) {
			SFUtil.chkCond( context, "ST4895", String.format( "qryKeyInvestorBycoBankClient()失败%s", e.getMessage() ) );
		}
		SFLogger.info( context, "qryKeyInvestorBycoBankClient()结束" );
		return msgContext;
	}

	/**
	 *〈方法功能描述〉
	 * 上主机置卡状态字
	 * @param context
	 * @return
	 * @throws SFException
	 */
	public static Context setCardStatusWord( Context context, String acctId ,String funcCode ) throws SFException {
		SFLogger.info( context, "上主机设置卡状态字开始" );

		Context msgContext = null;
		String retFlag = null;
		String respMsg = null;
		String respCode = null;
		try {

			//String acctId = SFUtil.getReqDataValue( context, "ACCT_ID" ); // 发展卡卡号/对公账号

			Map<String, Object> msg = new HashMap<String, Object>();
			msg.put("BIZ_SEQ_NO",BizUtil.getChlSeqId(context));//上主机22位流水SYS_HEAD.CONSUMER_SEQ_NO字段  	//APP_HEAD.BIZ_SEQ_NO送bizSeqNo
			msg.put( "ACCT_ID", acctId );// 账号ACCT_NO
			msg.put( "FUNCTION_CODE", funcCode );// 功能码 A-建立

			SetCardStatusWordClient setCardStatusWordClient = new SetCardStatusWordClient();// 设置卡状态
			msgContext = setCardStatusWordClient.send( context, msg );
			
			retFlag = SFUtil.getDataValue( msgContext, SFConst.PUBLIC_RET_FLAG );

			if(!SFConst.RET_SUCCESS.equals( retFlag )){
				IndexedCollection iColl1 = SFUtil.getDataElement( msgContext, "RET" );
				KeyedCollection kColl = ( KeyedCollection )iColl1.getElementAt( 0 );// 获取响应数组
				
				respCode = SFUtil.getDataValue( msgContext, kColl, "RET_CODE" );
				respMsg = SFUtil.getDataValue( msgContext, kColl, "RET_MSG" );
				
				// 已存在[第三方托管账户]状态，返回券商置卡状态成功
				if( respCode.endsWith("ME4022") ) {
					retFlag = SFConst.RET_SUCCESS;
				}
				// 不存在[第三方托管账户]状态，返回券商置卡状态成功
				if( respCode.endsWith("ME4021")) {
					retFlag = SFConst.RET_SUCCESS;
				}
			}

			SFUtil.chkCond( context, !SFConst.RET_SUCCESS.equals( retFlag ), "ST5601", respMsg );

		} catch( SFException e ) {
			throw e;
		} catch( Exception e ) {
			e.printStackTrace();
			SFUtil.chkCond( context, "ST4895", e.getMessage() );
		}
		SFLogger.info( context, "上主机设置卡状态字结束" );
		return msgContext;
	}

	/**
	 * 设置券商营业部编码，针对银河证券、五矿证券
	 * @param secCompCode
	 * @param map
	 * @param secBrchId
	 */
	public static void setSecBrchId( String secCompCode, Map<String, Object> map, String secBrchId ) {
		if( SFConst.SECU_YINHEZQ.equals( secCompCode ) || SFConst.SECU_WUKUANGZQ.equals( secCompCode ) ) {
			map.put( "SEC_BRCH_ID", secBrchId );
		}
	}

	/**
	 * 根据签约标识返回签约标识中文意义
	 * @param signFlag
	 * @return
	 * @throws SFException
	 */
	public static String getSignFlag( String signFlag ) throws SFException {
		if( SFConst.SIGN_FLAG_SIGN.equals( signFlag ) ) {
			return "签约";
		} else if( SFConst.SIGN_FLAG_SIGN_IN_PROCESS.equals( signFlag ) ) {
			return "签约处理中";
		} else if( SFConst.SIGN_FLAG_BANK_PRE.equals( signFlag ) ) {
			return "银行预签约";
		} else if( SFConst.SIGN_FLAG_SECU_PRE.equals( signFlag ) ) {
			return "券商预指定";
		} else if( SFConst.SIGN_FLAG_CANCEL.equals( signFlag ) ) {
			return "撤消签约";
		} else if( SFConst.SIGN_FLAG_CANCEL_IN_PROCESS.equals( signFlag ) ) {
			return "撤消处理中";
		} else if( SFConst.SIGN_FLAG_CONFIRM_IN_PROCESS.equals( signFlag ) ) {
			return "签约确认处理中";
		}
		return "";
	}

	/**
	 * 调整中信金通为中信证券
	 * @param context
	 * @throws SFException
	 */
	public static void setZhongXinSecuCompCode( Context context ) throws SFException {
		String secCompCode = SFUtil.getReqDataValue( context, "SEC_COMP_CODE" );// 券商代码
		if( SFConst.SECU_ZHONGXINJTZQ.equals( secCompCode ) ) {// 调整12710000券商代码为11020000
			SFUtil.setReqDataValue( context, "SEC_COMP_CODE", SFConst.SECU_ZHONGXINZQ );
		}
	}

	/**
	 * 
	 * 检查重复流水
	 * @param context
	 * @throws SFException
	 */
	public static void chkRepeatAcctJour( Context context, Connection tranConnection ) throws SFException {
		String secCompCode = SFUtil.getReqDataValue( context, "SEC_COMP_CODE" );// 券商代码
		String acctId = SFUtil.getReqDataValue( context, "ACCT_ID" );// 银行卡号
		String secSeqId = SFUtil.getReqDataValue( context, "SEC_SEQ_ID" );// 券商流水号
		AcctJourDao acctJourDao = new AcctJourDao();
		AcctJour acctJour = acctJourDao.qryAcctJourByJourFlag( context, tranConnection, secSeqId, secCompCode, acctId, "00" );
		SFUtil.chkCond( context, ( null != acctJour ), "ST5704", String.format( "[客户流水号]重复" ) );
	}

	/**
	 *	是否设置缓存参数默认值判断 
	 * @param type 参数类型
	 * @return
	 */
	public static String getDefaultParam( String type ) {
		String[] arr = new String[] { "SEC_APP_ID", "SEC_INTEREST_FILE", "SEC_CLEARING_FILE", "SEC_CLOSE_ACCOUNT_FILE", "SEC_OPEN_ACCT_ABNORMAL_FILE", "SEC_INTEREST_FILE_REC", "SEC_CLEARING_FILE_REC", "SEC_CLOSE_ACCOUNT_FILE_REC", "SEC_OPEN_ACCT_ABNORMAL_FILE_REC", "SEC_TRANSFER_FILE_REC", "SEC_CHECKING_FILE_REC", "SEC_INTEREST_FILE_FMT", "SEC_CLEARING_FILE_FMT", "SEC_OPEN_ACCT_ABNORMAL_FILE_FMT", "SEC_TRANSFER_FILE_FMT", "SEC_CHECKING_FILE_FMT", "SEC_INTEREST_TAX", "SEC_ACCT_BAL_CHK" };
		for( int i = 0; i < arr.length; i++ ) {
			if( type.equals( arr[ i ] ) ) {
				return "DEFAULT";
			}
		}
		return null;
	}
	
	/**
	 * 路径处理
	 * @param context
	 * @param path
	 * @return
	 * @throws Exception
	 */
	public static String processPath( Context context, String path ) throws Exception {
		try {
			SFUtil.chkCond( context, path == null, "ST4589", "路径为空，请检查参数配置" );
			if( !( path.endsWith( "\\" ) || path.endsWith( "/" ) ) )
				path = path + "/";
		} catch( Exception e ) {
			throw e;
		}
		return path;
	}

	
	
	/**
	 * 获取日志路径
	 * @return
	 */
	public final static String getLogPath() {
		// log输出路径
		String logFilePath = "/logs";
		try {
			String logPath = ParamCache.getValue2( "SF_LOG", "SYS_LOG_PATH" );
			if( SFUtil.isNotEmpty( logPath ) ) {
				logFilePath = logPath;
			}
		} catch( SFException e ) {
			e.printStackTrace();
		}
		return logFilePath;
	}
	
	
	
	/**
	 * 合作行金额除100处理
	 * @param context
	 * @param txAmount 金额
	 * @return 元为单位金额
	 * @throws SFException
	 */
	public static double conv2CoBankDivAmout( Context context, Object txAmount ) throws SFException {
		if (SFConst.INIT_SIDE_COBANK.equals(SFUtil.getDataValue(context, SFConst.PUBLIC_INIT_SIDE))){ 
			//合作行金额除100处理
			return SFUtil.div(txAmount);
		}
		return SFUtil.object2Double( txAmount );
	}
	
	/**
	 * 直连券商金额除100处理
	 * @param context
	 * @param txAmount 金额
	 * @return 元为单位金额
	 * @throws SFException
	 */
	public static double conv2SecuDivAmout( Context context, Object txAmount ) throws SFException {
		if (SFConst.SECU_ZL.equals(SFUtil.getDataValue(context, SFConst.PUBLIC_SECU_TYPE))){ 
			//直连券商金额除100处理
			return SFUtil.div(txAmount);
		}
		return SFUtil.object2Double( txAmount );
	}
	
	/**
	 * 合作行金额乘100处理
	 * @param context
	 * @param txAmount 金额
	 * @return 已分为单位金额
	 * @throws SFException
	 */
	public static String conv2CoBankMulAmout( Context context, Object txAmount ) throws SFException {
		if (SFConst.INIT_SIDE_COBANK.equals(SFUtil.getDataValue(context, SFConst.PUBLIC_INIT_SIDE))){ 
//			合作行金额乘100处理
			DecimalFormat df = new DecimalFormat( "###" );
			return df.format( SFUtil.mul(txAmount,100) );
		}else{
			return SFUtil.double2String(txAmount,2);
		}
	}
	
	/**
	 * 直连券商金额乘100处理
	 * @param context
	 * @param txAmount 金额
	 * @return 分为单位金额
	 * @throws SFException
	 */
	public static String conv2SecuMulAmout( Context context, Object txAmount ) throws SFException {
		if (SFConst.SECU_ZL.equals(SFUtil.getDataValue(context, SFConst.PUBLIC_SECU_TYPE))){ 
			//直连券商金额乘100处理
			DecimalFormat df = new DecimalFormat( "###" );
			return df.format( SFUtil.mul(txAmount,100) );
		}else{
			return SFUtil.double2String(txAmount,2);
		}
	}
}
