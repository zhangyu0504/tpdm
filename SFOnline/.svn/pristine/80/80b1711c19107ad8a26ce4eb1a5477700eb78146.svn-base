package module.batch;

import java.sql.Connection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import module.bean.AcctJour;
import module.bean.Reverse;
import module.bean.ReverseLog;
import module.bean.SecCompData;
import module.cache.ParamCache;
import module.dao.AcctJourDao;
import module.dao.ReverseDao;
import module.dao.ReverseLogDao;
import module.dao.SecCompDataDao;
import module.trans.sf2bankchl.ReverseClient;

import com.ecc.emp.core.Context;
import com.ecc.emp.data.IndexedCollection;
import com.ecc.emp.data.KeyedCollection;

import common.exception.SFException;
import common.sql.dao.DBHandler;
import common.util.BizUtil;
import common.util.DateUtil;
import common.util.SFConst;
import common.util.SFUtil;

import core.log.SFLogger;
import core.schedule.ScheduleActionInterface;
/**
 * 冲正管理器
 * @author 汪华
 *
 */
public class T888888 implements ScheduleActionInterface{
	private static final int DEFAULT_MAX_REVERSE_NUM = 3;// 最多可冲正次数
	private static final String SYS_TYPE = "0";// 交易类型: 0:联机交易1:批量
	private static final String REVERSE_STATUS_SUCCESS = "1";//1：冲正成功
	private static final String REVERSE_STATUS_FAIL = "2";//2：冲正失败
	private static final String REVERSE_STATUS_ARTIFICIAL = "3";//3：待人工处
	

	@Override
	public boolean init(Context context) throws SFException {
		return false;
	}

	@Override
	public void execute(Context context) throws SFException {
		ReverseDao rsDao=new ReverseDao();
		ReverseLogDao rsLogDao=new ReverseLogDao();
		AcctJourDao jourDao=new AcctJourDao();
		SecCompDataDao secDao=new SecCompDataDao();
		Connection connection =DBHandler.getConnection(context);
		SFUtil.setDataValue(context, SFConst.PUBLIC_TRAN_CONNECTION, connection);//公共上下文初始将由批量调度平台处理，私有交易将当前批量的数据库联接放到上下文中即可
		try{
			/*
			 * 查询待冲正记录
			 */
			int reverseNum=0;	
			String reverseTimes=ParamCache.getValue2( "", "" );//从缓存中获取冲正次数
			if(SFUtil.isEmpty(reverseTimes)){
				reverseNum=DEFAULT_MAX_REVERSE_NUM;
			}else{
				reverseNum=Integer.parseInt(reverseTimes.trim());
			}
			/*
			 * 查询待处理的冲正记录
			 */
			List<Reverse> reverses=rsDao.queryReverses(context, connection, reverseNum, SYS_TYPE);
			/*
			 * 迭代冲正
			 */
			if(reverses!=null&&reverses.size()>0){
				for(Reverse rev:reverses){
					DBHandler.beginTransaction(context, connection);//冲正服务是相互隔离，每迭代一次开启一次事务
					/*
					 * 锁定冲正记录
					 */
					rsDao.updateForLock(context, connection, rev);
					/*
					 * 查询原交易流水记录
					 */
					AcctJour acctJour=jourDao.qryAcctJour(context,connection,rev.getTxDate(),null,rev.getSubTxSeqId());
					if(acctJour==null||SFUtil.isEmpty(acctJour.getSubTxSeqId())){//检查原交易流水是否存在
						SFLogger.error(context, String.format("冲正管理器:查询原交易流水记录失败,交易流水号【%s】,交易日期【%s】",rev.getSubTxSeqId(),rev.getTxDate()));
						rev.setStatus(REVERSE_STATUS_ARTIFICIAL);//自动冲无法解决需人工处理
						rev.setRespMsg(String.format("冲正管理器:查询原交易流水记录失败,交易流水号【%s】,交易日期【%s】",rev.getSubTxSeqId(),rev.getTxDate()));
						rsDao.updateForRes(context,connection,rev);
						continue;
					}
					
					/*
					 * 记录冲正日志信息
					 */
					ReverseLog reverseLog=new ReverseLog();
					reverseLog.setMacDate(DateUtil.getMacDate());
					reverseLog.setMacTime(DateUtil.getMacTimeFormat());
					reverseLog.setTxSeqId(BizUtil.getInitSeqId(context));
					reverseLog.setSubTxSeqId(rev.getSubTxSeqId());//原交易流水号
					reverseLog.setSeqId(rev.getSeqId());//冲正任务的序号
					rsLogDao.saveReverseLog(context, connection, reverseLog);
					
					/*
					 * 判断冲正渠道
					 */
					String reverseFlag=null;//冲正返回标识：-2=返回原流水不存在；-1=失败；0=超时；1=冲正成功；2=已冲正
					String respCode=null;
					String respMsg=null;
					String reverseSeqId=null;//冲正交易流水号
					if("HOST".equalsIgnoreCase(rev.getChannel())){
						ReverseClient client=new ReverseClient();
						Map<String,Object> msg=new HashMap<String,Object>();
						msg.put("OLD_BUSS_SEQ_NO", rev.getSubTxSeqId());
						msg.put("OLD_TRAN_SEQ_NO", acctJour.getTranSeqId());
						msg.put("REASON", acctJour.getRespMsg());
						msg.put("FLAG", "0");
						Context msgContext=client.send(context, msg);
						
						//获取返回值
						String retFlag=SFUtil.getDataValue(msgContext,SFConst.PUBLIC_RET_FLAG);
						IndexedCollection iColl = SFUtil.getDataElement(msgContext,"RET");
						KeyedCollection kColl = (KeyedCollection) iColl.getElementAt(0);// 获取响应数组
						respCode = SFUtil.getDataValue(msgContext, kColl, "RET_CODE");
						respMsg = SFUtil.getDataValue(msgContext, kColl,"RET_MSG");//响应信息
						if(SFConst.RET_SUCCESS.equals(retFlag)){
							reverseFlag="1";				            
							reverseSeqId=SFUtil.getDataValue(msgContext,"MSG_O.REVERSE_SEQ_NO");//冲正流水号
						}else if (SFConst.RET_FAILURE.equals(retFlag)) {//冲正失败
							if("".equals(respCode)){//已冲正
								reverseFlag="2";								
							}else if("".equals(respCode)){//返回原流水不存在
								reverseFlag="-2";								
							}else{//其它失败原因
								reverseFlag="-1";
							}
						} else if (SFConst.RET_OVERTIME.equals(retFlag)) {//冲正超时
							reverseFlag="0";
						}
					}else if("COBANK".equalsIgnoreCase(rev.getChannel())){
						
					}else if("SECU".equalsIgnoreCase(rev.getChannel())){
						/*
						 * 查询券商信息
						 */
						SecCompData secData=secDao.qrySecCompData(context, connection, acctJour.getSecCompCode());
						if(secData==null||SFUtil.isEmpty(secData.getSecCompCode())){
							SFLogger.error(context, String.format("冲正管理器:查询券商信息失败,券商代码【%s】",acctJour.getSecCompCode()));
							rev.setStatus(REVERSE_STATUS_ARTIFICIAL);//自动冲无法解决需人工处理
							rev.setRespMsg(String.format("冲正管理器:查询券商信息失败,券商代码【%s】",acctJour.getSecCompCode()));
							rsDao.updateForRes(context,connection,rev);
							continue;
						}
						/*
						 * 根据券商信息判断原流水是直联模式/深证通模式
						 */
						if(SFConst.SECU_SZT.equals(secData.getSztFlag())){//深证通模式
							
						}else{//直联模式
							
						}
					}
					if("1".equals(reverseFlag)||"2".equals(reverseFlag)){
						/*
						 * 冲正成功；已冲正；都以冲正成功处理并解锁
						 */
						rev.setStatus(REVERSE_STATUS_SUCCESS);
						rev.setRespCode(respCode);
						rev.setRespMsg(respMsg);
						rev.setReverseSeqId(reverseSeqId);
						rsDao.updateForRes(context,connection,rev);
						
					}else if("-2".equals(reverseFlag)||"-1".equals(reverseFlag)||"0".equals(reverseFlag)){
						/*
						 * 返回原流水不存在；失败；超时；都以冲正失败处理并解锁
						 */
						rev.setStatus(REVERSE_STATUS_FAIL);
						rev.setRespCode(respCode);
						rev.setRespMsg(respMsg);
						rev.setReverseSeqId(reverseSeqId);
						rsDao.updateForRes(context,connection,rev);
					}
					/*
					 * 不管成功与失败都需要回写冲正日志响应报文信息
					 */
					reverseLog.setRespCode(respCode);
					reverseLog.setRespMsg(respMsg);
					reverseLog.setReverseSeqId(reverseSeqId);
					rsLogDao.updateReverseLog(context, connection,reverseLog);
					DBHandler.commitTransaction(context, connection);//冲正服务是相互隔离，所以完成一次冲正就提交一次事务
				}
			}
		}catch(SFException e){
			DBHandler.rollBackTransaction(context, connection);
			throw e;
		}catch(Exception e){
			DBHandler.rollBackTransaction(context, connection);
			throw new SFException("ST7898",e.getMessage(),e);
		}finally{
			DBHandler.releaseConnection(context, connection);
		}
		
		
	}
	
}
