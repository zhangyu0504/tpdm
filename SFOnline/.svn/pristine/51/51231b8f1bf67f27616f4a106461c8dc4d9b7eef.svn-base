package module.trans.sf2secu;

import java.util.HashMap;
import java.util.Map;

import module.communication.SZTSecuClientBase;
import module.communication.SecuClientBase;
import module.communication.ZLSecuClientBase;

import com.ecc.emp.core.Context;
import com.ecc.emp.data.KeyedCollection;
import common.exception.SFException;
import common.util.BizUtil;
import common.util.SFConst;
import common.util.SFUtil;

import core.log.SFLogger;
/**
 * 银行预约开户
 * @author 汪华
 *
 */
public class OpenAcctClient extends SecuClientBase{

	@Override
	protected Context doHandle(Context context, Map<String, Object> msg)
			throws SFException {
		String secuType=SFUtil.getDataValue(context,SFConst.PUBLIC_SECU_TYPE);
		Context msgContext=null;
		if(SFUtil.isNotEmpty(msg.get( "BIZ_SEQ_NO" ))){
			SFUtil.setDataValue( context, SFConst.PUBLIC_MSG_SEQ_NO, msg.get( "BIZ_SEQ_NO" ) );
		}
		//证件类型转换
		Object idType=msg.get("ID_TYPE");
		if(SFUtil.isNotEmpty(idType)){
			idType=BizUtil.convSF2Secu4IdType(context,idType.toString());
			msg.put("ID_TYPE", idType);
		}
		if(SFConst.SECU_ZL.equals(secuType)){//直联
			msgContext=zl6029(context,msg);
		}else if(SFConst.SECU_SZT.equals(secuType)){//深证通
//			if("200106".equals(txCode)){//银行预指定交易
				Object secCompCode = msg.get("SEC_COMP_CODE");
				if(SFConst.SECU_PINGANZQ.equals(secCompCode)){//平安证券调11012
					//平安证券及平安信用
					msgContext=szt11012(context,msg);
				}else{
					//非平安证券及平安信用
					msgContext=szt31001(context,msg);
				}
//			}
		}
		return msgContext;
	}
	
	/**
	 * 银行预约开户（业务功能码：11012）
	 * <br/>平安证券及平安信用
	 * @param context
	 * @return
	 * @throws SFException
	 */
	private Context szt11012(Context context,Map<String,Object>msg)throws SFException{
		SFLogger.info(context, "发送报文至深证通银行预约开户-开始");	
		// 克隆深证通通信临时上下文
		Context msgContext=SFUtil.cloneMsgContextForSZT(context, "Acmt.001.01");	
				
		KeyedCollection kColl= SFUtil.getDataElement(msgContext, "Acmt00101");
		KeyedCollection custKcoll = SFUtil.getDataElement(msgContext,kColl	, "Cust"); 
		SFUtil.setDataValue(msgContext, custKcoll, "INV_NAME",msg.get("INV_NAME"));//Cust/Name
		SFUtil.setDataValue(msgContext, custKcoll, "ID_TYPE_SZT",msg.get("ID_TYPE"));//Cust/CertType
		SFUtil.setDataValue(msgContext, custKcoll, "INV_ID_CODE",msg.get("INV_ID_CODE"));//Agt/CertId
		//SFUtil.setDataValue(context, custKcoll, "INV_TYPE_SZT",msg.get("INV_TYPE_SZT"));//Cust/Type
		//客户类型转换
		Object invType=msg.get("INV_TYPE");
		if(SFUtil.isNotEmpty(invType)){
			String tmpInvType=BizUtil.convSF2SZTInvType(msgContext,invType.toString());
			SFUtil.addDataField(msgContext, kColl, "INV_TYPE_SZT",tmpInvType);
		}
		if(SFUtil.isNotEmpty( msg.get( "SEC_BRCH_ID" ))){
			if(!msgContext.containsKey( "MsgHdr" )){
				SFUtil.addFormatToContext( msgContext, "MsgHdr" );
			}
			SFUtil.setDataValue( msgContext, "MsgHdr.Recver.BrchId", msg.get( "SEC_BRCH_ID" ) );
		}
		
		KeyedCollection agtKcoll = SFUtil.getDataElement( msgContext, kColl, "Agt" );
		SFUtil.setDataValue( msgContext, agtKcoll, "TRN_NAME", msg.get( "TRN_NAME" ) );
		SFUtil.setDataValue( msgContext, agtKcoll, "TRN_ID_TYPE", msg.get( "TRN_ID_TYPE" ) );
		SFUtil.setDataValue( msgContext, agtKcoll, "TRN_ID_CODE", msg.get( "TRN_ID_CODE" ) );

		// 修订200106银行端预约开户交易BookRef未送预约号,edit by lch-20180508
		String txCode = SFUtil.ObjectToString( SFUtil.getDataValue( context, SFConst.PUBLIC_TX_CODE ) );// 从上下文中获取交易码
		if( SFUtil.isNotEmpty( txCode ) && "200106".equals( txCode ) ) {
			KeyedCollection bookRefKcoll = SFUtil.getDataElement( msgContext, kColl, "BookRef" );
			SFUtil.setDataValue( msgContext, bookRefKcoll, "Ref", msg.get( "BOOK_NO" ) );

			// 修订200106银行端预约开户交易对应ScBal节点原C为0.00保持一致
			KeyedCollection scBalKcoll = SFUtil.getDataElement( msgContext, kColl, "ScBal" );
			SFUtil.setDataValue( msgContext, scBalKcoll, "BEGIN_BAL", "0.00" );

			// 修订200106银行端预约开户交易对应Dgst节点原C为开户网点chOpenNode保持一致
			SFUtil.setDataValue( msgContext, kColl, "Dgst", msg.get( "OPEN_DEP_ID" ) );
		}

		KeyedCollection bkAcctKcoll = SFUtil.getDataElement(msgContext,kColl	, "BkAcct");
		SFUtil.setDataValue(msgContext, bkAcctKcoll, "ACCT_ID",msg.get("ACCT_ID"));
		KeyedCollection scAcctKcoll = SFUtil.getDataElement(msgContext,kColl	, "ScAcct");
		SFUtil.setDataValue(msgContext, scAcctKcoll, "CAP_ACCT",msg.get("CAP_ACCT"));
		KeyedCollection acctSvcrKcoll = SFUtil.getDataElement(msgContext,scAcctKcoll	, "AcctSvcr");
		SFUtil.setDataValue(msgContext, acctSvcrKcoll, "SEC_COMP_TYPE","S");
		SFUtil.setDataValue(msgContext, acctSvcrKcoll, "SEC_COMP_CODE",msg.get("SEC_COMP_CODE"));
		SFUtil.setDataValue(msgContext, acctSvcrKcoll, "SEC_BRCH_ID",msg.get("SEC_BRCH_ID"));
		KeyedCollection pwdKcoll = SFUtil.getDataElement(msgContext,scAcctKcoll, "Pwd"); 
		SFUtil.setDataValue(msgContext, pwdKcoll, "CAP_ACCT_PWD",msg.get("CAP_ACCT_PWD"));
		SFUtil.setDataValue(msgContext, kColl,"CUR_CODE",msg.get("CUR_CODE"));
		//发送报文
		SZTSecuClientBase client=new SZTSecuClientBase();
		msgContext=client.send(msgContext,msg,"11012");
		SFLogger.info(context, "发送报文至深证通银行预约开户-结束");
	    return msgContext;
	}
	
	/**
	 * 银行预约开户（业务功能码：31001）
	 * <br/>非平安证券及平安信用
	 * @param context
	 * @return
	 * @throws SFException
	 */
	private Context szt31001(Context context,Map<String,Object>msg)throws SFException{
		SFLogger.info(context, "发送报文至深证通银行预约开户-开始");	
		// 克隆深证通通信临时上下文
		Context msgContext=SFUtil.cloneMsgContextForSZT(context, "Acmt.001.01");
		KeyedCollection kColl= SFUtil.getDataElement(msgContext, "Acmt00101");
		KeyedCollection custKcoll = SFUtil.getDataElement(msgContext,kColl	, "Cust"); 
		SFUtil.setDataValue(msgContext, custKcoll, "INV_NAME",msg.get("INV_NAME"));//Cust/Name
		SFUtil.setDataValue(msgContext, custKcoll, "ID_TYPE_SZT",msg.get("ID_TYPE"));//Cust/CertType
		SFUtil.setDataValue(msgContext, custKcoll, "INV_ID_CODE",msg.get("INV_ID_CODE"));//Cust/CertId
		//SFUtil.setDataValue(context, custKcoll, "INV_TYPE_SZT",msg.get("INV_TYPE_SZT"));//Cust/Type
		//客户类型转换
		Object invType=msg.get("INV_TYPE");
		if(SFUtil.isNotEmpty(invType)){
			String tmpInvType=BizUtil.convSF2SZTInvType(msgContext,invType.toString());
			SFUtil.addDataField(msgContext, kColl, "INV_TYPE_SZT",tmpInvType);
		}
		if(SFUtil.isNotEmpty( msg.get( "SEC_BRCH_ID" ))){
			if(!msgContext.containsKey( "MsgHdr" )){
				SFUtil.addFormatToContext( msgContext, "MsgHdr" );
			}
			SFUtil.setDataValue( msgContext, "MsgHdr.Recver.BrchId", msg.get( "SEC_BRCH_ID" ) );
		}
		KeyedCollection agtKcoll = SFUtil.getDataElement(msgContext, kColl, "Agt");
		SFUtil.setDataValue(msgContext, agtKcoll, "TRN_NAME",msg.get("TRN_NAME"));
		SFUtil.setDataValue(msgContext, agtKcoll, "TRN_ID_TYPE",msg.get("TRN_ID_TYPE"));
		SFUtil.setDataValue(msgContext, agtKcoll, "TRN_ID_CODE",msg.get("TRN_ID_CODE"));

		KeyedCollection bkAcctKcoll = SFUtil.getDataElement(msgContext,kColl, "BkAcct");
		SFUtil.setDataValue(msgContext, bkAcctKcoll, "ACCT_ID",msg.get("ACCT_ID"));
		KeyedCollection scAcctKcoll = SFUtil.getDataElement(msgContext,kColl, "ScAcct");
		SFUtil.setDataValue(msgContext, scAcctKcoll, "CAP_ACCT",msg.get("CAP_ACCT"));
		KeyedCollection acctSvcrKcoll = SFUtil.getDataElement(msgContext,scAcctKcoll	, "AcctSvcr");
		SFUtil.setDataValue(msgContext, acctSvcrKcoll, "SEC_COMP_TYPE","S");
		SFUtil.setDataValue(msgContext, acctSvcrKcoll, "SEC_COMP_CODE",msg.get("SEC_COMP_CODE"));
		SFUtil.setDataValue(msgContext, acctSvcrKcoll, "SEC_BRCH_ID",msg.get("SEC_BRCH_ID"));
		KeyedCollection pwdKcoll = SFUtil.getDataElement(msgContext,scAcctKcoll, "Pwd"); 
		SFUtil.setDataValue(msgContext, pwdKcoll, "CAP_ACCT_PWD",msg.get("CAP_ACCT_PWD"));
		SFUtil.setDataValue(msgContext, kColl,"CUR_CODE",msg.get("CUR_CODE"));
		//发送报文
		SZTSecuClientBase client=new SZTSecuClientBase();
		msgContext=client.send(msgContext,msg,"31001");
		SFLogger.info(context, "发送报文至深证通银行预约开户-结束");
	    return msgContext;
	}

	/**
	 * 6029 银行预约开户
	 * @param context
	 * @return
	 * @throws SFException
	 */
	private Context zl6029(Context context,Map<String,Object>msg)throws SFException{
		SFLogger.info(context, "直联券商银行预约开户-开始");
		KeyedCollection kColl=new KeyedCollection("6029_I");
		SFUtil.addDataField(context, kColl, "INV_TYPE",msg.get("INV_TYPE"));
		SFUtil.addDataField(context, kColl, "INV_NAME",msg.get("INV_NAME"));
		SFUtil.addDataField(context, kColl, "ID_TYPE_ZL",msg.get("ID_TYPE"));
		SFUtil.addDataField(context, kColl, "INV_ID_CODE",msg.get("INV_ID_CODE"));
		SFUtil.addDataField(context, kColl, "MOBILE",msg.get("MOBILE"));
		SFUtil.addDataField(context, kColl, "PHONE",msg.get("PHONE"));
		SFUtil.addDataField(context, kColl, "ACCT_ID",msg.get("ACCT_ID"));
		SFUtil.addDataField(context, kColl, "DEP_NAME",msg.get("DEP_NAME"));
		SFUtil.addDataField(context, kColl, "DEP_ID",msg.get("DEP_ID"));
		SFUtil.addDataField(context, kColl, "SEC_COMP_CODE",msg.get("SEC_COMP_CODE"));
		SFUtil.addDataField(context, kColl, "SUB_TX_SEQ_ID",msg.get("SUB_TX_SEQ_ID"));
		SFUtil.addDataField(context, kColl, "BOOK_NO",msg.get("BOOK_NO"));
		SFUtil.addDataField(context, kColl, "SEC_BRCH_ID",msg.get("SEC_BRCH_ID"));
		SFUtil.addDataField(context, kColl, "REMARK",msg.get("REMARK"));		
		Map<String,Object> tmpMsg=new HashMap<String,Object>();
		tmpMsg.put("6029_I", kColl);		
		//发送报文
		ZLSecuClientBase client=new ZLSecuClientBase();
		Context msgContext=client.send(context,tmpMsg,"6029");
		SFLogger.info(context, "直联券商银行预约开户-结束");
	   return msgContext;
	}
	
}
