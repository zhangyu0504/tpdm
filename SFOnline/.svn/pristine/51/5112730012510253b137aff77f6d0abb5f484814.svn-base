package module.trans;


import java.sql.Connection;
import java.util.Date;
import java.util.Map;

import module.bean.Trans;
import module.bean.TransAlertLog;
import module.cache.TransCache;
import module.dao.SystemDao;

import com.ecc.emp.core.Context;
import common.exception.SFException;
import common.util.BizUtil;
import common.util.DateUtil;
import common.util.SFConst;
import common.util.SFUtil;

import core.cache.CacheMap;
import core.log.SFLogger;

/**
 * 公共跳转类
 * @author 邹磊
 *
 */
public class TranHandler{
	/**
	 * 
	 * @param context
	 * @throws SFException
	 */
	public static void doHandle(Context context) throws SFException{
		//SFLogger.info(context,"公共交易处理类模型执行开始");
		String txCode=SFUtil.getDataValue(context, SFConst.PUBLIC_TX_CODE);//获取交易编码
		String logId=SFUtil.getDataValue(context, SFConst.PUBLIC_LOG_ID);//获取系统日志号
		Trans trans = TransCache.getValue(txCode);//从缓存中获取交易对象
		if (trans==null){
			SFUtil.chkCond( context, "ST5798","业务处理失败，交易未配置！");
		}
		
		Date dtStart=null,dtEnd=null;
		SystemDao dao=new SystemDao();
		Connection connection = SFUtil.getDataValue( context, SFConst.PUBLIC_TRAN_CONNECTION );
		try {
			String tranClass = SFUtil.getDataValue(context,"CLASS_NAME"); 
			dtStart=DateUtil.getDate();//获取系统开始时间
			/*
			 * 计算当前交易的连接数:接收请求时增加在线计录数
			 */
			Map<String,Integer> mapTrad=CacheMap.getCache(SFConst.SYS_CACHE_TRAD);
			synchronized (mapTrad) {
				Integer tradReqNum=mapTrad.get(txCode);//请求记录数
				if(tradReqNum!=null){
					tradReqNum=tradReqNum+1;
				}else{
					tradReqNum=1;
				}
				mapTrad.put(txCode, tradReqNum);//增加请求记录数
				/*
				 * 在线最大连接限制
				 */
				if(trans.getMaxProc()!=0&&trans.getMaxProc()<tradReqNum){
					/*
					 * 插入 限流预警日志
					 */
					TransAlertLog alertLog=new TransAlertLog();
					alertLog.setMacCode(BizUtil.getMacCode(context));
					alertLog.setTxCode(txCode);
					alertLog.setLogId(logId);
					alertLog.setType(SFConst.STANS_ALERT_LOG_OVERLOAD);
					alertLog.setTxDate(DateUtil.dateToString(dtStart,"yyyyMMdd"));
					alertLog.setTxTime(DateUtil.dateToString(dtStart,"HHmmss"));
					alertLog.setMome(String.format("[%s]在线人数[OVERLOAD]",txCode));
					dao.saveTransAlertLog(context, connection, alertLog);
					
					SFLogger.error(SFConst.DEFAULT_TRXCODE,logId, String.format("[%s]在线人数[OVERLOAD]",txCode),null);
					SFUtil.chkCond( context, "ST5798",String.format("[%s]在线人数[OVERLOAD]",txCode));
				}
				SFLogger.info(context,String.format("[%s]在线人数[%s]",txCode,tradReqNum));
			}
			
			/*
			 * 私有业务执行
			 */
			TranBase tranBase = (TranBase)Class.forName(tranClass).newInstance();
			tranBase.execute(context);
			
			
			/*
			 * 计算业务处理用时长
			 */
			if(dtStart!=null&&trans.getMaxTime()>0){
				dtEnd=DateUtil.getDate();//获取系统结束时间
				long duringTime=dtEnd.getTime()-dtStart.getTime();
				long maxTime=trans.getMaxTime()*1000;//数据库配置最大超时以秒为单位
				if(duringTime>maxTime){
					/*
					 * 插入超时预警日志
					 */
					TransAlertLog alertLog=new TransAlertLog();
					alertLog.setMacCode(BizUtil.getMacCode(context));
					alertLog.setTxCode(txCode);
					alertLog.setLogId(logId);
					alertLog.setType(SFConst.STANS_ALERT_LOG_OVERTIME);
					alertLog.setTxDate(DateUtil.dateToString(dtStart,"yyyyMMdd"));
					alertLog.setTxTime(DateUtil.dateToString(dtStart,"HHmmss"));
					alertLog.setMome(String.format("[%s]交易预设[%s]毫秒，实际用时[%s]毫秒",txCode,maxTime,duringTime));
					dao.saveTransAlertLog(context, connection, alertLog);
				}
			}
		} catch (InstantiationException e) {
			SFLogger.error(context,e);
			throw new SFException(e);
		} catch (IllegalAccessException e) {
			SFLogger.error(context,e);
			throw new SFException(e);
		} catch (ClassNotFoundException e) {
			SFLogger.error(context,e);
			throw new SFException(e);
		}finally{
			/*
			 * 计算当前交易的连接数:请求结束时释放在线计录数
			 */
			Map<String,Integer> mapTrad=CacheMap.getCache(SFConst.SYS_CACHE_TRAD);
			synchronized (mapTrad) {
				Integer reqNum=mapTrad.get(txCode);//请求记录数
				if(reqNum!=null&&reqNum>1){
					reqNum=reqNum-1;
				}else{
					reqNum=0;
				}
				mapTrad.put(txCode, reqNum);
			}
		}
		//SFLogger.info(context,"公共交易处理类模型执行结束");		
	}
}
