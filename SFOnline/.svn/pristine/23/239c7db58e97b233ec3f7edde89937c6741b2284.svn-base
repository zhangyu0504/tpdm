package module.trans.secu2sf;

import java.util.HashMap;
import java.util.Map;

import module.bean.AcctAdmDetail;
import module.bean.AcctJour;
import module.bean.InvestData;
import module.bean.LocalInfo;
import module.bean.SecCompData;
import module.bean.SignAccountData;
import module.trans.TranBase;

import com.ecc.emp.core.Context;
import com.ecc.emp.data.KeyedCollection;
import common.exception.SFException;
import common.sql.dao.DBHandler;
import common.util.BizUtil;
import common.util.DateUtil;
import common.util.SFConst;
import common.util.SFUtil;

import core.log.SFLogger;

/**
 * A股券商端发起--账户信息修改交易
 * 
 * 处理逻辑：
 * 			1.接收券商交易 （<深>Acmt.005.01/11005，<直>6026/612203）
 *			2.检查请求包有效性
 *			3.对于行内个人, 调用D+接口M7030查询客户信息
 *			4.对于行内对公, 调用D+接口M8010查询客户信息
 *			5.代理客户，组612435请求包, 取代理客户身份资料
 *			6.返回券商 （<深>Acmt.006.01/11005，<直>6026/612203）
 * 
 * 
 * 券商发起更新客户身份信息
 * 
 * tran code :100104
 * @author 吕超鸿
 *
 */
public class T100104 extends TranBase {

	private String subTxSeqId = null;// 服务平台流水号

	private String legalName = null;// 法人姓名

	private String legalIdCode = null;// 法人证件号码

	private String trnName = null;// 经办人姓名

	private String trnIdCode = null;// 经办人证件号

	private String trnMobile = null;// 经办人手机

	private String secCompCode = null;// 券商代码

	private String capAcct = null;// 资金帐号

	private String invName = null;// 客户姓名

	private String txDate = null;// 交易日期

	private String txTime = null;// 交易时间

	private String secAcct = null;//保证金管理帐号

	private String oldInvName = null;// 旧客户姓名

	private String oldInvIdCode = null;// 旧客户证件号码

	private String oldIdType = null;// 旧客户证件类型

	private String acctId = null;// 银行帐号

	private String openDepId = null;//客户号开户网点编号

	private String brchId = null;//机构号

	private String openBranchId = null;//客户号开户分行

	private String signFlag = null;// 签约标识

	private String initSide = null;// 渠道

	private String oldLegalName = null;// 旧法人姓名

	private String oldLegalIdCode = null;// 旧法人证件号码

	private String oldTrnName = null;// 旧经办人姓名

	private String oldTrnIdCode = null;// 旧经办人证件号码

	private String oldTrnMobile = null;// 旧经办人手机

	private String userId = null;//

	private int secAcctSeq = 0;//保证金管理账号序列号

	private String invType = null;// 客户类型

	private String idType = null;// 证件类型

	private String invIdCode = null;// 证件号码

	private String secSeqId = null;// 券商流水号
	
	private String chlSeqId = null; // 交易流水号

	private String hostIdType = null;// 新主机证件类型

	private String secuType = null;// 券商类型

	private String curCode = "RMB";// 币种

	private SecCompData secu = null;// 券商信息

	private InvestData oldInvestData = null;// 投资人信息

	@Override
	protected void initialize( Context context ) throws SFException {
		KeyedCollection kColl = null;
		KeyedCollection scAcctKcoll = null;
		KeyedCollection acctSvcrKcoll = null;

		try {
			subTxSeqId = SFUtil.getDataValue( context, SFConst.PUBLIC_LOG_ID );// 服务平台流水号
			chlSeqId = BizUtil.getTxSeqId( subTxSeqId );// 生成发起方流水号,直接取包头的流水号

			secCompCode = SFUtil.getReqDataValue( context, "SEC_COMP_CODE" );
			if( SFUtil.isEmpty( secCompCode ) ) {
				kColl = SFUtil.getDataElement( context, "Acmt00501" );
				scAcctKcoll = SFUtil.getDataElement( context, kColl, "ScAcct" );
				acctSvcrKcoll = SFUtil.getDataElement( context, scAcctKcoll, "AcctSvcr" );
				secCompCode = SFUtil.getDataValue( context, acctSvcrKcoll, "SEC_COMP_CODE" );// 券商编号
			}

			SFUtil.chkCond( context, SFUtil.isEmpty( secCompCode ), "ST4805", String.format( "此券商信息不存在" ) );
			secu = secCompDataDao.qrySecCompData( context, tranConnection, secCompCode );
			SFUtil.chkCond( context, ( null == secu ), "ST4805", String.format( "此券商信息不存在" ) );

			SFUtil.setDataValue( context, SFConst.PUBLIC_SECU_TYPE, secu.getSztFlag() );// 将券商类型放入上下文中
			SFUtil.setDataValue( context, SFConst.PUBLIC_SECU, secu );

			// 券商类型
			secuType = SFUtil.getDataValue( context, SFConst.PUBLIC_SECU_TYPE );
			SFUtil.chkCond( context, SFUtil.isEmpty( secuType ), "ST5701", String.format( "[券商类型]不能为空" ) );
			if( SFConst.SECU_ZL.equals( secuType ) ) { // 直连模式
				legalName = SFUtil.getReqDataValue( context, "LEGAL_NAME" );// 法人姓名
				legalIdCode = SFUtil.getReqDataValue( context, "LEGAL_ID_TYPE" );// 法人身份证
				trnName = SFUtil.getReqDataValue( context, "TRN_NAME" );// 法人身份证
				trnIdCode = SFUtil.getReqDataValue( context, "TRN_ID_CODE" );// 法人身份证
				trnMobile = SFUtil.getReqDataValue( context, "TRN_MOBILE" );// 法人身份证
				capAcct = SFUtil.getReqDataValue( context, "CAP_ACCT" ); // 券商端资金台账号
				invName = SFUtil.getReqDataValue( context, "INV_NAME" ); // 客户名称
				secSeqId = SFUtil.getReqDataValue( context, "SEC_SEQ_ID" ); // 券商流水号
				secAcct = SFUtil.getReqDataValue( context, "SEC_ACCT" );//
				invType = SFUtil.getReqDataValue( context, "INV_TYPE" ); // 客户类型
				idType = SFUtil.getReqDataValue( context, "ID_TYPE_ZL" ); // 证件类型
				invIdCode = SFUtil.getReqDataValue( context, "INV_ID_CODE" ); // 证件号码

				// 组装券商通用上下文
				KeyedCollection keyColl = SFUtil.getDataElement( context, "100104_I" );
				SFUtil.addDataField( context, keyColl, "ID_TYPE", idType );

			} else if( SFConst.SECU_SZT.equals( secuType ) ) { // 深证通模式
				KeyedCollection bkAcctKcoll = SFUtil.getDataElement( context, kColl, "BkAcct" );
				acctId = ( String )SFUtil.getDataValue( context, bkAcctKcoll, "ACCT_ID" );

				KeyedCollection custKcoll = SFUtil.getDataElement( context, kColl, "Cust" );
				invName = ( String )SFUtil.getDataValue( context, custKcoll, "INV_NAME" );// 客户名称
				idType = ( String )SFUtil.getDataValue( context, custKcoll, "ID_TYPE_SZT" );// 证件类型
				invType = ( String )SFUtil.getDataValue( context, custKcoll, "INV_TYPE_SZT" );// 客户类型
				trnIdCode = ( String )SFUtil.getDataValue( context, custKcoll, "TRN_ID_CODE" );
				invIdCode = ( String )SFUtil.getDataValue( context, custKcoll, "INV_ID_CODE" );

				brchId = ( String )SFUtil.getDataValue( context, acctSvcrKcoll, "SEC_BRCH_ID" );// 分支机构标识
				capAcct = ( String )SFUtil.getDataValue( context, scAcctKcoll, "CAP_ACCT" );// 券商端客户资金台账号

				legalName = ( String )SFUtil.getDataValue( context, kColl, "LEGAL_NAME" );
				trnName = ( String )SFUtil.getDataValue( context, kColl, "TRN_NAME" );
				trnIdCode = ( String )SFUtil.getDataValue( context, kColl, "TRN_ID_CODE" );
				trnMobile = ( String )SFUtil.getDataValue( context, kColl, "TRN_MOBILE" );

				KeyedCollection msgHdrKcoll = SFUtil.getDataElement( context, "MsgHdr" );
				KeyedCollection refKcoll = SFUtil.getDataElement( context, msgHdrKcoll, "Ref" );
				secSeqId = SFUtil.getDataValue( context, refKcoll, "Ref" );// 券商流水号

				// idType_SZT 转换客户类型为 1：个人 2：机构
				invType = BizUtil.convSZT2SFInvType( context, invType );

				// 组装券商通用上下文
				KeyedCollection keyColl = new KeyedCollection( "100104_I" );

				SFUtil.addDataField( context, keyColl, "ID_TYPE", idType );// 证件类型
				SFUtil.addDataField( context, keyColl, "INV_TYPE", invType );// 客户类型
				SFUtil.addDataField( context, keyColl, "INV_NAME", invName );// 客户类型
				SFUtil.addDataField( context, keyColl, "CAP_ACCT", capAcct );// 客户类型
				SFUtil.addDataField( context, keyColl, "SEC_COMP_CODE", secCompCode );// 券商代码

				SFUtil.addDataElement( context, keyColl );

			}

		} catch( SFException e ) {
			throw e;
		} catch( Exception e ) {
			SFUtil.chkCond( context, "ST4895", e.getMessage() );
		}

	}

	@Override
	public void doHandle( Context context ) throws SFException {

		// 开始上主机
		doHost( context );

		// 记录交易流水和副表，写入账户管理交易明细表和副表，更新投资人基本信息表和副表，更新签约信息表和副表
		addPublicInfo( context );

		// 发送券商
		resSecu( context );

	}

	public void addPublicInfo( Context context ) throws SFException {
		SFLogger.info( context, "addPublicInfo()开始" );

		try {

			DBHandler.beginTransaction( context, tranConnection );

			/* 记录交易流水 */
			addAcctJour( context );

			/* 写入账户管理交易明细表 */
			addAcctAdmDetail( context );

			/* 客户旧身份信息签约多个资金账号，可以变更！ */
			long signAcctDataCount = signAccountDataDao.qrySignAccountDataCountBySecAcct( context, tranConnection, secCompCode, capAcct );

			SFLogger.info( context, String.format( "券商[%s]对应的资金帐号[%s]存在[%s]条签约记录",secCompCode,capAcct,signAcctDataCount ) );
			
			// 同一个客户签约多个资金帐号
			if( signAcctDataCount > 1 ) {
				
				// 根据新的证件类型、证件号码查询，已经存在新开户
				InvestData investData = investDataDao.qryInvestDataByInvType( context, tranConnection, hostIdType, invIdCode ,invType);

				/******************************存在新客户***************************/
				if( SFUtil.isNotEmpty( investData ) ) {
					SFLogger.info( context, String.format( "签约个数大于1且对于新资料，已经存在相同证件客户,更新投资人基本信息表" ) );
					secAcct = investData.getSecAcct();

					/* 更新投资人基本信息表 */
					updInvestData( context );

					// 获取最大secAcctSeq
					SignAccountData signAccountData = signAccountDataDao.qrySignAccountDataMaxSeqBySecAcct( context, tranConnection, secAcct );
					if( null == signAccountData ) {
						secAcctSeq = 1;
					}
					secAcctSeq = signAccountData.getSecAcctSeq() + 1;

					SFLogger.info( context, String.format( "生成secAcctSeq=%s", secAcctSeq ) );

					/* 更新TRDSignAccountData; */
					updSignAccountData( context );
				}else{
					SFLogger.info( context, String.format( "签约个数大于1且对于新资料，不存在相同证件客户,插入客户信息表表" ) );
					/* 若客户信息为空,则插入客户信息表 */
					if( SFConst.INV_TYPE_RETAIL.equals( invType ) ) {
						if( SFUtil.isNotEmpty( legalName ) ) {
							oldLegalName = legalName;
						}
						if( SFUtil.isNotEmpty( legalIdCode ) ) {
							oldLegalIdCode = legalIdCode;
						}
						if( SFUtil.isNotEmpty( trnName ) ) {
							oldTrnName = trnName;
						}
						if( SFUtil.isNotEmpty( trnIdCode ) ) {
							oldTrnIdCode = trnIdCode;
						}
						if( SFUtil.isNotEmpty( trnMobile ) ) {
							oldTrnMobile = trnMobile;
						}
					}

					/* 生成投资人管理帐号 */
					secAcct = BizUtil.genSecAcctId( context );// 生成投资人管理帐号
					SFUtil.chkCond( context, SFUtil.isEmpty( secAcct ), "ST5711", String.format( "调用[生成投资人管理账号]失败" ) );//
					SFLogger.info( context, String.format( "[新生成的投资人管理帐号]: %s", secAcct) );

					/* 建立投资人信息 */
					/* 将IdType[0]修改为hostIdType对于插入投资人信息如果不变，采用修改前的 */
					addInvestData( context );

					secAcctSeq = 1;
					
					/* 更新TRDSignAccountData; */
					updSignAccountData( context );
				}
			} else { // 只签一个客户，更新取原有流程

				// 根据新的证件类型、证件号码查询，判断是否已经存在新开户
				InvestData investData = investDataDao.qryInvestDataByInvType( context, tranConnection, hostIdType, invIdCode ,invType);
				
				if( SFUtil.isNotEmpty( investData ) ) {
					SFLogger.info( context, String.format( "对于新资料，已经存在相同证件客户,更新投资人基本信息表" ) );
					secAcct = investData.getSecAcct();

					/* 更新投资人基本信息表 */
					updInvestData( context );

					// 获取最大secAcctSeq
					SignAccountData signAccountData = signAccountDataDao.qrySignAccountDataMaxSeqBySecAcct( context, tranConnection, secAcct );
					if( null == signAccountData ) {
						secAcctSeq = 1;
					}
					secAcctSeq = signAccountData.getSecAcctSeq() + 1;

					SFLogger.info( context, String.format( "生成secAcctSeq=%s", secAcctSeq ) );

					/* 更新TRDSignAccountData; */
					updSignAccountData( context );
					
					/******************************不存在新客户***************************/
				}else{ 
					SFLogger.info( context, String.format( "对于新资料，不存在相同证件客户,更新投资人基本信息表" ) );
					/* 更新投资人基本信息表 */
					updInvestData( context );

					/* 更新签约信息表 */
					signAccountDataDao.updSignAccoutDataBySignFlag( context, tranConnection, invName, secAcct );
				}
			}

			// 提交事务1
			DBHandler.commitTransaction( context, tranConnection );

			// 开启事务2
			DBHandler.beginTransaction( context, tranConnection );

			// UPDATE TRDAcctJour
			SFLogger.info( context, "UPDATE AcctJour 开始" );
			acctJourDao.updAcctJour( context, tranConnection, "0", secAcct, secAcctSeq, capAcct, secCompCode );
			SFLogger.info( context, "UPDATE AcctJour 结束" );

			// UPDATE TRDAcctDetail
			SFLogger.info( context, "UPDATE TRDAcctDetail 开始" );
			acctDetailDao.updAcctDetail( context, tranConnection, "0", secAcct, secAcctSeq, capAcct, secCompCode );
			SFLogger.info( context, "UPDATE TRDAcctDetail 结束" );

			// UPDATE TRDAcctAdmDetail
			SFLogger.info( context, "UPDATE TRDAcctAdmDetail 开始" );
			acctAdmDetailDao.updAcctAdmDetailByCapAcct( context, tranConnection, "0", secAcct, secAcctSeq, capAcct, secCompCode );
			SFLogger.info( context, "UPDATE TRDAcctAdmDetail 结束" );

			// UPDATE TRDAcctJour_fb
			SFLogger.info( context, "UPDATE TRDAcctJour_fb 开始" );
			acctJourDao.updAcctJour( context, tranConnection, "1", secAcct, secAcctSeq, capAcct, secCompCode );
			SFLogger.info( context, "UPDATE TRDAcctJour_fb 结束" );

			// UPDATE TRDAcctDetail_fb
			SFLogger.info( context, "UPDATE TRDAcctDetail_fb 开始" );
			acctDetailDao.updAcctDetail( context, tranConnection, "1", secAcct, secAcctSeq, capAcct, secCompCode );
			SFLogger.info( context, "UPDATE TRDAcctDetail_fb 结束" );

			// UPDATE TRDAcctAdmDetail_fb
			SFLogger.info( context, "UPDATE TRDAcctAdmDetail_fb 开始" );
			acctAdmDetailDao.updAcctAdmDetailByCapAcct( context, tranConnection, "1", secAcct, secAcctSeq, capAcct, secCompCode );
			SFLogger.info( context, "UPDATE TRDAcctAdmDetail_fb 结束" );

			// 提交事务2
			DBHandler.commitTransaction( context, tranConnection );

		} catch( SFException e ) {
			throw e;
		} catch( Exception e ) {
			SFUtil.chkCond( context, "ST4895", e.getMessage() );
		}
		SFLogger.info( context, "addPublicInfo()结束" );
	}

	/**
	 * 记录交易流水
	 */
	private void addAcctJour( Context context ) throws SFException {
		SFLogger.info( context, "addAcctJour()开始" );
		try {
			AcctJour acctJour = new AcctJour();
			acctJour.setTxDate( txDate );
			acctJour.setUserId( userId );
			acctJour.setInitSide( "S" );
			acctJour.setTxSeqId( BizUtil.getTxSeqId( secSeqId.trim() ) );
			acctJour.setSecSeqId( secSeqId );
			acctJour.setSubTxSeqId( subTxSeqId );
			acctJour.setSecAcct( secAcct );
			acctJour.setInvType( invType );
			acctJour.setSecCompCode( secCompCode );
			acctJour.setCapAcct( capAcct );
			acctJour.setAbstractStr( "变更客户身份信息" );
			acctJour.setJourFlag( "00" );
			acctJour.setTxCode( SFConst.SF_TX_CODE_SECU_UPD_CUST_INFO );
			acctJour.setBusiType( "26" );
			acctJour.setTxTime( txTime );
			acctJour.setOpenDepId( openDepId );
			acctJour.setOpenBranchId( openBranchId );
			acctJour.setDepId( openDepId );
			acctJour.setBranchId( openBranchId );
			acctJour.setOldInvName( oldInvName );
			acctJour.setOldIdType( oldIdType );
			acctJour.setOldInvIdCode( oldInvIdCode );
			acctJour.setColFlag( "0" );
			acctJour.setAcctDealId( subTxSeqId.substring( 2 ) );
			acctJour.setTranSeqId( chlSeqId );
			acctJour.setBusiSeqId( chlSeqId );

			acctJourDao.saveAcctJour( context, tranConnection, acctJour );
		} catch( SFException e ) {
			throw e;
		} catch( Exception e ) {
			SFUtil.chkCond( context, "ST4895", e.getMessage() );
		}
		SFLogger.info( context, "addAcctJour()结束" );
	}

	private void updInvestData( Context context ) throws SFException {
		SFLogger.info( context, "updInvestData()开始" );
		try {
			InvestData investData = new InvestData();
			investData.setInvType( invType );
			investData.setInvName( invName );
			investData.setIdType( hostIdType );
			investData.setInvIdCode( invIdCode );

			if( SFConst.INV_TYPE_RETAIL.equals( invType ) ) {
				investData.setLegalName( legalName );
				investData.setLegalIdCode( legalIdCode );
				investData.setTrnName( trnName );
				investData.setTrnIdCode( trnIdCode );
				investData.setTrnMobile( trnMobile );

			}
			investData.setSecAcct( secAcct );

			investDataDao.updInvestDataInvIdCodeBySecAcct( context, tranConnection, investData );
		} catch( SFException e ) {
			throw e;
		} catch( Exception e ) {
			SFUtil.chkCond( context, "ST4895", e.getMessage() );
		}
		SFLogger.info( context, "updInvestData()结束" );
	}

	private void updSignAccountData( Context context ) throws SFException {
		SFLogger.info( context, "updSignAccountData()开始" );
		try {
			SignAccountData signAccountData = new SignAccountData();
			signAccountData.setSecAcct( secAcct );
			signAccountData.setSecAcctSeq( secAcctSeq );
			signAccountData.setInvName( invName );
			signAccountData.setCapAcct( capAcct );
			signAccountData.setSecCompCode( secCompCode );

			signAccountDataDao.saveSignAccountData( context, tranConnection, signAccountData );
		} catch( SFException e ) {
			throw e;
		} catch( Exception e ) {
			SFUtil.chkCond( context, "ST4895", e.getMessage() );
		}
		SFLogger.info( context, "updSignAccountData()结束" );
	}

	/**
	 * 
	 * 写交易明细
	 * @param context
	 * @return
	 * @throws SFException
	 */
	public void addAcctAdmDetail( Context context ) throws SFException {
		SFLogger.info( context, "addAcctAdmDetail()开始" );
		try {
			AcctAdmDetail acctAdmDetail = new AcctAdmDetail();
			acctAdmDetail.setTxDate( txDate );
			acctAdmDetail.setUserId( userId );
			acctAdmDetail.setInitSide( "S" );
			acctAdmDetail.setTxSeqId( BizUtil.getTxSeqId( secSeqId.trim() ) );
			acctAdmDetail.setSecSeqId( secSeqId );
			acctAdmDetail.setSubTxSeqId( subTxSeqId );
			acctAdmDetail.setSecAcct( secAcct );
			acctAdmDetail.setInvType( invType );
			acctAdmDetail.setInvName( invName );
			acctAdmDetail.setIdType( hostIdType );
			acctAdmDetail.setInvIdCode( invIdCode );
			acctAdmDetail.setOldInvName( oldInvName );
			acctAdmDetail.setOdIdType( oldIdType );
			acctAdmDetail.setOldInvIdCode( oldInvIdCode );
			acctAdmDetail.setSecAcctSeq( secAcctSeq );
			acctAdmDetail.setSecCompCode( secCompCode );
			acctAdmDetail.setCapAcct( capAcct );
			acctAdmDetail.setAcctId( acctId );
			acctAdmDetail.setOpenDepId( openDepId );
			acctAdmDetail.setOpenBranchId( openBranchId );
			acctAdmDetail.setDepId( openDepId );
			acctAdmDetail.setBranchId( openBranchId );
			acctAdmDetail.setJourFlag( "00" );
			acctAdmDetail.setSignFlag( signFlag );
			acctAdmDetail.setnSignFlag( signFlag );
			acctAdmDetail.setTxCode( SFConst.SF_TX_CODE_SECU_UPD_CUST_INFO );
			acctAdmDetail.setBusiType( "26" );
			acctAdmDetail.setTxTime( txTime );
			acctAdmDetail.setAcctDealId( subTxSeqId.substring( 2 ) );
			acctAdmDetail.setColFlag( "0" );
			acctAdmDetail.setAbStract( " " );
			acctAdmDetail.setAbstractStr( "变更客户身份信息" );

			acctAdmDetailDao.saveAcctAdmDetail( context, tranConnection, acctAdmDetail );
		} catch( SFException e ) {
			throw e;
		} catch( Exception e ) {
			SFUtil.chkCond( context, "ST4895", e.getMessage() );
		}
		SFLogger.info( context, "addAcctAdmDetail()结束" );
	}

	private void addInvestData( Context context ) throws SFException {
		SFLogger.info( context, "addInvestData()开始" );
		try {
			InvestData investData = new InvestData();
			investData.setInvType( invType );
			investData.setSecAcct( secAcct );
			investData.setInvName( invName );
			investData.setIdType( hostIdType );
			investData.setInvIdCode( oldInvestData.getInvIdCode() );
			investData.setNationality( oldInvestData.getNationality() );
			investData.setSex( oldInvestData.getSex() );
			investData.setLegalName( oldLegalName );
			investData.setLegalIdCode( oldLegalIdCode );
			investData.setTrnName( oldTrnName );
			investData.setTrnIdType( oldInvestData.getTrnIdType() );
			investData.setTrnIdCode( oldTrnIdCode );
			investData.setTrnPhone( oldInvestData.getTrnPhone() );
			investData.setTrnMobile( oldTrnMobile );
			investData.setAddr( oldInvestData.getAddr() );
			investData.setZip( oldInvestData.getZip() );
			investData.setPhone( oldInvestData.getPhone() );
			investData.setMobile( oldInvestData.getMobile() );
			investData.setFax( oldInvestData.getFax() );
			investData.setEmailAddr( oldInvestData.getEmailAddr() );
			investData.setInterFlag( oldInvestData.getInterFlag() );
			investData.setMemo( oldInvestData.getMemo() );

			investDataDao.saveInvestData( context, tranConnection, investData );
		} catch( SFException e ) {
			throw e;
		} catch( Exception e ) {
			SFUtil.chkCond( context, "ST4895", e.getMessage() );
		}
		SFLogger.info( context, "addInvestData()结束" );
	}
	
	@Override
	public void doHost( Context context ) throws SFException {
		SFLogger.info( context, "doHost()开始" );

		try {
			// 券商预指定不上主机
			if( SFUtil.isNotEmpty( acctId ) && !SFConst.INIT_SIDE_COBANK.equals( initSide ) ) {
				// 若客户姓名、证件类型、证件号码有所不同,则上主机验客户身份,此处与pics不同
				if( !oldInvName.equals( invName ) || !oldIdType.equals( hostIdType ) || !oldInvIdCode.equals( invIdCode ) ) {

					SFLogger.info( context, "上主机查询客户信息开始" );

					Map<String, Object> msg = new HashMap<String, Object>();
					msg.put("BIZ_SEQ_NO", chlSeqId);// 业务流水号
					msg.put("CONSUMER_SEQ_NO", chlSeqId);// 交易流水号
					msg.put( "ACCT_ID", acctId );// 账号ACCT_NO

					// 调用公共方法上主机查询客户信息-区分零售和对公
					BizUtil.chkKeyInvestInfoClient( context, msg );

					SFLogger.info( context, "上主机查询客户信息结束" );
				}
			} else if( SFUtil.isNotEmpty( acctId ) && SFConst.INIT_SIDE_COBANK.equals( initSide ) ) {

				SFLogger.info( context, "合作行查询客户信息开始" );

				// 调用公共方法 上合作行校验客户信息
				BizUtil.qryKeyInvestorBycoBankClient( context, tranConnection, capAcct, secCompCode );

				SFLogger.info( context, "合作行查询客户信息结束" );
			}
		} catch( SFException e ) {
			throw e;
		} catch( Exception e ) {
			SFUtil.chkCond( context, "ST4895", e.getMessage() );
		}
		SFLogger.info( context, "doHost()结束" );
	}

	@Override
	public void doSecu( Context context ) throws SFException {

	}

	@Override
	protected void chkStart( Context context ) throws SFException {

		//先预定义返回报文-交易异常退出时返回  --开始
		
		// 直连模式
		if( SFConst.SECU_ZL.equals( secuType ) ) { 
			KeyedCollection keyColl = SFUtil.getDataElement( context, "100104_O" );  
			SFUtil.setDataValue( context, keyColl, "CUR_CODE", curCode);// 币种
			SFUtil.setDataValue( context, keyColl, "SEC_COMP_CODE", secCompCode );// 券商代码
			SFUtil.setDataValue( context, keyColl, "CAP_ACCT", capAcct );
			SFUtil.setDataValue( context, keyColl, "ACCT_ID", acctId );
			SFUtil.setDataValue( context, keyColl, "SEC_ACCT", secAcct );
		} 
		// 深证通模式	
		if( SFConst.SECU_SZT.equals( secuType ) ) { 
			KeyedCollection keyColl = new KeyedCollection( "100104_O" );
			SFUtil.addDataField( context, keyColl, "CUR_CODE", curCode);// 币种
			SFUtil.addDataField( context, keyColl, "SEC_COMP_CODE", secCompCode );// 券商代码
			SFUtil.addDataField( context, keyColl, "CAP_ACCT", capAcct );
			SFUtil.addDataField( context, keyColl, "ACCT_ID", acctId );
			SFUtil.addDataField( context, keyColl, "SEC_ACCT", secAcct );
		}
		
		//先预定义返回报文-交易异常退出时返回  --结束
	}

	@Override
	protected void chkEnd( Context context ) throws SFException {

		try {

			userId = secu.getUserId();// 客户编号

			SignAccountData signAccountData = signAccountDataDao.qrySignAcctDataAndInvestDateBySignFlag( context, tranConnection, secCompCode, capAcct );
			SFUtil.chkCond( context, ( null == signAccountData ), "ST4045", String.format( "签约信息不符" ) );

			hostIdType = SFUtil.getDataValue( context, SFConst.PUBLIC_ID_TYPE );// 券商证件类型转换为主机证件类型
			txDate = ( ( LocalInfo )SFUtil.getDataValue( context, SFConst.PUBLIC_LOCAL_INFO ) ).getWorkdate();// 交易日期
			txTime = DateUtil.getMacTime();// 取物理时间

			/* **************************************************
			 * 公共检查： 当前券商是否允许办理账户类交易
			 * *************************************************/

			secAcctSeq = signAccountData.getSecAcctSeq();
			acctId = signAccountData.getAcctId();// 发展卡卡号/对公账号
			openDepId = signAccountData.getOpenDepId();// 账户开户网点
			openBranchId = signAccountData.getOpenBranchId();// 账户开户分行
			signFlag = signAccountData.getSignFlag();// 签约标识
			brchId = signAccountData.getFlags();// 券商营业部编号
			initSide = signAccountData.getInitSide();// 交易发起方

			if( null != signAccountData.getInvestData() ) {
				oldInvestData = signAccountData.getInvestData();// 投资人旧信息
				secAcct = oldInvestData.getSecAcct();
				oldLegalName = oldInvestData.getLegalName();// 旧的法人姓名
				oldLegalIdCode = oldInvestData.getLegalIdCode();// 旧的法人证件代码
				oldTrnName = oldInvestData.getTrnName();// 旧的经办人姓名
				oldTrnIdCode = oldInvestData.getTrnIdCode();// 旧的经办人证件代码
				oldTrnMobile = oldInvestData.getTrnMobile();// 旧的经办人手机号
				oldInvName = oldInvestData.getInvName();
				oldIdType = oldInvestData.getIdType();
				oldInvIdCode = oldInvestData.getInvIdCode();
				SFUtil.chkCond( context, ( "#".equals( oldInvIdCode ) ), "ST4045", String.format( "签约信息不符" ) );
			}

		} catch( SFException e ) {
			throw e;
		} catch( Exception e ) {
			SFUtil.chkCond( context, "ST4895", e.getMessage() );
		}
	}

	/**
	 * 返回券商
	 *〈方法功能描述〉
	 * @param context
	 * @throws SFException
	 */
	private void resSecu( Context context ) throws SFException {
		SFLogger.info( context, "resSecu()开始" );
		try {

			// 交易成功-组包返回券商
			if( SFConst.SECU_ZL.equals( secuType ) ) { // 直连模式
				SFUtil.setResDataValue( context, "SEC_ACCT", secAcct );
				SFUtil.setResDataValue( context, "CAP_ACCT", capAcct );
				SFUtil.setResDataValue( context, "SEC_COMP_CODE", secCompCode );
				SFUtil.setResDataValue( context, "CUR_CODE", curCode );
				SFUtil.setResDataValue( context, "SUB_TX_SEQ_ID", subTxSeqId );
				SFUtil.setResDataValue( context, "SEC_SEQ_ID", secSeqId );

			} else if( SFConst.SECU_SZT.equals( secuType ) ) { // 深证通模式组包返回券商

				KeyedCollection kColl = SFUtil.getDataElement( context, "Acmt00601" );

				// 组<ScAcct>组件
				KeyedCollection secAcctKcoll = SFUtil.getDataElement( context, kColl, "ScAcct" );
				KeyedCollection acctSvcrKcoll = SFUtil.getDataElement( context, secAcctKcoll, "AcctSvcr" );
				
				// 银河证券 或 五矿证券 需要回送SecCompCode、BrchId字段
				if( SFConst.SECU_YINHEZQ.equals( secCompCode ) || SFConst.SECU_WUKUANGZQ.equals( secCompCode ) ) {
					SFUtil.setDataValue( context, acctSvcrKcoll, "SEC_BRCH_ID", brchId );
				}
				SFUtil.setDataValue( context, secAcctKcoll, "CAP_ACCT", capAcct );
				SFUtil.setDataValue( context, acctSvcrKcoll, "SEC_COMP_CODE", secCompCode );
				SFUtil.setDataValue( context, acctSvcrKcoll, "SEC_BRCH_ID", brchId );

			}
		} catch( SFException e ) {
			throw e;
		} catch( Exception e ) {
			SFUtil.chkCond( context, "ST4895", e.getMessage() );
		}
		SFLogger.info( context, "resSecu()结束" );
	}

}
