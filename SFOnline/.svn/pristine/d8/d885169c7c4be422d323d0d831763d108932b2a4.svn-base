package core.communication.access.tcpip;

import com.ecc.emp.core.Context;
import com.ecc.emp.core.EMPException;
import com.ecc.emp.data.DataElement;
import com.ecc.emp.data.KeyedCollection;
import com.ecc.emp.format.FormatElement;
import common.util.BizUtil;
import common.util.DateUtil;
import common.util.SFConst;
import common.util.SFUtil;

import core.communication.format.KeyedFormat;
import core.communication.util.AccessConstance;

/**
 * EMP提供的TCP/IP渠道接入访问服务的另一种实现。
 * <p>
 * 可将EMP业务逻辑构件开放为供TCP/IP渠道接入访问的服务，
 * 使得通过TCP/IP渠道接入的系统可以通过定义输出输出报文的方式访问EMP的业务处理逻辑。
 * 与<tt>EMPTCPIPRequestService</tt>不同的是，它不使用报文格式解析器，
 * 而是固定采用EMP数据模型永久化处理器<tt>DataElementSerializer</tt>对数据进行XML格式打包解包，
 * 该格式与EMP数据定义一致。
 * <p>
 * 可以有一个或多个定义包含在TcpipAccessServletContext配置文件中，参数如下：
 * <p>
 * id：HTTP Service的id，通过指定此id对Service进行访问<br>
 * serviceName：id的等价参数<br>
 * serviceType：Service访问类型，可选项有session(创建会话)、endSession(结束会话)以及其它(默认，普通请求)<br>
 * sessionContextName：当serviceType为session时有效，指定要创建会话的业务逻辑Context名称<br>
 * checkSession：该请求是否检查会话，可选项true(默认)、false<br>
 * EMPFlowId：该Service对应的EMP业务逻辑构件名<br>
 * opId：该Service对应的EMP业务逻辑构件中的Operation ID<br>
 * description：描述信息<br>
 * encoding：报文体编码<br>
 * enabled：该Service是否启用，可选项true(默认)、false<br>
 * 
 * @author zhongmc
 * @version 2.1
 * @since 1.0 2006-12-26
 * @lastmodified 2008-6-11
 * @emp:name TCP/IP渠道接入访问服务(DS)
 * @emp:document EMP提供的TCP/IP渠道接入访问服务，可访问EMP业务逻辑构件
 */
public class PBankTCPIPDataSerializerService extends PBankTCPIPRequestService {

	public PBankTCPIPDataSerializerService() {
		super();
	}

	/**
	 * 使用请求数据更新数据模型。
	 * <p>
	 * 使用EMP数据模型永久化处理器<tt>DataElementSerializer</tt>将请求报文转换成数据。
	 * 
	 * @param requestMsg 请求报文包
	 * @param context 交易上下文
	 * @param dataElementDef input定义
	 * @throws EMPException
	 */
	public void updateModel(byte[] requestMsg, Context context) throws EMPException {
		try {

			DataElement element = null;
			String reqData = null;
			if (encoding == null)
				reqData = new String(requestMsg);
			else
				reqData = new String(requestMsg, encoding);
			
			
			FormatElement msgFormat = context.getFormat(this.serviceName+ "_I");
			if (msgFormat == null){
				throw new EMPException("The format:["+ serviceName + "_I" + "] not defined in context, please check the SFOnlineFormats.xml and settings.xml");
			}
			
		
//			KeyedCollection inColl = new KeyedCollection(tranCode + "_I");
//			inColl.setAppend( true );
			if( msgFormat.isBin() )
				msgFormat.unFormat(requestMsg, context );
			else
				msgFormat.unFormat(new String(requestMsg), context );
			
			msgFormat = context.getFormat(this.serviceName+ "_O");
			if (msgFormat == null){
				throw new EMPException("The format:["+ serviceName + "_O" + "] not defined in context, please check the SFOnlineFormats.xml and settings.xml");
			}
			

			KeyedFormat tranCodeO = (KeyedFormat)msgFormat.getFormatElement();
			
			tranCodeO.addFormatToContext(context);
			
			updateSFOnlinePublicData(context);

			/* shendongjie delete for SFonline project
			element = DataElementSerializer.serializeFrom(reqData);
			DataUtility.updateDataModel(context, element, factory.getDataTypeDefine());
			*/
		
		} catch (EMPException ee) {
			throw ee;
		} catch (Exception e) {
			throw new EMPException(
					"Failed to update dataModel in EMPTCPIPRequestHandler:", e);
		}

	}

	/**
	 * 获得返回报文体。
	 * <p>
	 * 使用EMP数据模型永久化处理器<tt>DataElementSerializer</tt>将数据转换成XML格式串。
	 * 
	 * @param context 交易上下文
	 * @param dataElement output定义
	 * @return 返回报文体
	 * @throws Exception
	 */
	protected byte[] getResponse(Context context) throws Exception {
		initHeadKcoll(context);
		KeyedCollection headColl =  SFUtil.getDataElement(context, AccessConstance.A_RESPONSE_HEAD); //(KeyedCollection)context.getDataElement(AccessConstance.A_RESPONSE_HEAD);
		FormatElement headFormat = context.getFormat(AccessConstance.A_RESPONSE_HEAD);
		
		String headData = null;
		
//		String respCode = (String)context.getDataValue("A_RESPONSE_HEAD.RESPCODE");
		
		
//        if(!SFConst.COBANK_RESPCODE_SUCCCODE.equals((String)context.getDataValue("A_RESPONSE_HEAD.RESPCODE"))){
//        	return headData.getBytes();
//        }
        
		//根据报文头的返回码来判断是否需要加入报文体内容，只有返回"000000"成功时才返回报文体
        
//		
		String retCode = SFUtil.getDataValue(context,SFConst.CTX_ERRCODE);
		String retMsg = SFUtil.getDataValue(context,SFConst.CTX_ERRMSG);
		if(SFConst.RESPCODE_SUCCCODE.equals(retCode)||SFUtil.isEmpty(retCode)){
			
			if("810005".equals(serviceName)){
				context.setDataValue("A_RESPONSE_HEAD.RESPCODE", "000000");
				context.setDataValue("A_RESPONSE_HEAD.RESPMSG", SFUtil.isEmpty(retMsg)?"$":retMsg);
			}else{
				context.setDataValue("A_RESPONSE_HEAD.RESPCODE", SFConst.RESPCODE_SUCCCODE_COBANK);
				context.setDataValue("A_RESPONSE_HEAD.RESPMSG", SFUtil.isEmpty(retMsg)?"交易成功":retMsg);
			}
			
			
			headData = (String)headFormat.format(headColl);
		}else{
			context.setDataValue("A_RESPONSE_HEAD.RESPCODE",retCode);
			context.setDataValue("A_RESPONSE_HEAD.RESPMSG",retMsg);
			headData = (String)headFormat.format(headColl);
			return headData.getBytes("GBK");
		}
		
		
		
		FormatElement msgFormat = context.getFormat(this.serviceName + "_O");
		String responseData = (String)msgFormat.format(context);
//		int len = headData.length()+responseData.length();
		String resData = headData+responseData;//String.valueOf(len)+
		if (encoding != null)
			return resData.getBytes(encoding);
		else
			return resData.getBytes("GBK");
	}
	
	
	
	
	public void initHeadKcoll(Context context) throws EMPException {
		KeyedCollection headColl = null;
		if(context.containsKey(AccessConstance.A_RESPONSE_HEAD)){
			headColl =  SFUtil.getDataElement(context, AccessConstance.A_RESPONSE_HEAD);// (KeyedCollection)context.getDataElement(AccessConstance.A_RESPONSE_HEAD);
			
			headColl.setDataValue("serviceId",SFUtil.getDataValue(context,"A_REQUEST_HEAD.serviceId"));
			headColl.setDataValue("TRANSDATE", DateUtil.getMacDateShort());
			headColl.setDataValue("TRANSTIME", DateUtil.getMacTime());
			headColl.setDataValue("CHANNELSERIALNO", BizUtil.genSeqId(context,"TRCNO"));
			headColl.setDataValue("BUSINESSDATE", DateUtil.getMacDateShort());
			headColl.setDataValue("BANKNO", SFUtil.getDataValue(context,"A_REQUEST_HEAD.BANKNO"));
			headColl.setDataValue("RESERVE", "");
		}else{
			
			headColl = new KeyedCollection();
			
			headColl.addDataField("serviceId",SFUtil.getDataValue(context,"A_REQUEST_HEAD.serviceId"));
			headColl.addDataField("TRANSDATE", DateUtil.getMacDateShort());
			headColl.addDataField("TRANSTIME", DateUtil.getMacTime());
			headColl.addDataField("CHANNELSERIALNO", BizUtil.genSeqId(context,"TRCNO"));
			headColl.addDataField("BUSINESSDATE", DateUtil.getMacDateShort());
			headColl.addDataField("BANKNO",SFUtil.getDataValue(context,"A_REQUEST_HEAD.BANKNO"));
			headColl.addDataField("RESERVE", "");
			context.addDataElement(headColl);
		}
	}
	
	
	

	/**
	 * 根据SFOnline交易定义可以把公共数据更新到Context中。使用此函数
	 * @param request HTTP请求
	 * @param context 交易上下文
	 */
	private void updateSFOnlinePublicData(Context context) throws EMPException {
	}
}
