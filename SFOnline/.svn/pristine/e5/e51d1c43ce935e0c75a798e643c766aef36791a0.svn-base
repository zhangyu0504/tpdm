package common.services;

import java.sql.Connection;

import module.cache.ParamCache;

import com.ecc.emp.core.Context;
import com.ecc.emp.core.EMPException;
import com.ecc.emp.data.IndexedCollection;
import com.ecc.emp.data.KeyedCollection;
import com.ecc.emp.service.EMPService;
import common.action.db.SqlExecAction;
import common.exception.SFException;
import common.sql.dao.DaoBase;
import common.util.BizUtil;
import common.util.SFConst;
import common.util.SFUtil;

import core.communication.access.tcpip.BBCPCommClient;
import core.log.SFLogger;

/**
 * 
 * <b>功能描述：</b><br>
 * FBS公共服务对象，提供各种存管系统的基本公共函数<br>
 * <b>函数列表：</b><br>
 * &lt;name="getSQLExecAction"&gt;&lt;function="获取Sql语句执行的Action"&gt;<br>
 * @version 1.0
 * @modifier
 * 
 */

public class PublicService extends EMPService {

	/**
	 * 新产生一个公共的SQL语句执行对象.
	 * 
	 * @param context
	 * @throws EMPException
	 */
	public SqlExecAction getSQLExecAction(Context context)
			throws EMPException {
		SqlExecAction sqlExecAction = null;

		sqlExecAction = new SqlExecAction();
		sqlExecAction.setDataSource((String) context
				.getDataValue(SFConst.SERVICE_DATASOURCE));
		sqlExecAction.setSqlService((String) context
				.getDataValue(SFConst.SERVICE_SQL));

		return sqlExecAction;
	}
	
	
	/**
	 * 转发档板
	 * @param context
	 * @param type
	 * @param serverId
	 * @param receiveNo
	 * @param timeOut
	 * @return
	 * @throws SFException
	 */
	public String baffle(Context context,String type,String serverId,String receiveNo,int timeOut)throws SFException{
		String isOn= ParamCache.getValue2("BAFFLE","ON-OFF");//挡板地址
		if(!"1".equals(isOn)){
			return null;
		}
		Connection connection = SFUtil.getDataValue(context, SFConst.PUBLIC_TRAN_CONNECTION);
		String tranCode = SFUtil.getDataValue(context, SFConst.PUBLIC_TX_CODE);//交易号
		/*
		 * 计算当前交易是否存在挡板
		 */
		String sql = "SELECT COUNT(T.TRANCODE) AS NUM FROM TRDBAFFLE T WHERE T.TRANCODE = ? AND T.TYPE = ?  AND T.SERVERID = ? AND (? IS NULL OR T.RECEIVENO = ?) AND T.CONDITION = '1'";
		long baffleCount = DaoBase.qryCount(context, connection, sql, tranCode,type,serverId,receiveNo,receiveNo);
		if(baffleCount>0){
			SFLogger.info(context, "存在报文挡板");	
			
			String baffleIP,bafflePort;
			//获取机器码
			String macCode=BizUtil.getMacCode(context);
			baffleIP=ParamCache.getValue2("BAFFLE","BAFFLE_IP");//挡板地址
			bafflePort=ParamCache.getValue2("BAFFLE","BAFFLE_PORT_"+macCode);//挡板端口
			receiveNo=SFUtil.isEmpty(receiveNo)?" ":receiveNo;
			
			//构建报文
			StringBuffer message=new StringBuffer();
			message.append(SFUtil.fixChar(tranCode, 20, ' ',"right"));
			message.append(SFUtil.fixChar(serverId, 20, ' ',"right"));
			message.append(SFUtil.fixChar(receiveNo, 20, ' ',"right"));
			message.append(SFUtil.fixChar(String.valueOf(timeOut), 6, ' ',"right"));
			
			//字符串报文转换成字节数组
			byte[] toSendMessage = new byte[message.length()+10];
			toSendMessage = ("0073BF0001"+message.toString()).getBytes();
			
			BBCPCommClient client =  new BBCPCommClient(baffleIP,bafflePort,timeOut,0);				
			SFLogger.info(context, "开始请求挡板服务......");
			String ret = client.SendCMD(context,toSendMessage);
			
			if(!"0".equals(ret)){
				SFUtil.setDataValue(context,SFConst.PUBLIC_RET_FLAG, SFConst.RET_OVERTIME);//手工设置超时
				if("1".equals(type)){  //esb
					IndexedCollection iColl=SFUtil.getDataElement(context,"RET");
					KeyedCollection kColl=(KeyedCollection)iColl.getElementAt(0);
					SFUtil.setDataValue(context,kColl,"RET_CODE", SFConst.RESPCODE_TIMEOUT_ESB);
					SFUtil.setDataValue(context,kColl,"RET_MSG","主机响应报文失败");
				}
//					else if("2".equals(type)){  //合作行
//						SFUtil.setDataValue(context,"A_RESPONSE_HEAD.RESPCODE", SFConst.RESPCODE_TIMEOUT_COBANK);
//						SFUtil.setDataValue(context,"A_RESPONSE_HEAD.RESPMSG", "合作行响应报文失败");
//					}else if("3".equals(type)){ //直联
//						String outputName = serverId + "_O";
//						FormatElement outputFormat = context.getFormat(outputName);
//						KeyedFormat tranCodeO = (KeyedFormat)outputFormat.getFormatElement();
//						String outKcollName = tranCodeO.getKcollName();
//						SFUtil.setDataValue(context,outKcollName+".RESP_CODE", SFConst.RESPCODE_TIMEOUT_ZLSECU);
//						SFUtil.setDataValue(context,outKcollName+".RESP_MSG","券商响应报文失败");
//					}else if("4".equals(type)){    //深证通
//						Map<String,Map<String,String>> tcpipServiceMap =  CacheMap.getCache("SZT_TCPIPSERVICE");
//						Map<String,String> tcpipService = tcpipServiceMap.get(serverId);		
//						String outKcollName = tcpipService.get("formatOutput");// ReadProperty.getValue(msgCode+ "_O");		
//						outKcollName = outKcollName.replaceAll("\\.", "");
//						KeyedCollection outKcoll = SFUtil.getDataElement(context,outKcollName);		
//						KeyedCollection rstKcoll = SFUtil.getDataElement(context,outKcoll, "Rst");
//						SFUtil.setDataValue(context,rstKcoll,"RESP_CODE", SFConst.RESPCODE_TIMEOUT_SZTSECU);
//						SFUtil.setDataValue(context,rstKcoll,"RESP_MSG","深证通响应报文超时");
//					}
				throw new SFException("YYPTERROR9999","档板通信错误："+ret);	
			}
			
			String msgText = client.getResult();
			SFLogger.info(context, "挡板返回报文内容为："+msgText);
			return msgText;
		}
		return null;
	}
}
