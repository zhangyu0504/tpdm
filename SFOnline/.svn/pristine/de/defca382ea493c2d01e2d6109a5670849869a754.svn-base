package core.schedule.job.java;

import java.sql.Connection;

import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.quartz.StatefulJob;

import com.ecc.emp.component.factory.EMPFlowComponentFactory;
import com.ecc.emp.core.Context;
import com.ecc.emp.log.EMPLog;
import common.exception.SFException;
import common.sql.dao.DBHandler;
import common.util.SFConst;

import core.schedule.SFCompLocalMachineIpAction;
import core.schedule.bean.ScheduleParam;
import core.schedule.dao.ScheduleDao;
import core.schedule.job.AbstractScheduleAction;

public class ScheduleStatefulJobAction implements StatefulJob {
	private ScheduleDao scheduleDao=new ScheduleDao();//任务调度dao

	public void execute(JobExecutionContext jobContext) throws JobExecutionException {
		String scheduleId = jobContext.getTrigger().getName();
		Connection connection=null;
		Context context = null, rootContext = null;
		SFCompLocalMachineIpAction macAction = new SFCompLocalMachineIpAction();//服务器Action
		
		try {			
			/*
			 * 构建交易上下文（交易上下文是从根上下文克隆来）
			 */
			EMPFlowComponentFactory factory =(EMPFlowComponentFactory) EMPFlowComponentFactory.getComponentFactory(SFConst.SYS_SYSNAME);
			rootContext = factory.getContextNamed(factory.getRootContextName());
			context = (Context) rootContext.clone();
			/*
			 * 查询批量任务
			 */
			connection=DBHandler.getConnection(context);//获取数据库连接
			DBHandler.beginTransaction(context, connection);//开启事务
			ScheduleParam scheduleInfo=scheduleDao.qryScheduleParam(context, connection, scheduleId, SFConst.SYS_SYSNAME);
			if(scheduleInfo==null){
				return ;
			}			
			/*
			 * IP检验
			 */
			macAction.setIpAddress(scheduleInfo.getIp());
			String result = macAction.execute(context);
			if("0".equals(result)){
				/*
				 * 最大记录数检查
				 */
				int maxCount=scheduleInfo.getMaxCount();
				int currIndex=scheduleInfo.getCurrIndex();
				if(maxCount<=0){
					maxCount=1;
				}
				if(maxCount<=currIndex){
					return;
				}
				
				/*
				 * 任务执行前记录活动数（加1）
				 */
				scheduleDao.updateForIndex(rootContext, connection, scheduleId, SFConst.SYS_SYSNAME, 1);
				DBHandler.commitTransaction(rootContext, connection);
				DBHandler.releaseConnection(context, connection);//批量调度中数据库连接即用即释放
				try{
					AbstractScheduleAction action=new ScheduleClassAction();
					/*
					 * 执行具体任务
					 */
					action.doJob(jobContext,context,scheduleId);					
				}catch (Exception e){
					EMPLog.log(SFConst.DEFAULT_TRXCODE, EMPLog.ERROR, 0, "execute schedule error:" + e.getMessage(), e);
				}
				/*
				 * 任务执行后记录活动数（减1）
				 */
				connection=DBHandler.getConnection(context);//获取数据库连接
				DBHandler.beginTransaction(context, connection);//开启事务
				scheduleDao.updateForIndex(rootContext, connection, scheduleId, SFConst.SYS_SYSNAME, -1);
				DBHandler.commitTransaction(rootContext, connection);
			}
		} catch (Exception e) {
			EMPLog.log(SFConst.DEFAULT_TRXCODE, EMPLog.ERROR, 0, "execute schedule error:" + e.getMessage(), e);
		}finally {
			if(context != null){
				try {
					DBHandler.releaseConnection(context, connection);//批量调度中数据库连接即用即释放
				} catch (SFException e) {
					EMPLog.log(SFConst.DEFAULT_TRXCODE, EMPLog.ERROR, 0, "execute schedule error:" + e.getMessage(), e);
				}
				context.terminate();
			}
		}
	}
}
