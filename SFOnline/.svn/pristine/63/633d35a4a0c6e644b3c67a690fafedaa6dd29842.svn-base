package core.communication.access.zlsecu;

import module.bean.ErrorMap;
import module.bean.SecCompData;
import module.cache.ErrorMapCache;
import module.cache.ParamCache;

import com.ecc.emp.core.Context;
import com.ecc.emp.core.EMPException;
import com.ecc.emp.data.DataElement;
import com.ecc.emp.data.DataElementSerializer;
import com.ecc.emp.data.DataUtility;
import com.ecc.emp.data.KeyedCollection;
import com.ecc.emp.format.FormatElement;
import common.util.BizUtil;
import common.util.DateUtil;
import common.util.SFConst;
import common.util.SFUtil;

import core.communication.format.KeyedFormat;
import core.communication.util.AccessConstance;
import core.log.SFLogger;

/**
 * EMP提供的TCP/IP渠道接入访问服务的另一种实现。
 * <p>
 * 可将EMP业务逻辑构件开放为供TCP/IP渠道接入访问的服务，
 * 使得通过TCP/IP渠道接入的系统可以通过定义输出输出报文的方式访问EMP的业务处理逻辑。
 * 与<tt>EMPTCPIPRequestService</tt>不同的是，它不使用报文格式解析器，
 * 而是固定采用EMP数据模型永久化处理器<tt>DataElementSerializer</tt>对数据进行XML格式打包解包，
 * 该格式与EMP数据定义一致。
 * <p>
 * 可以有一个或多个定义包含在TcpipAccessServletContext配置文件中，参数如下：
 * <p>
 * id：HTTP Service的id，通过指定此id对Service进行访问<br>
 * serviceName：id的等价参数<br>
 * serviceType：Service访问类型，可选项有session(创建会话)、endSession(结束会话)以及其它(默认，普通请求)<br>
 * sessionContextName：当serviceType为session时有效，指定要创建会话的业务逻辑Context名称<br>
 * checkSession：该请求是否检查会话，可选项true(默认)、false<br>
 * EMPFlowId：该Service对应的EMP业务逻辑构件名<br>
 * opId：该Service对应的EMP业务逻辑构件中的Operation ID<br>
 * description：描述信息<br>
 * encoding：报文体编码<br>
 * enabled：该Service是否启用，可选项true(默认)、false<br>
 * 
 * @author zhongmc
 * @version 2.1
 * @since 1.0 2006-12-26
 * @lastmodified 2008-6-11
 * @emp:name TCP/IP渠道接入访问服务(DS)
 * @emp:document EMP提供的TCP/IP渠道接入访问服务，可访问EMP业务逻辑构件
 */
public class PBankTCPIPDataSerializerService extends PBankTCPIPRequestService {

	public PBankTCPIPDataSerializerService() {
		super();
	}

	/**
	 * 使用请求数据更新数据模型。
	 * <p>
	 * 使用EMP数据模型永久化处理器<tt>DataElementSerializer</tt>将请求报文转换成数据。
	 * 
	 * @param requestMsg 请求报文包
	 * @param context 交易上下文
	 * @param dataElementDef input定义
	 * @throws EMPException
	 */
	public void updateModel(byte[] requestMsg, Context context, DataElement dataElementDef) throws EMPException {
		try {
			if (dataElementDef == null){
				DataElement element = null;
				String reqData = null;
				if (encoding == null)
					reqData = new String(requestMsg);
				else
					reqData = new String(requestMsg, encoding);
				
				//处理head信息
				FormatElement headFormat = context.getFormat("ZLSECU_REQUEST_HEAD");
				if (headFormat == null){
					throw new EMPException("The format:["+ serviceName + "_I" + "] not defined in context, please check the SFOnlineFormats.xml and settings.xml");
				}
				
				if( headFormat.isBin() )
					headFormat.unFormat(requestMsg, context );
				else
					headFormat.unFormat(new String(requestMsg), context );
				
				
				
				//处理body信息
				FormatElement msgFormat = context.getFormat(serviceName + "_I");
				if (msgFormat == null){
					throw new EMPException("The format:["+ serviceName + "_I" + "] not defined in context, please check the SFOnlineFormats.xml and settings.xml");
				}
				
			
				if( msgFormat.isBin() )
					msgFormat.unFormat(requestMsg, context );
				else
					msgFormat.unFormat(new String(requestMsg), context );
				
				
				
				
				msgFormat = context.getFormat(serviceName + "_O");
				if (msgFormat == null){
					throw new EMPException("The format:["+ serviceName + "_O" + "] not defined in context, please check the SFOnlineFormats.xml and settings.xml");
				}
				
	
				KeyedFormat tranCodeO = (KeyedFormat)msgFormat.getFormatElement();
				
				tranCodeO.addFormatToContext(context);
				updateSFOnlinePublicData(context);

			} else {
				DataElement dstElement = (DataElement) dataElementDef.clone();
				String reqData = null;
				if (encoding == null)
					reqData = new String(requestMsg);
				else
					reqData = new String(requestMsg, encoding);
				DataElement element = DataElementSerializer.serializeFrom(reqData);
				DataUtility.copyKeyedCollectionData((KeyedCollection) element, (KeyedCollection) dstElement, null);
				DataUtility.updateDataModel(context, dstElement, factory.getDataTypeDefine());
			}
		} catch (EMPException ee) {
			throw ee;
		} catch (Exception e) {
			throw new EMPException(
					"Failed to update dataModel in EMPTCPIPRequestHandler:", e);
		}

	}

	/**
	 * 获得返回报文体。
	 * <p>
	 * 使用EMP数据模型永久化处理器<tt>DataElementSerializer</tt>将数据转换成XML格式串。
	 * 
	 * @param context 交易上下文
	 * @param dataElement output定义
	 * @return 返回报文体
	 * @throws Exception
	 */
	protected byte[] getResponse(Context context, DataElement dataElement) throws Exception {
		String encoding=this.encoding;
		initHeadKcoll(context);

		//成功返回码转换
        String retCode = SFUtil.getDataValue(context,SFConst.CTX_ERRCODE);
		String retMsg = SFUtil.getDataValue(context,SFConst.CTX_ERRMSG);
		if(SFConst.RESPCODE_SUCCCODE.equals(retCode)||SFUtil.isEmpty(retCode)){
			context.setDataValue(tranCode + "_O"+".RESP_CODE", SFConst.RESPCODE_SUCCCODE_ZLSECU);
			context.setDataValue(tranCode + "_O"+".RESP_MSG", SFUtil.isEmpty(retMsg)?"交易成功":retMsg);
			// ..........!!
		}else{
			ErrorMap errorMap =ErrorMapCache.getSztValue(retCode);
			if(errorMap!=null){
				context.setDataValue(tranCode + "_O"+".RESP_CODE",errorMap.getZlCode());
				context.setDataValue(tranCode + "_O"+".RESP_MSG",errorMap.getErrExplain());
			}else{
				context.setDataValue(tranCode + "_O"+".RESP_CODE", retCode);
				context.setDataValue(tranCode + "_O"+".RESP_MSG", retMsg);
			}
		}
        
        
        
		
        FormatElement rootHeadFormat = context.getFormat(AccessConstance.ZLSECU_RESPONSE_HEAD);
		String responseHeadData = (String)rootHeadFormat.format(context);
		FormatElement msgFormat = context.getFormat(this.serviceName + "_O");
		String responseData = (String)msgFormat.format(context);
		
		String resData = "<?xml version=\"1.0\"?>\r\n<Root>\r\n"+responseHeadData+"\r\n"+responseData+"\r\n</Root>";//String.valueOf(len)+
		/*
		 * 按不同券商特处理响应报文编码格式
		 */
		SecCompData secCompData = (SecCompData)context.getDataValue(SFConst.PUBLIC_SECU);
		String secCompCode = null;
		if(secCompData!=null){
			secCompCode = secCompData.getSecCompCode();
			resData = resData.replaceAll("\r\n", "");
			//从缓存中获取接口编码
			String secEncoding=ParamCache.getValue2("ZLSEC_ENCODE", secCompCode+"_"+this.serviceName);
			if(SFUtil.isNotEmpty(secEncoding)){
				encoding=secEncoding;
			}else{
				secEncoding=ParamCache.getValue2("ZLSEC_ENCODE", secCompCode);
				if(SFUtil.isNotEmpty(secEncoding)){
					encoding=secEncoding;
				}
			}
		}
		
		int len = resData.getBytes().length;
		KeyedCollection headColl = SFUtil.getDataElement(context, AccessConstance.B_RESPONSE_HEAD); //(KeyedCollection)context.getDataElement(AccessConstance.B_RESPONSE_HEAD);
		headColl.setDataValue("MSGDATALEN", String.valueOf(len));		
		FormatElement headFormat = context.getFormat(AccessConstance.B_RESPONSE_HEAD);
		String headData = (String)headFormat.format(headColl);
		resData = headData+resData;

		SFLogger.info(context,"直联券商应答报文编码格式：["+encoding+"]");
		if (encoding != null)
			return resData.getBytes(encoding);
		else
			return resData.getBytes();
	}
	
	
	
	
	public void initHeadKcoll(Context context) throws EMPException {
		SecCompData secCompData = (SecCompData)context.getDataValue(SFConst.PUBLIC_SECU);
		String secCompCode = null;
		if(secCompData!=null){
			secCompCode = secCompData.getSecCompCode();
		}
		KeyedCollection headColl = null;
		if(context.containsKey(AccessConstance.B_REQUEST_HEAD)){
			KeyedCollection reqColl = SFUtil.getDataElement(context,AccessConstance.B_REQUEST_HEAD);
			headColl = (KeyedCollection) reqColl.clone();
			
			headColl.setName(AccessConstance.B_RESPONSE_HEAD);
			
		}else{
			throw new EMPException("not find "+AccessConstance.B_REQUEST_HEAD);
		
		}
		headColl.setDataValue("VERSION", "1.0" );
		if("10990000".equals( secCompCode )){//中金
//			6022   6031  6032 6027
			headColl.setDataValue("FUNCCODE", "100" );
		}else{
			headColl.setDataValue("FUNCCODE", "000" );
			headColl.setDataValue("TOTALBLOCK", "0" );
			headColl.setDataValue("CURBLOCK", "0" );
			headColl.setDataValue("MSGEXTLEN", "0" );
		}
		
		
		if(context.containsKey(AccessConstance.B_RESPONSE_HEAD)){
			context.removeDataElement(AccessConstance.B_RESPONSE_HEAD);
			context.addDataElement(headColl);
		}else{
			
			context.addDataElement(headColl);
		}
		KeyedCollection rootHeadColl = null;
		if(context.containsKey("ZLSECU_REQUEST_HEAD")){
			KeyedCollection reqColl = SFUtil.getDataElement(context,"ZLSECU_REQUEST_HEAD");
			
			rootHeadColl = (KeyedCollection) reqColl.clone();
			rootHeadColl.setName("ZLSECU_RESPONSE_HEAD");
			
			String txSeqId = SFUtil.getDataValue(context, "ZLSECU_REQUEST_HEAD.TXSEQID");
			if(SFUtil.isEmpty(txSeqId)){
				txSeqId = BizUtil.getTxSeqId(SFConst.SEQ_ID_LEN_8,BizUtil.getInitSeqId(context));
			}
			rootHeadColl.setDataValue("TXSEQID", txSeqId);
			rootHeadColl.setDataValue("TXDATE", DateUtil.getMacDateShort());
			rootHeadColl.setDataValue("TXTIME", DateUtil.getMacTime());
			rootHeadColl.setDataValue("FUNCCODE", "100" );
			
			if("6065".equals(this.serviceName)){
				if("10200000".equals(secCompCode)){ //光大
					rootHeadColl.setDataValue("NODEID", "0110000000010007");
					rootHeadColl.setDataValue("CHANNEL", "0002");
				}else{
					rootHeadColl.setDataValue("NODEID", "0110800000000000");
					rootHeadColl.setDataValue("CHANNEL", "0005");
					
				}
			}
			

			
		}else{
			throw new EMPException(
					"not find "+"ZLSECU_REQUEST_HEAD");
		}
		
		
		
		if(context.containsKey("ZLSECU_RESPONSE_HEAD")){
			context.removeDataElement("ZLSECU_RESPONSE_HEAD");
			context.addDataElement(rootHeadColl);
		}else{
			context.addDataElement(rootHeadColl);
		}
		
		
	}
	
	
	

	/**
	 * 根据SFOnline交易定义可以把公共数据更新到Context中。使用此函数
	 * @param request HTTP请求
	 * @param context 交易上下文
	 */
	private void updateSFOnlinePublicData(Context context) throws EMPException {
	}
}
