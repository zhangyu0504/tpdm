package core.action.database;

import java.sql.Connection;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

import javax.sql.DataSource;

import com.ecc.emp.core.Context;
import com.ecc.emp.core.EMPConstance;
import com.ecc.emp.core.EMPException;
import com.ecc.emp.flow.EMPAction;
import com.ecc.emp.jdbc.ConnectionManager;
import com.ecc.emp.jdbc.EMPJDBCException;
import com.ecc.emp.jdbc.RecordNotFoundException;
import com.ecc.emp.jdbc.sql.SQLParameterCollection;
import com.ecc.emp.log.EMPLog;
import com.ecc.emp.timerecorder.EMPTimerRecorder;
import com.ecc.emp.transaction.EMPTransactionDef;
import common.util.SFConst;
import common.util.SFUtil;

import core.jdbc.sql.SQLParameter;
import core.service.PBankExpressCalculate;
import core.service.PBankSqlDefine;
import core.service.PBankSqlExecService;

/**
 * 数据库SQL语句执行操作步骤。
 * <p>
 * 通过调用PBankSqlExecService，实现在一个事务中执行多条SQL语句的操作。
 * <p>
 * 配置示例：<pre>
 * &lt;action id="SQLExecAction" implClass="com.ecc.emp.jdbc.sql.SQLExecAction"
 * 	transactionType="TRX_REQUIRE_NEW" dataSource="JDBCDataSource"
 * 	sqlService ="PBankSqlExecService" refSQL="PBankSqlDefine1;PBankSqlDefine2;PBankSqlDefine3" /&gt;</pre>
 * 参数说明：<br>
 * transactionType：事务类型，TRX_REQUIRE_NEW，独有事务；TRX_REQUIRED，全局事务。<br>
 * dataSource：数据源服务定义名称。<br>
 * sqlService：SQL语句执行服务定义名称。<br>
 * refSQL：SQL语句定义名称，连续执行多个SQL时中间用分号隔开。
 * <p>
 * 返回状态：<br>
 * 0，正常；2，记录未找到；
 * 
 * @author ZhongMingChang
 * @author GaoLin 2006-10-30
 * @author LiJia 2007-11-15
 * @since 1.1 2003-11-10
 * @version 2.1
 * @lastmodified 2008-6-26
 * @see com.fbs.sdb.service.PBankSqlExecService
 * @see com.fbs.sdb.service.PBankSqlDefine
 * @emp:name 执行SQL语句
 * @emp:iconName /images/db_obj.gif
 * @emp:document 执行SQL语句的操作步骤，通过执行SQL语句服务（PBankSqlExecService），实现在一个事务中执行多条SQL语句的操作。
 * @emp:states 0=正常;2=记录未找到;
 */
public class PBankSqlExecAction extends EMPAction {

	/** 
	 * 数据源服务名称 
	 */
	private String dataSourceName = null;

	/**
	 * SQL语句执行服务名称
	 */
	private String sqlServiceName = null;

	/**
	 * 事务类型，默认为全局事务
	 */
	private int trxType = EMPTransactionDef.TRX_REQUIRED;

	/**
	 * SQL语句定义服务名称，连续执行多个SQL时中间用分号隔开 
	 */
	private String refSQL = null;

	/**
	 * 拆开后的SQL语句定义服务名称
	 */
	private List sqlDefineRef = null;
	
	private static Long MAXTIME=0L;

	/**
	 * 实例初始化方法。
	 * <p> 
	 * 将多个用分号相连的SQL语句定义服务名称拆成List。
	 */
	public void initialize() {
		this.sqlDefineRef = new ArrayList();

		if (refSQL != null && !"".equals(refSQL)) {

			java.util.StringTokenizer sqls = new StringTokenizer(this.refSQL,
					";");
			while (sqls.hasMoreTokens()) {
				String sqlDefineName = (String) sqls.nextElement();
				this.sqlDefineRef.add(sqlDefineName);
			}
		}
	}

	/**
	 * 业务逻辑步骤执行入口。
	 * <p>
	 * 调用PBankSqlExecService服务，执行已定义的SQL语句。
	 * 
	 * @param context 交易上下文
	 * @throws EMPException
	 * @return 返回值 0，正常；2，记录未找到
	 */
	public String execute(Context context) throws EMPException {
		long beginTime=System.currentTimeMillis();
		DataSource dataSource = null;
		PBankSqlExecService sqlService = null;
		Connection connection = null;
		
		if (dataSourceName != null && dataSourceName.length() != 0)
			dataSource = (DataSource) context.getService(dataSourceName);
		if (dataSource == null)
			throw new EMPException("dataSource named \"" + dataSourceName
					+ "\"is not found in JDBCSQLExecAction:" + this.toString());

		if (sqlServiceName != null && sqlServiceName.length() != 0)
			sqlService = (PBankSqlExecService) context.getService(sqlServiceName);
		if (sqlService == null)
			throw new EMPException(
					"JDBCSQLExecService not set for JDBCSQLAction:"
							+ this.toString());

		try {
			connection = ConnectionManager.getConnection(dataSource);
			for (int i = 0; i < sqlDefineRef.size(); i++) {
				String sqlId = (String) sqlDefineRef.get(i);

				PBankSqlDefine aDefine = (PBankSqlDefine) context.getService(sqlId);
				if (aDefine == null) {
					EMPLog.log(EMPConstance.EMP_JDBC, EMPLog.ERROR, 0,
							"JDBCSQLDefine [" + sqlId + "] not valid!");
					throw new EMPException("JDBCSQLDefine [" + sqlId
							+ "] not valid!");
				}

				sqlService.executeSQLDef(ReplacePBankBranch(context, context, aDefine), context, connection);

			}
			
			
//			EMPLog.log(EMPConstance.EMP_TIME_CONSUMING, EMPLog.INFO, 0, "The SQLService [" + refSQL + "],times= "+timeCost, null);
			
			return "0";
		} catch (RecordNotFoundException e) {
			return "2";
		} catch (EMPJDBCException je) {
			throw je;
		} catch (Exception e) {
			throw new EMPException(e);
		} finally {
			long etime = System.currentTimeMillis();
			long timeCost=etime-beginTime;
			EMPLog.log(EMPConstance.EMP_TIME_CONSUMING, EMPLog.INFO, 0, "The SQLService [" + refSQL + "],times= "+timeCost, null);
			setRunTime(context,beginTime,refSQL); //chenky add 统计时间
			
			if (connection != null)
				ConnectionManager.releaseConnection(dataSource, connection);
			long end = System.currentTimeMillis();
			EMPTimerRecorder.addThreadValue(EMPTimerRecorder.TYPE_DBACCESS, end-beginTime);
		}
	}

	/**
	 * 业务逻辑步骤执行入口。
	 * <p>
	 * 调用PBankSqlExecService服务，执行PBankSqlDefine。
	 * 
	 * @param context 交易上下文
	 * @throws EMPException
	 * @return 返回值 0，正常；2，记录未找到
	 */
	public static String execute(Context context, PBankSqlDefine sqlDefine) throws EMPException {
		long beginTime=System.currentTimeMillis();
		DataSource dataSource = null;
		PBankSqlExecService sqlService = null;
		Connection connection = null;

		if (sqlDefine == null) {
			EMPLog.log(EMPConstance.EMP_JDBC, EMPLog.ERROR, 0, "parameter PBankSqlDefine is null!");
			throw new EMPException("parameter PBankSqlDefine is null!");
		}
		
		dataSource = (DataSource) context.getService((String) context.getDataValue(SFConst.SERVICE_DATASOURCE));
		sqlService = (PBankSqlExecService) context.getService((String) context.getDataValue(SFConst.SERVICE_SQL));

		try {
			connection = ConnectionManager.getConnection(dataSource);
			sqlService.executeSQLDef(ReplacePBankBranch(context, context, sqlDefine), context, connection);
//			long timeCost=System.currentTimeMillis()-beginTime;
//			EMPLog.log(EMPConstance.EMP_TIME_CONSUMING, EMPLog.INFO, 0, "The SQLService [" + sqlDefine.getName() + "],times= "+timeCost, null);

			return "0";
		} catch (RecordNotFoundException e) {
			return "2";
		} catch (EMPJDBCException je) {
			throw je;
		} catch (Exception e) {
			throw new EMPException(e);
		} finally {
			long timeCost=System.currentTimeMillis()-beginTime;
			EMPLog.log(EMPConstance.EMP_TIME_CONSUMING, EMPLog.INFO, 0, "The SQLService [" + sqlDefine.getName() + "],times= "+timeCost, null);
			setRunTime(context,beginTime,sqlDefine.getName()); //chenky add 统计时间 
			
			if (connection != null)
				ConnectionManager.releaseConnection(dataSource, connection);
			long end = System.currentTimeMillis();
			EMPTimerRecorder.addThreadValue(EMPTimerRecorder.TYPE_DBACCESS, end-beginTime);
		}
	}
	
	/**
	 * 重载execute函数用于PBank扩展代码。
	 * <p>
	 * 调用PBankSqlExecService服务，执行已定义的SQL语句。
	 * 
	 * @param context 交易上下文
	 * @param tmpContext 交易临时上下文
	 * @throws EMPException
	 * @return 返回值 0，正常；2，记录未找到
	 */
	public String execute(Context context, Context tmpContext) throws EMPException {
		long beginTime=System.currentTimeMillis();
		DataSource dataSource = null;
		PBankSqlExecService sqlService = null;
		Connection connection = null;
		
		if (dataSourceName != null && dataSourceName.length() != 0)
			dataSource = (DataSource) context.getService(dataSourceName);
		if (dataSource == null)
			throw new EMPException("dataSource named \"" + dataSourceName
					+ "\"is not found in JDBCSQLExecAction:" + this.toString());

		if (sqlServiceName != null && sqlServiceName.length() != 0)
			sqlService = (PBankSqlExecService) context.getService(sqlServiceName);
		if (sqlService == null)
			throw new EMPException(
					"JDBCSQLExecService not set for JDBCSQLAction:"
							+ this.toString());

		try {
			connection = ConnectionManager.getConnection(dataSource);
			for (int i = 0; i < sqlDefineRef.size(); i++) {
				String sqlId = (String) sqlDefineRef.get(i);

				PBankSqlDefine aDefine = (PBankSqlDefine) context.getService(sqlId);
				if (aDefine == null) {
					EMPLog.log(EMPConstance.EMP_JDBC, EMPLog.ERROR, 0,
							"JDBCSQLDefine [" + sqlId + "] not valid!");
					throw new EMPException("JDBCSQLDefine [" + sqlId
							+ "] not valid!");
				}

				sqlService.executeSQLDef(ReplacePBankBranch(context, tmpContext, aDefine), tmpContext, connection);
				
				long end = System.currentTimeMillis();
				long timeCost=end-beginTime;
//				EMPLog.log(EMPConstance.EMP_TIME_CONSUMING, EMPLog.INFO, 0, "The SQLService [" + refSQL + "],times= "+timeCost, null);
			}

			return "0";
		} catch (RecordNotFoundException e) {
			return "2";
		} catch (EMPJDBCException je) {
			throw je;
		} catch (Exception e) {
			throw new EMPException(e);
		} finally {
			long timeCost=System.currentTimeMillis()-beginTime;
			EMPLog.log(EMPConstance.EMP_TIME_CONSUMING, EMPLog.INFO, 0, "The SQLService [" + refSQL + "],times= "+timeCost, null);
			setRunTime(context,beginTime,refSQL); //chenky add 统计时间 

			if (connection != null)
				ConnectionManager.releaseConnection(dataSource, connection);
			long end = System.currentTimeMillis();
			EMPTimerRecorder.addThreadValue(EMPTimerRecorder.TYPE_DBACCESS, end-beginTime);
		}
	}

	/**
	 * 重载execute函数用于PBank扩展代码。
	 * <p>
	 * 调用PBankSqlExecService服务，执行已定义的SQL语句。
	 * 
	 * @param context 交易上下文
	 * @param tmpContext 交易临时上下文
	 * @throws EMPException
	 * @return 返回值 0，正常；2，记录未找到
	 */
	public static String execute(Context context, Context tmpContext, PBankSqlDefine sqlDefine) throws EMPException {
		long beginTime=System.currentTimeMillis();
		DataSource dataSource = null;
		PBankSqlExecService sqlService = null;
		Connection connection = null;
		
		if (sqlDefine == null) {
			EMPLog.log(EMPConstance.EMP_JDBC, EMPLog.ERROR, 0, "parameter PBankSqlDefine is null!");
			throw new EMPException("parameter PBankSqlDefine is null!");
		}
		
		dataSource = (DataSource) context.getService((String) context.getDataValue(SFConst.SERVICE_DATASOURCE));
		sqlService = (PBankSqlExecService) context.getService((String) context.getDataValue(SFConst.SERVICE_SQL));

		try {
			connection = ConnectionManager.getConnection(dataSource);
			sqlService.executeSQLDef(ReplacePBankBranch(context, tmpContext, sqlDefine), tmpContext, connection);

//			long timeCost=System.currentTimeMillis()-beginTime;
//			EMPLog.log(EMPConstance.EMP_TIME_CONSUMING, EMPLog.INFO, 0, "The SQLService [" + sqlDefine.getName() + "],times= "+timeCost, null);

			return "0";
		} catch (RecordNotFoundException e) {
			return "2";
		} catch (EMPJDBCException je) {
			throw je;
		} catch (Exception e) {
			throw new EMPException(e);
		} finally {
			long timeCost=System.currentTimeMillis()-beginTime;
			EMPLog.log(EMPConstance.EMP_TIME_CONSUMING, EMPLog.INFO, 0, "The SQLService [" + sqlDefine.getName() + "],times= "+timeCost, null);
			setRunTime(context,beginTime,sqlDefine.getName()); //chenky add 统计时间
			
			if (connection != null)
				ConnectionManager.releaseConnection(dataSource, connection);
			long end = System.currentTimeMillis();
			EMPTimerRecorder.addThreadValue(EMPTimerRecorder.TYPE_DBACCESS, end-beginTime);
		}
	}

	/**
	 * 为了减少代码开发量，提高sql语句执行效率，实现网点下级及单证中心下属交易查询，对branch_no做替换
	 * <p>
	 * @param context 交易上下文
	 * @param tmpContext 交易上下文
	 * @param sqlDefine 原sqldefine
	 * @throws EMPException
	 * @return 返回值 PBankSqlDefine
	 */
	public static PBankSqlDefine ReplacePBankBranch(Context context, Context tmpContext, PBankSqlDefine sqlDefine) throws EMPException {
		
		if (sqlDefine.getSqlHint() != null && sqlDefine.getSqlHint().trim().length() > 0) {
			PBankExpressCalculate expCal = new PBankExpressCalculate();
			String hintStr = (String)expCal.execute(sqlDefine.getSqlHint(), tmpContext);
			
			//必须要返回一个新的SqlDefine，先创建一个
			PBankSqlDefine aNewSqlDefine = new PBankSqlDefine();
			aNewSqlDefine.setId(sqlDefine.getId());
			aNewSqlDefine.setAlias(sqlDefine.getAlias());
			aNewSqlDefine.setDesc(sqlDefine.getDesc());
			aNewSqlDefine.setErrorCode(sqlDefine.getErrorCode());
			aNewSqlDefine.setErrorMessage(sqlDefine.getErrorMessage());
			aNewSqlDefine.setICollName(sqlDefine.getICollName());
			aNewSqlDefine.setIsAppend(String.valueOf(sqlDefine.getIsAppend()));
			aNewSqlDefine.setLabel(sqlDefine.getLabel());
			aNewSqlDefine.setParaBind(sqlDefine.isParaBind());
			aNewSqlDefine.setMaxRecords(sqlDefine.getMaxRecords());
			aNewSqlDefine.setRowsBatchCommit(sqlDefine.getRowsBatchCommit());
			aNewSqlDefine.setName(sqlDefine.getName());
			aNewSqlDefine.setOutput((SQLParameterCollection)sqlDefine.getOutParamaters());
			aNewSqlDefine.setRowsDataName(sqlDefine.getRowsDataName());
			if (sqlDefine.getSqlType() == PBankSqlDefine.SQL_INSERT)
				aNewSqlDefine.setSqlType("INSERT");
			else if (sqlDefine.getSqlType() == PBankSqlDefine.SQL_SELECT)
				aNewSqlDefine.setSqlType("SELECT");
			else if (sqlDefine.getSqlType() == PBankSqlDefine.SQL_DELETE)
				aNewSqlDefine.setSqlType("DELETE");
			else if (sqlDefine.getSqlType() == PBankSqlDefine.SQL_UPDATE)
				aNewSqlDefine.setSqlType("UPDATE");

			aNewSqlDefine.setInput((SQLParameterCollection)sqlDefine.getInParamaters());
			String strSql = sqlDefine.getSQLStr();
			
			String[] tmpHintArray = hintStr.split(";");
			for (int i = 0; i < tmpHintArray.length; i++) {
				if (tmpHintArray[i].trim().length() < 1)
					continue;
				String[] tmpHint = tmpHintArray[i].split(":");
				if (tmpHint.length != 2 || tmpHint[0].trim().length() < 1 ||  tmpHint[1].trim().length() < 1)
					continue;
				
				strSql = SFUtil.replaceFirst(strSql, tmpHint[0], tmpHint[1]);
			}
			aNewSqlDefine.setSQLStr(strSql);
			
			sqlDefine = aNewSqlDefine;

			EMPLog.log(EMPConstance.EMP_TIME_CONSUMING, EMPLog.INFO, 0, "The Real Hint Sql Is:[" + strSql + "]");
		}
		
		/* 此处增加一个功能：对单个变量可进行替换，不进行绑定变量，比如使用IN的语句，绑定变量天生不支持，这种IN就可以支持了。
		 * 
		 * *
		 */
		SQLParameterCollection aInputParam = (SQLParameterCollection)sqlDefine.getInParamaters();
		if (aInputParam != null && aInputParam.size() > 0) {
			for (int k = 0; k < aInputParam.size(); k++) {
				SQLParameter theTmpSqlParam = (SQLParameter)aInputParam.get(k);
				if (!theTmpSqlParam.isParaBind()) {//表示最少有一个变量想替换成常量,进入括号开始工作
					//必须要返回一个新的SqlDefine，先创建一个
					PBankSqlDefine tmpSqlDefine = new PBankSqlDefine();
					tmpSqlDefine.setId(sqlDefine.getId());
					tmpSqlDefine.setAlias(sqlDefine.getAlias());
					tmpSqlDefine.setDesc(sqlDefine.getDesc());
					tmpSqlDefine.setErrorCode(sqlDefine.getErrorCode());
					tmpSqlDefine.setErrorMessage(sqlDefine.getErrorMessage());
					tmpSqlDefine.setICollName(sqlDefine.getICollName());
					tmpSqlDefine.setIsAppend(String.valueOf(sqlDefine.getIsAppend()));
					tmpSqlDefine.setLabel(sqlDefine.getLabel());
					tmpSqlDefine.setParaBind(sqlDefine.isParaBind());
					tmpSqlDefine.setMaxRecords(sqlDefine.getMaxRecords());
					tmpSqlDefine.setRowsBatchCommit(sqlDefine.getRowsBatchCommit());
					tmpSqlDefine.setName(sqlDefine.getName());
					tmpSqlDefine.setOutput((SQLParameterCollection)sqlDefine.getOutParamaters());
					tmpSqlDefine.setRowsDataName(sqlDefine.getRowsDataName());
					if (sqlDefine.getSqlType() == PBankSqlDefine.SQL_INSERT)
						tmpSqlDefine.setSqlType("INSERT");
					else if (sqlDefine.getSqlType() == PBankSqlDefine.SQL_SELECT)
						tmpSqlDefine.setSqlType("SELECT");
					else if (sqlDefine.getSqlType() == PBankSqlDefine.SQL_DELETE)
						tmpSqlDefine.setSqlType("DELETE");
					else if (sqlDefine.getSqlType() == PBankSqlDefine.SQL_UPDATE)
						tmpSqlDefine.setSqlType("UPDATE");

					String strSql = sqlDefine.getSQLStr();
					//每次进入创建一个新的inputParam
					SQLParameterCollection aNewInputParam = new SQLParameterCollection();
					SQLParameterCollection sqlInputParam = (SQLParameterCollection)sqlDefine.getInParamaters();
					int questionMarkCount = 0;
					for (int i = 0; i < sqlInputParam.size(); i++) {
						SQLParameter aNewSqlParam = new SQLParameter();
						SQLParameter aSqlParam = (SQLParameter)sqlInputParam.get(i);
						if (aSqlParam.isParaBind()) {
							questionMarkCount ++;

							aNewSqlParam.dataName = aSqlParam.dataName;
							aNewSqlParam.dataType = aSqlParam.dataType;
							aNewSqlParam.paramIdx = questionMarkCount;
							aNewSqlParam.trim = aSqlParam.trim;
							aNewInputParam.add(aNewSqlParam);
						}
						else {
							//替换那个问号
							int nPos = 0;
							for (int j=0; j < questionMarkCount; j++)
							{
								nPos = strSql.indexOf("?", nPos);
								if (nPos >= 0)
									nPos ++;
								else
									break;
								
							}
							if (nPos > 0) {
								//这个地方存在问题，因为涉及到sql的变更，所以我暂时只支持这样，只支持kcoll或者裸数据。
								//应该只支持select和一条记录的insert,update,delete。其它ICOLL的不支持。
								Object theDataValue = tmpContext.getDataValue(aSqlParam.dataName);
								strSql = strSql.substring(0, nPos) + SFUtil.replaceFirst(strSql.substring(nPos), "?", theDataValue.toString());
							}
						}
					}
					
					//终止循环，一次就够了
					tmpSqlDefine.setInput(aNewInputParam);
					tmpSqlDefine.setSQLStr(strSql);
					sqlDefine = tmpSqlDefine;
					break;
				}
			}
		}
		
		return sqlDefine;
	}

	/**
	 * 获得事务类型定义对象。
	 * 
	 * @return 事务类型定义对象
	 */
	public EMPTransactionDef getTransactionDef() {
		return new EMPTransactionDef(trxType);
	}

	/**
	 * 设置事务类型。
	 * 
	 * @param value 事务类型
	 * @emp:isAttribute true
	 * @emp:name 事务类型
	 * @emp:desc 选择该步骤是全局事务还是独有事务
	 * @emp:mustSet true
	 * @emp:valueList TRX_REQUIRED=应用全局事务;TRX_REQUIRE_NEW=创建独有事务;
	 * @emp:defaultValue TRX_REQUIRED 
	 */
	public void setTransactionType(String value) {
		if ("TRX_REQUIRED".equals(value))
			this.trxType = EMPTransactionDef.TRX_REQUIRED;
		else if ("TRX_REQUIRE_NEW".equals(value))
			this.trxType = EMPTransactionDef.TRX_REQUIRE_NEW;
	}

	/**
	 * 设置数据源服务定义名称。
	 * 
	 * @param dataSourceName 数据源服务定义名称
	 * @emp:isAttribute true
	 * @emp:name 数据源服务定义名称
	 * @emp:desc 所使用的数据源的定义名称
	 * @emp:mustSet true
	 * @emp:editClass com.ecc.ide.editor.service.ServicePropertyEditor
	 */
	public void setDataSource(String dataSourceName) {
		this.dataSourceName = dataSourceName;
	}

	/**
	 * 设置SQL语句执行服务定义名称。
	 * 
	 * @param sqlServiceName SQL语句执行服务定义名称
	 * @emp:isAttribute true
	 * @emp:name SQL语句执行服务定义名称
	 * @emp:desc 所使用的SQL语句执行服务定义名称
	 * @emp:mustSet true
	 * @emp:editClass com.ecc.ide.editor.service.ServicePropertyEditor
	 */
	public void setSqlService(String sqlServiceName) {
		this.sqlServiceName = sqlServiceName;
	}

	/**
	 * 设置SQL语句定义名称，可以顺序执行多个，用分号隔开。
	 * 
	 * @param refSQL SQL语句定义名称
	 * @emp:isAttribute true
	 * @emp:name SQL语句定义名称
	 * @emp:desc 需要执行的SQL语句定义服务名称，可以顺序执行多个，用分号隔开
	 * @emp:mustSet true
	 */
	public void setRefSQL(String refSQL) {
		this.refSQL = refSQL;
	}
	
	/**
	 * 转化日期格式
	 * @param time
	 * @return
	 */
	private static String getTime(long time){
		Timestamp stamp = new Timestamp(time);
		return stamp.toString();
	}
	
	private static void setRunTime(Context context,Long beginTime,String sqlName) throws EMPException{
		long etime = System.currentTimeMillis();
		long timeCost=etime-beginTime;
		if(context.containsKey("SQLTIME")){    //chenky add 统计时间
			String str = (String) context.getDataValue("SQLTIME");
			str += "The SQLService [" + sqlName + "],begin_Time:"+ getTime(beginTime)+",end_Time:"+ getTime(etime)+",times= "+timeCost + "\r\n";
			if(timeCost > MAXTIME){
				context.setDataValue("SQLTIME", str);
			}
		}
	}


}
