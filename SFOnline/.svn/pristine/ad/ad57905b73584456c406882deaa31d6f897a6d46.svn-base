package module.trans.secu2sf;

import java.math.BigDecimal;
import java.sql.Connection;
import java.util.HashMap;
import java.util.Map;

import module.bean.AcctJour;
import module.bean.AgtTranList;
import module.bean.BankCodeInfo;
import module.bean.LocalInfo;
import module.bean.ProductInfo;
import module.bean.SecCompData;
import module.bean.SignAccountData;
import module.cache.ProductInfoCache;
import module.dao.AcctDetailDao;
import module.dao.AcctJourDao;
import module.dao.AgtTranListDao;
import module.dao.BankCodeInfoDao;
import module.trans.TranBase;
import module.trans.sf2bankchl.ReverseClient;
import module.trans.sf2cobank.T810023Client;

import com.ecc.emp.core.Context;
import com.ecc.emp.data.IndexedCollection;
import com.ecc.emp.data.KeyedCollection;
import common.exception.SFException;
import common.sql.dao.DBHandler;
import common.util.AmtUtil;
import common.util.BizUtil;
import common.util.SFConst;
import common.util.SFUtil;

import core.log.SFLogger;

/**
 * A股券商端发起--银转证冲正
 * 
 * 银转证冲正流程:
 * 				  1.检查请求包有效性接收券商交易（<深>Trf.003.01/12003，<直>6043/612207）
 *  			  2.检查券商和客户资料
 *  			  3.检查原交易是否存在和状态
 *  			  4.置流水为异常,
 *                5.上主机冲正
 *                6.更新流水表,保证金余额
 *                7.返回券商（<深>Trf.004.01/12003，<直>6043/612207）
 * tran code :100202
 * @author 吕超鸿
 */

public class T100202 extends TranBase {

	private String subTxSeqId = null;// 16位服务平台流水号

	private String initSeqId = null;// 14位日志号(前置流水号)

	private String secSeqId = null;// 券商流水号

	private String chlSeqId = null; // 22位交易流水号

	private String txDate = null;// 交易日期

	private String secCompCode = null;// 券商代码

	private String curCode = SFConst.CUR_CODE_RMB;// 币种

	private BigDecimal acctBal = new BigDecimal( 0.00 );// 余额

	private BigDecimal txAmount = new BigDecimal( 0.00 );// 交易金额

	private String orgTxSeqId = null;// 原交易流水号

	private String invType = null;// 客户类型

	private String invIdCode = null;// 客户证件号码

	private String userId = null;// 客户编号

	private String overDraftFlag = null;// 是否允许透支

	private String openDate = null;// 开户日期

	private String secutype = null;// 券商类型

	private String acctId = null;// 银行帐号

	private String capAcct = null;// 资金帐号

	private String secAcct = null;// 保证金管理帐号

	private String initSide = null;// 渠道

	private String jourFlag = null;// 流水标识

	private String signFlag = null;// 签约标识

	private boolean succResFlag = false;// 正确流程特殊返回标识

	private String cashRemitFlag = null;// 钞汇标识

	private SecCompData secCompData = null;// 券商信息

	private SignAccountData signAccountData = null;// 签约信息

	private AcctJour oldAcctJour = null;// 旧流水信息

	private AgtTranListDao agtTranListDao = new AgtTranListDao();

	private AcctJourDao acctJourDao = new AcctJourDao();

	@Override
	protected void initialize( Context context ) throws SFException {

		KeyedCollection kColl = null;
		KeyedCollection scAcctKcoll = null;
		KeyedCollection acctSvcrKcoll = null;
		try {
			initSeqId = SFUtil.getDataValue( context, SFConst.PUBLIC_LOG_ID );// 14位前置流水号
			subTxSeqId = BizUtil.getSubTxSeqId( initSeqId );// 16位服务平台流水号
			chlSeqId = BizUtil.getChlSeqId( context, subTxSeqId ); // 获取22位流水号;

			// 先以直连方式获取，取不到以深证通方式获取券商代码
			secCompCode = SFUtil.getReqDataValue( context, "SEC_COMP_CODE" );
			if( SFUtil.isEmpty( secCompCode ) ) {
				kColl = SFUtil.getDataElement( context, "Trf00301" );
				scAcctKcoll = SFUtil.getDataElement( context, kColl, "ScAcct" );
				acctSvcrKcoll = SFUtil.getDataElement( context, scAcctKcoll, "AcctSvcr" );
				if( null != acctSvcrKcoll ) {
					secCompCode = SFUtil.getDataValue( context, acctSvcrKcoll, "SEC_COMP_CODE" );// 券商编号
				}
			}
			SFUtil.chkCond( context, SFUtil.isEmpty( secCompCode ), "ST4805", String.format( "此券商信息不存在" ) );
			secCompData = secCompDataDao.qrySecCompData( context, tranConnection, secCompCode );
			SFUtil.chkCond( context, ( null == secCompData ), "ST4805", String.format( "此券商信息不存在" ) );

			SFUtil.setDataValue( context, SFConst.PUBLIC_SECU_TYPE, secCompData.getSztFlag() );// 将券商类型放入上下文中
			SFUtil.setDataValue( context, SFConst.PUBLIC_SECU, secCompData );

			// 先以直连方式获取，取不到以深证通方式获取资金帐号
			capAcct = SFUtil.getReqDataValue( context, "CAP_ACCT" );
			if( SFUtil.isEmpty( capAcct ) ) {
				capAcct = SFUtil.getDataValue( context, scAcctKcoll, "CAP_ACCT" );
			}
			SFUtil.chkCond( context, SFUtil.isEmpty( capAcct ), "ST4805", String.format( "资金账号不存在" ) );

			signAccountData = signAccountDataDao.qrySignAccountData( context, tranConnection, capAcct, secCompCode, false );
			SFUtil.chkCond( context, ( null == signAccountData ), "ST4785", String.format( "签约信息不存在" ) );

			SFUtil.setDataValue( context, SFConst.PUBLIC_SECU_TYPE, secCompData.getSztFlag() );// 将券商类型放入上下文中
			SFUtil.setDataValue( context, SFConst.PUBLIC_SECU, secCompData );// 将券商放入上下文中
			SFUtil.setDataValue( context, SFConst.PUBLIC_SIGN_ACCOUNT_DATA, signAccountData );// 将签约信息型放入上下文中

			// 券商类型
			secutype = SFUtil.getDataValue( context, SFConst.PUBLIC_SECU_TYPE );
			SFUtil.chkCond( context, SFUtil.isEmpty( secutype ), "ST5701", String.format( "券商类型不能为空" ) );

			if( SFConst.SECU_SZT.equals( secutype ) ) { // 深证通模式
				KeyedCollection msgHdrKcoll = SFUtil.getDataElement( context, "MsgHdr" );
				KeyedCollection refKcoll = SFUtil.getDataElement( context, msgHdrKcoll, "Ref" );
				secSeqId = SFUtil.getDataValue( context, refKcoll, "Ref" );// 券商流水号

				KeyedCollection custKcoll = SFUtil.getDataElement( context, kColl, "Cust" );
				invType = SFUtil.getDataValue( context, custKcoll, "INV_TYPE_SZT" );

				KeyedCollection BkAcctKcoll = SFUtil.getDataElement( context, kColl, "BkAcct" );
				acctId = SFUtil.getDataValue( context, BkAcctKcoll, "ACCT_ID" );

				curCode = SFUtil.getDataValue( context, kColl, "CUR_CODE" );// 币种
				txAmount = new BigDecimal( SFUtil.objectToString( SFUtil.getDataValue( context, kColl, "TX_AMOUNT" ) ) );// 金额

				KeyedCollection cnRefKcoll = SFUtil.getDataElement( context, kColl, "CnRef" );

				// 原交易流水号
				orgTxSeqId = BizUtil.getTxSeqId( SFUtil.objectToString( SFUtil.getDataValue( context, cnRefKcoll, "ORG_TX_SEQ_ID" ) ).trim() );

				// 转换客户类型为 1：个人 2：机构
				invType = BizUtil.convSZT2SFInvType( context, invType );

				// 设置默认币种
				curCode = SFUtil.isEmpty( curCode ) ? SFConst.CUR_CODE_RMB : curCode;// 币种

				// 组装券商通用上下文
				KeyedCollection keyColl = new KeyedCollection( "100202_I" );
				SFUtil.addDataField( context, keyColl, "ACCT_ID", acctId );// 发展卡卡号/对公账号
				SFUtil.addDataField( context, keyColl, "SEC_COMP_CODE", secCompCode );// 券商代码
				SFUtil.addDataField( context, keyColl, "CAP_ACCT", capAcct );// 券商代码
				SFUtil.addDataField( context, keyColl, "CUR_CODE", curCode );// 交易币种
				SFUtil.addDataField( context, keyColl, "TX_AMOUNT", String.valueOf( txAmount ) );// 交易金额
				SFUtil.addDataField( context, keyColl, "ID_TYPE", SFUtil.getDataValue( context, custKcoll, "ID_TYPE_SZT" ) );// 证件类型
				SFUtil.addDataField( context, keyColl, "INV_TYPE", invType );// 客户类型
				SFUtil.addDataField( context, keyColl, "INV_NAME", SFUtil.getDataValue( context, custKcoll, "INV_NAME" ) );// 客户名称
				SFUtil.addDataField( context, keyColl, "INV_ID_CODE", SFUtil.getDataValue( context, custKcoll, "INV_ID_CODE" ) );// 客户类型
				SFUtil.addDataElement( context, keyColl );

			} else {// 直联模式
				secSeqId = SFUtil.getReqDataValue( context, "SEC_SEQ_ID" ); // 券商流水号
				curCode = SFUtil.getReqDataValue( context, "CUR_CODE" ); // 币种
				secCompCode = SFUtil.getReqDataValue( context, "SEC_COMP_CODE" ); // 券商代码
				invType = SFUtil.getReqDataValue( context, "INV_TYPE" ); // 客户类型
				cashRemitFlag = SFUtil.getReqDataValue( context, "CASH_REMIT_FLAG" );// 钞汇标识
				txAmount = new BigDecimal( SFUtil.objectToString( AmtUtil.conv2SecuDivAmount( context, SFUtil.getReqDataValue( context, "TX_AMOUNT" ) ) ) );// 直联金额不带小数点
				acctId = SFUtil.getReqDataValue( context, "ACCT_ID" );
				secAcct = SFUtil.getReqDataValue( context, "SEC_ACCT" );
				capAcct = SFUtil.getReqDataValue( context, "CAP_ACCT" );
				orgTxSeqId = SFUtil.objectToString( SFUtil.getReqDataValue( context, "SUB_TX_SEQ_ID" ) ).trim();// 生成发起方流水号

				// 组装券商通用上下文
				KeyedCollection keyColl = SFUtil.getDataElement( context, "100202_I" );
				SFUtil.addDataField( context, keyColl, "ID_TYPE", SFUtil.getReqDataValue( context, "ID_TYPE_ZL" ) );
			}

			// 如果钞汇标识为空,则默认为钞
			cashRemitFlag = SFUtil.isEmpty( cashRemitFlag ) ? SFConst.CASH_FLAG : cashRemitFlag;
			SFUtil.chkCond( context, ( !SFConst.CASH_FLAG.equals( cashRemitFlag ) && !SFConst.REMIT_FLAG.equals( cashRemitFlag ) ), "ST5717", String.format( "钞汇标识非法[%s]", cashRemitFlag ) );

		} catch( SFException e ) {
			throw e;
		} catch( Exception e ) {
			SFUtil.chkCond( context, "ST4895", e.getMessage() );
		}
	}

	@Override
	public void doHandle( Context context ) throws SFException {

		// 已经冲正成功直接返回券商成功
		if( succResFlag ) {
			return;
		}

		// 原交易成功时，需减少保证金余额,流水置成冲正流水,原交易成功时 更新转账交易明细
		addPublicInfo( context );

		// 上主机银转证冲正
		doHost( context );

		// 组包返回券商
		doSecu( context );
	}

	public void addPublicInfo( Context context ) throws SFException {
		SFLogger.info( context, "addPublicInfo()开始" );

		try {
			DBHandler.beginTransaction( context, tranConnection );// 开启事务

			// 原交易成功时，需减少保证金余额
			if( "00".equals( jourFlag ) ) {
				updSignAccountData( context, tranConnection, SFUtil.sub( acctBal, txAmount ) );
			}

			// 将此笔交易流水置成冲正流水
			updAcctJourJourFlag( context, "44" );

			// 原交易成功时 更新转账交易明细
			updAcctDetail( context, "44" );

			DBHandler.commitTransaction( context, tranConnection );// 提交事务

		} catch( SFException e ) {
			throw e;
		} catch( Exception e ) {
			SFUtil.chkCond( context, "ST4895", e.getMessage() );
		}
		SFLogger.info( context, "addPublicInfo()结束" );
	}

	@Override
	public void doHost( Context context ) throws SFException {
		SFLogger.info( context, "doHost()开始" );
		try {

			if( "A".equals( initSide ) ) {
				SFLogger.info( context, "发送合作行冲正交易开始" );

				// 合作行客户银转证冲正
				doCoBankReverse( context );

				SFLogger.info( context, "发送合作行冲正交易结束" );

			} else {
				SFLogger.info( context, "发送主机冲正交易开始" );

				// 我行客户银转证冲正
				doHostReverse( context );

				SFLogger.info( context, "发送主机冲正交易结束" );
			}

			// 已经冲正成功直接返回券商成功
			if( succResFlag ) {
				return;
			}

			// 上主机后银转证冲正数据库更新操作
			updPublicInfo( context );

		} catch( SFException e ) {
			throw e;
		} catch( Exception e ) {
			SFUtil.chkCond( context, "ST4895", e.getMessage() );
		}
		SFLogger.info( context, "doHost()结束" );
	}

	/**
	 * 合作行客户银转证冲正
	 * 调用612388转发合作行冲正[金融交易的抹账交易812388]
	 * @param context
	 * @throws SFException
	 */
	private void doCoBankReverse( Context context ) throws SFException {
		SFLogger.info( context, "doCoBankReverse()开始" );
		String retFlag = null;
		String respCode = null;
		String respMsg = null;
		try {
			AgtTranList agtTranList = agtTranListDao.qryAgtTranListByBankId( context, tranConnection, "MS999", oldAcctJour.getPreSeqId() );
			SFUtil.chkCond( context, null == agtTranList, "", String.format( "查询合作行银行行号失败" ) );
			String bankNo = agtTranList.getBankId();// 合作行编号

			// 证转银交易不允许冲正,返回冲正失败
			SFUtil.chkCond( context, ( "1".equals( agtTranList.getTranType() ) ), "", String.format( "原交易流水[%s]证转银交易不允许冲正", orgTxSeqId ) );

			// 其他交易得看情况，如果是不明确情况宁愿多上主机冲
			if( "1".equals( agtTranList.getVoidFlag() ) ) {
				// 已经冲正过,直接返回冲正成功
				SFLogger.info( context, String.format( "原二级系统交易流水[%s]已经冲正过,直接返回冲正成功", orgTxSeqId ) );
				// 置成功状态字
				succResFlag = true;
				return;
			}
			DBHandler.beginTransaction( context, tranConnection );// 开启事务

			// 先把冲正标志设为冲正不成功
			agtTranList.setVoidFlag( "E" );

			// 跨会计日不能进行冲正
			if( !txDate.equals( agtTranList.getHostDate() ) ) {
				// 更新冲正失败标志
				updAgtTranList( context, tranConnection, agtTranList );
				DBHandler.commitTransaction( context, tranConnection );// 提交事务
			}

			// 添加抹帐交易的流水号为现在的第三方存管流水号
			agtTranList.setBackLogNo( initSeqId );

			// 更新冲正失败标志
			updAgtTranList( context, tranConnection, agtTranList );
			DBHandler.commitTransaction( context, tranConnection );// 提交事务

			SFLogger.info( context, "合作行客户上主机G1010冲正交易开始" );

			/**
			 * G1010上主机银证冲正
			 */
			doHostReverse( context );

			retFlag = SFUtil.getDataValue( context, SFConst.PUBLIC_RET_FLAG );// 重新获取返回码
			respCode = SFUtil.getDataValue( context, "RESP_CODE" );// 响应码
			respMsg = SFUtil.getDataValue( context, "RES_MSG" );
			SFUtil.chkCond( context, !SFConst.RET_SUCCESS.equals( retFlag ), "ST4527", String.format( "上主机冲正失败[%s]", respMsg ) );

			SFLogger.info( context, "合作行客户上主机G1010冲正交易结束" );

			// 添加冲正主机返回码
			if( "000000".equals( respCode ) || "AE0003".equals( respCode ) || "AE0002".equals( respCode ) ) {

				DBHandler.beginTransaction( context, tranConnection );// 开启事务

				// 跨会计日不能进行冲正
				if( !txDate.equals( agtTranList.getHostDate() ) ) {
					// 更新冲正失败标志
					agtTranList.setTranResult( respCode );
					updAgtTranList( context, tranConnection, agtTranList );
					DBHandler.commitTransaction( context, tranConnection );// 提交事务
					SFUtil.chkCond( context, "ST4527", String.format( "抹帐失败,跨会计日不能进行冲正[%s]", respMsg ) );
				}

				// 合作行发起冲正请求到联网行注意第三方冲正先设置冲正标志为第三方冲正失败
				agtTranList.setVoidFlag( "W" );
				// 更新冲正失败标志
				agtTranList.setTranResult( respCode );
				updAgtTranList( context, tranConnection, agtTranList );
				DBHandler.commitTransaction( context, tranConnection );// 提交事务

				SFLogger.info( context, "合作行客户上合作行712323冲正交易开始" );

				/**
				 * 调用去合作行712323资金冲正交易
				 */
				Map<String, Object> msg = new HashMap<String, Object>();
				msg.put( "PICS_LOG_NO", agtTranList.getAgentLogNo() );// 原平台流水号serial_no
				T810023Client reverseClient = new T810023Client();
				Context msgContext = reverseClient.send( context, msg, bankNo );

				retFlag = SFUtil.getDataValue( msgContext, SFConst.PUBLIC_RET_FLAG );// 获取返回值
				respCode = SFUtil.getDataValue( msgContext, SFConst.CTX_ERRCODE );// 响应码
				respMsg = SFUtil.getDataValue( msgContext, SFConst.CTX_ERRMSG );// 响应信息

				SFLogger.info( context, "合作行客户上合作行712323冲正交易结束" );

				DBHandler.beginTransaction( context, tranConnection );// 开启事务
				if( !SFConst.RET_SUCCESS.equals( retFlag ) ) {
					// 添加冲正合作行返回码
					agtTranList.setBackResult( respCode );
					// 更新冲正失败标志
					updAgtTranList( context, tranConnection, agtTranList );
					DBHandler.commitTransaction( context, tranConnection );// 提交事务
					SFUtil.chkCond( context, "ST4527", String.format( "抹帐失败,跨会计日不能进行冲正[%s]", respMsg ) );
				}
				agtTranList.setVoidFlag( "1" );
				// 更新冲正冲正标志
				agtTranList.setTranResult( respCode );
				updAgtTranList( context, tranConnection, agtTranList );
				DBHandler.commitTransaction( context, tranConnection );// 提交事务
			}

		} catch( SFException e ) {
			throw e;
		} catch( Exception e ) {
			SFUtil.chkCond( context, "ST4895", e.getMessage() );
		}
		SFLogger.info( context, "doCoBankReverse()结束" );
	}

	/**
	 * 
	 * 我行客户上主机 G1010 冲正
	 * @param context
	 * @throws SFException
	 */
	private void doHostReverse( Context context ) throws SFException {
		SFLogger.info( context, "doHostReverse()开始" );

		Map<String, Object> msg = null;
		String retCode = null;
		String retMsg = null;
		String retFlag = null;

		try {

			// 联机通用冲销:G1010 构建请求报文
			msg = new HashMap<String, Object>();
			msg.put( "BIZ_SEQ_NO", chlSeqId );// 业务流水号
			msg.put( "CONSUMER_SEQ_NO", chlSeqId );// 交易流水号
			msg.put( "OLD_BUSS_SEQ_NO", oldAcctJour.getBusiSeqId() );// 原业务流水号OLD_BUSS_SEQ_NO
			msg.put( "OLD_TRAN_SEQ_NO", oldAcctJour.getTranSeqId() );// 原交易流水号OLD_TRAN_SEQ_NO
			msg.put( "REASON", "券商端银转证冲正" );// 原因REASON
			msg.put( "FLAG", "0" );// 冲正标志

			ReverseClient reverseClient = new ReverseClient();
			Context msgContext = reverseClient.send( context, msg );
			retFlag = SFUtil.getDataValue( msgContext, SFConst.PUBLIC_RET_FLAG );

			IndexedCollection iColl = SFUtil.getDataElement( msgContext, "RET" );
			KeyedCollection kColl = ( KeyedCollection )iColl.getElementAt( 0 );// 获取响应数组
			retCode = SFUtil.getDataValue( msgContext, kColl, "RET_CODE" );// 返回码
			retMsg = SFUtil.getDataValue( msgContext, kColl, "RET_MSG" );// 响应信息

			SFUtil.addDataField( context, SFConst.PUBLIC_RET_FLAG, retFlag );
			SFUtil.addDataField( context, "RESP_CODE", retCode );
			SFUtil.addDataField( context, "RESP_MSG", retMsg );

			SFLogger.info( context, String.format( "发送主机冲正交易结束，返回结果：ret[%s],respCode[%s],respMsg[%s]", retFlag, retCode, retMsg ) );

		} catch( SFException e ) {
			throw e;
		} catch( Exception e ) {
			SFUtil.chkCond( context, "ST4895", e.getMessage() );
		}
		SFLogger.info( context, "doHostReverse()结束" );
	}

	/**
	 * 
	 * 上主机后更新数据库操作
	 * @param context
	 * @throws SFException
	 */
	public void updPublicInfo( Context context ) throws SFException {
		SFLogger.info( context, "券商端发起银转证冲正纪录数据库updPublicInfo() 开始" );
		String retCode = null;
		String retMsg = null;
		String retFlag = null;

		try {
			// 重新获取返回码
			retFlag = SFUtil.getDataValue( context, SFConst.PUBLIC_RET_FLAG );

			// 重新获取响应码&响应信息
			retCode = SFUtil.getDataValue( context, "RES_CODE" );
			retCode = SFUtil.getDataValue( context, "RES_MSG" );
			if( SFConst.RET_SUCCESS.equals( retFlag ) ) {// 交易成功

				// 更新 TRDAcctJour 冲正成功标志
				if( SFUtil.isNotEmpty( jourFlag ) && "00".equals( jourFlag ) ) {
					SFLogger.info( context, "更新 TRDACCTJOUR 冲正成功标志开始" );
					DBHandler.beginTransaction( context, tranConnection );// 开始事务

					oldAcctJour.setJourFlag( "44" );
					oldAcctJour.setRespCode( "000000" );
					oldAcctJour.setRespMsg( "银转证冲正成功" );
					acctJourDao.saveAcctJour( context, tranConnection, oldAcctJour );

					DBHandler.commitTransaction( context, tranConnection );// 开始事务
					SFLogger.info( context, "更新 TRDACCTJOUR 冲正成功标志开始" );
				}
			} else { // 交易失败、超时、异常
				BankCodeInfoDao bankCodeInfoDao = new BankCodeInfoDao();
				BankCodeInfo bankCodeInfo = bankCodeInfoDao.qryBankCodeInfo( context, tranConnection, retCode );
				if( bankCodeInfo != null ) {
					retMsg = bankCodeInfo.getMsg();
				} else {
					SFLogger.info( context, "数据库中未保存此主机错误码,请增加" );
				}

				// 更新 TRDAcctJour 冲正失败标志
				SFLogger.info( context, "更新 TRDACCTJOUR 冲正失败标志开始" );
				DBHandler.beginTransaction( context, tranConnection );// 开始事务

				oldAcctJour.setJourFlag( "00" );
				oldAcctJour.setRespCode( retCode );
				oldAcctJour.setRespMsg( "银转证冲正失败:" + retMsg );
				acctJourDao.saveAcctJour( context, tranConnection, oldAcctJour );
				SFLogger.info( context, "更新 TRDACCTJOUR 冲正失败标志结束" );

				if( SFUtil.isNotEmpty( jourFlag ) && "00".equals( jourFlag ) ) {

					// 更新转账交易明细
					SFLogger.info( context, "更新转账交易明细开始" );

					updAcctDetail( context, "00" );

					SFLogger.info( context, "更新转账交易明细结束" );

					// 更新签约账户余额信息
					updSignAccountData( context, tranConnection, SFUtil.add( acctBal, txAmount ) );
				}
				DBHandler.commitTransaction( context, tranConnection );// 开始事务
			}
		} catch( SFException e ) {
			throw e;
		} catch( Exception e ) {
			SFUtil.chkCond( context, "ST4895", e.getMessage() );
		}
		SFLogger.info( context, "券商端发起银转证冲正纪录数据库updPublicInfo() 结束" );
	}

	/**
	 * 更新流水状态标识
	 * @param context
	 * @return
	 * @throws SFException
	 */
	private void updAcctJourJourFlag( Context context, String jourFlag ) throws SFException {
		SFLogger.info( context, "将此笔交易流水置成冲正流水开始" );
		try {
			String txSeqId = BizUtil.getTxSeqId( secSeqId.trim() );
			acctJourDao.updAcctJourByReverseJourFlag( context, tranConnection, txSeqId, jourFlag, txDate, userId, orgTxSeqId );
		} catch( SFException e ) {
			throw e;
		} catch( Exception e ) {
			SFUtil.chkCond( context, "ST4895", String.format( "updAcctJourJourFlag()失败%s", e.getMessage() ) );
		}
		SFLogger.info( context, "将此笔交易流水置成冲正流水结束" );
	}

	/**
	 * 
	 *
	 * 更新账户管理交易明细
	 * @param context
	 * @return
	 * @throws SFException
	 */
	private void updAcctDetail( Context context, String jourFlag ) throws SFException {
		SFLogger.info( context, "更新转账交易明细开始" );
		try {
			AcctDetailDao acctDetailDao = new AcctDetailDao();
			acctDetailDao.updAcctDetailByReverseJourFlag( context, tranConnection, jourFlag, txDate, userId, orgTxSeqId );
		} catch( SFException e ) {
			throw e;
		} catch( Exception e ) {
			SFUtil.chkCond( context, "ST4895", String.format( "updAcctAdmDetail()失败%s", e.getMessage() ) );
		}
		SFLogger.info( context, "更新转账交易明细结束" );
	}

	/**
	 * 
	 * 更新签约表中余额
	 * @param context
	 * @param connection
	 * @param acctBal
	 * @throws SFException
	 */
	private void updSignAccountData( Context context, Connection connection, double acctBal ) throws SFException {
		SFLogger.info( context, "updSignAccountData()开始" );

		try {
			// 查询TRDSignAccountData锁定记录
			SignAccountData signAccountData = signAccountDataDao.signAccountDataLock( context, tranConnection, secCompCode, capAcct );
			SFUtil.chkCond( context, ( null == signAccountData ), "ST4440", "客户签约账号信息锁表失败!" );

			signAccountData.setSecCompCode( secCompCode );// 券商代码
			signAccountData.setCurCode( curCode );// 币种
			signAccountData.setCapAcct( capAcct );// 券商端资金台账号
			signAccountData.setProductType( "03" );
			signAccountData.setAcctBal( new BigDecimal( SFUtil.objectToString( acctBal ) ) );
			signAccountDataDao.saveSignAccountData( context, connection, signAccountData );

		} catch( SFException e ) {
			throw e;
		} catch( Exception e ) {
			SFUtil.chkCond( context, "ST4895", e.getMessage() );
		}
		SFLogger.info( context, "updSignAccountData()结束" );
	}

	private void updAgtTranList( Context context, Connection connection, AgtTranList agtTranList ) throws SFException {
		SFLogger.info( context, "updAgtTranList()开始" );

		try {
			agtTranListDao.saveAgtTranList( context, connection, agtTranList );
		} catch( SFException e ) {
			throw e;
		} catch( Exception e ) {
			SFUtil.chkCond( context, "ST4895", e.getMessage() );
		}
		SFLogger.info( context, "updAgtTranList()结束" );
	}

	@Override
	public void doSecu( Context context ) throws SFException {
		SFLogger.info( context, "doSecu()开始" );
		try {
			
			// 深证通
			if( SFConst.SECU_SZT.equals( SFUtil.getDataValue( context, SFConst.PUBLIC_SECU_TYPE ) ) ) {

				KeyedCollection kColl = SFUtil.getDataElement( context, "Trf00401" );

				KeyedCollection refKcoll = SFUtil.getDataElement( context, kColl, "Ref" );
				SFUtil.setDataValue( context, refKcoll, "SUB_TX_SEQ_ID", subTxSeqId );

				KeyedCollection rltdRefKcoll = SFUtil.getDataElement( context, kColl, "RltdRef" );
				SFUtil.setDataValue( context, rltdRefKcoll, "SEC_SEQ_ID", secSeqId );

				KeyedCollection cnRefKcoll = SFUtil.getDataElement( context, kColl, "CnRef" );
				SFUtil.setDataValue( context, cnRefKcoll, "ORG_TX_SEQ_ID", orgTxSeqId );

				KeyedCollection scAcctKcoll = SFUtil.getDataElement( context, kColl, "ScAcct" );
				KeyedCollection acctSvcrKcoll = SFUtil.getDataElement( context, scAcctKcoll, "AcctSvcr" );

				SFUtil.setDataValue( context, acctSvcrKcoll, "SEC_COMP_CODE", secCompCode );
				SFUtil.setDataValue( context, scAcctKcoll, "CAP_ACCT", capAcct );

				KeyedCollection pwdKcoll = SFUtil.getDataElement( context, scAcctKcoll, "Pwd" );
				SFUtil.setDataValue( context, pwdKcoll, "CAP_ACCT_PWD", "" );
				SFUtil.setDataValue( context, kColl, "CUR_CODE", curCode );
				SFUtil.setDataValue( context, kColl, "TX_AMOUNT", String.valueOf( txAmount ) );

			} else if( SFConst.SECU_ZL.equals( SFUtil.getDataValue( context, SFConst.PUBLIC_SECU_TYPE ) ) ) {

				SFUtil.setResDataValue( context, "SEC_SEQ_ID", secSeqId );
				SFUtil.setResDataValue( context, "SUB_TX_SEQ_ID", orgTxSeqId );
				SFUtil.setResDataValue( context, "ACCT_ID", acctId );
				SFUtil.setResDataValue( context, "SEC_ACCT", secAcct );
				SFUtil.setResDataValue( context, "CAP_ACCT", capAcct );
				SFUtil.setResDataValue( context, "CUR_CODE", curCode );
				SFUtil.setResDataValue( context, "CASH_REMIT_FLAG", cashRemitFlag );
				SFUtil.setResDataValue( context, "TX_AMOUNT", String.valueOf( AmtUtil.conv2SecuMulAmount( context, txAmount ) ) );
				SFUtil.setResDataValue( context, "NEW_SUB_TX_SEQ_ID", subTxSeqId );

			}

		} catch( SFException e ) {
			throw e;
		} catch( Exception e ) {
			SFUtil.chkCond( context, "ST4895", e.getMessage() );
		}
		SFLogger.info( context, "doSecu()结束" );
	}

	@Override
	protected void chkStart( Context context ) throws SFException {
		try {
			// 转换前客户证件类型
			String idType = SFUtil.getReqDataValue( context, "ID_TYPE" );
			String invName = SFUtil.getReqDataValue( context, "INV_NAME" );
			invIdCode = SFUtil.getReqDataValue( context, "INV_ID_CODE" );

			// 先预定义返回报文-交易异常退出时返回
			if( SFConst.SECU_ZL.equals( secutype ) ) {// 直连模式
				KeyedCollection keyColl = SFUtil.getDataElement( context, "100202_O" );
				SFUtil.setDataValue( context, keyColl, "CUR_CODE", curCode );// 币种
				SFUtil.setDataValue( context, keyColl, "SEC_COMP_CODE", secCompCode );// 券商代码
				SFUtil.setDataValue( context, keyColl, "CAP_ACCT", capAcct );
				SFUtil.setDataValue( context, keyColl, "ACCT_ID", acctId );
				SFUtil.setDataValue( context, keyColl, "SEC_ACCT", secAcct );
				SFUtil.setDataValue( context, keyColl, "SUB_TX_SEQ_ID", orgTxSeqId );
				SFUtil.setDataValue( context, keyColl, "NEW_SUB_TX_SEQ_ID", subTxSeqId );
				SFUtil.setDataValue( context, keyColl, "SEC_SEQ_ID", secSeqId );
				SFUtil.setDataValue( context, keyColl, "TX_AMOUNT", String.valueOf( AmtUtil.conv2SecuMulAmount( context, txAmount ) ) );

			}
			// 深证通模式
			if( SFConst.SECU_SZT.equals( secutype ) ) {

				KeyedCollection kColl = SFUtil.getDataElement( context, "Trf00401" );

				KeyedCollection refKcoll = SFUtil.getDataElement( context, kColl, "Ref" );
				SFUtil.setDataValue( context, refKcoll, "SUB_TX_SEQ_ID", subTxSeqId );

				KeyedCollection rltdRefKcoll = SFUtil.getDataElement( context, kColl, "RltdRef" );
				SFUtil.setDataValue( context, rltdRefKcoll, "SEC_SEQ_ID", secSeqId );

				KeyedCollection cnRefKcoll = SFUtil.getDataElement( context, kColl, "CnRef" );
				SFUtil.setDataValue( context, cnRefKcoll, "ORG_TX_SEQ_ID", orgTxSeqId );

				KeyedCollection scAcctKcoll = SFUtil.getDataElement( context, kColl, "ScAcct" );
				KeyedCollection acctSvcrKcoll = SFUtil.getDataElement( context, scAcctKcoll, "AcctSvcr" );

				SFUtil.setDataValue( context, acctSvcrKcoll, "SEC_COMP_CODE", secCompCode );
				SFUtil.setDataValue( context, scAcctKcoll, "CAP_ACCT", capAcct );

				KeyedCollection pwdKcoll = SFUtil.getDataElement( context, scAcctKcoll, "Pwd" );
				SFUtil.setDataValue( context, pwdKcoll, "CAP_ACCT_PWD", "" );
				SFUtil.setDataValue( context, kColl, "CUR_CODE", curCode );
				SFUtil.setDataValue( context, kColl, "TX_AMOUNT", String.valueOf( txAmount ) );
			}

			// 检查关键字段是否为空
			SFUtil.chkCond( context, ( SFUtil.isEmpty( orgTxSeqId ) ), "ST4479", String.format( "冲正原交易流水不能为空" ) );
			SFUtil.chkCond( context, ( SFUtil.isEmpty( secCompCode ) ), "ST4496", String.format( "券商编号不能为空" ) );
			SFUtil.chkCond( context, ( SFUtil.isEmpty( capAcct ) ), "ST4388", String.format( "券商端客户资金台账号不能为空" ) );
			SFUtil.chkCond( context, ( SFUtil.isEmpty( idType ) ), "ST4385", String.format( "证件类型不能为空" ) );
			SFUtil.chkCond( context, ( SFUtil.isEmpty( invIdCode ) ), "ST4386", String.format( "证件号码不能为空" ) );
			SFUtil.chkCond( context, ( SFUtil.isEmpty( invName ) ), "ST4377", String.format( "投资者名称不能为空" ) );
			SFUtil.chkCond( context, ( SFUtil.isEmpty( invType ) ), "ST4390", String.format( "客户类型不能为空" ) );
			SFUtil.chkCond( context, ( SFUtil.isEmpty( curCode ) ), "ST4439", String.format( "币别不能为空" ) );
			SFUtil.chkCond( context, ( SFUtil.isEmpty( secSeqId ) ), "ST4430", String.format( "券商流水号不能为空" ) );
			SFUtil.chkCond( context, ( SFUtil.isEmpty( acctId ) ), "ST4092", String.format( "账号不能为空" ) );
			SFUtil.chkCond( context, ( SFUtil.object2Double( txAmount ) <= 0 ), "ST4479", String.format( "交易金额不能小于等于零" ) );

		} catch( SFException e ) {
			throw e;
		} catch( Exception e ) {
			SFUtil.chkCond( context, "ST4895", e.getMessage() );
		}
	}

	@Override
	protected void chkEnd( Context context ) throws SFException {
		try {

			/**************************************************
			* 公共检查： 检查券商服务状态                                                                 *
			*  		 检查当前券商是否允许办理该币种交易  		*
			*  		 检查投资人身份			   				*
			***************************************************/
			userId = secCompData.getUserId();// 客户编号
			overDraftFlag = secCompData.getOverDraftFlag(); // 是否允许透支
			txDate = ( ( LocalInfo )SFUtil.getDataValue( context, SFConst.PUBLIC_LOCAL_INFO ) ).getWorkdate();// 交易日期
			openDate = signAccountData.getOpenDate();// 开户日期
			signFlag = signAccountData.getSignFlag();// 签约标识
			
			// 五矿、银河证券Rever节点需要回送brchId机构号，先添加到context中
			SFUtil.addDataField( context, "SEC_BRCH_ID", SFUtil.isNotEmpty( signAccountData.getFlags() ) ? signAccountData.getFlags() : " "  );

			/**
			 * 检查当前券商是否允许办理该币种交易 
			 */
			ProductInfo productInfo = ProductInfoCache.getValue( secCompCode );// 根据券商代码获取券商产品缓存对象
			SFUtil.chkCond( context, productInfo == null, "ST4074", String.format( "该券商未开通此币种的业务" ) );
			SFUtil.chkCond( context, ( !"1".equals( productInfo.getPermitFlag() ) ), "ST4074", String.format( "不允许此券商办理该币种转账业务" ) );

			// 该券商允许透支 当日开户控制余额
			SFUtil.chkCond( context, ( "1".equals( overDraftFlag ) && txDate.equals( openDate ) && ( SFUtil.object2Double( acctBal ) < -0.000001 ) ), "ST4504", String.format( "资金账户余额不足,不允许冲正" ) );

			// 检查签约关系
			SFUtil.chkCond( context, ( SFUtil.isEmpty( signFlag ) ), "ST4045", String.format( "签约信息不存在" ) );
			if( SFConst.SIGN_FLAG_SIGN_IN_PROCESS.equals( signFlag ) || SFConst.SIGN_FLAG_CONFIRM_IN_PROCESS.equals( signFlag ) ) {
				signFlag = "*";
			}
			SFUtil.chkCond( context, ( "*".equals( signFlag ) ), "ST4045", String.format( "签约信息不符" ) );
			SFUtil.chkCond( context, ( !SFConst.SIGN_FLAG_SIGN.equals( signFlag ) ), "ST4030", String.format( "当前签约状态不允许办理查询交易" ) );

			acctBal = signAccountData.getAcctBal();
			openDate = signAccountData.getOpenDate();
			initSide = signAccountData.getInitSide();

			SFLogger.info( context, "券商端发起银转证冲正纪录检查数据库表TRDAcctJour开始" );

			// 取原交易
			oldAcctJour = acctJourDao.qryAcctJour( context, tranConnection, txDate, userId, orgTxSeqId );

			// 被冲正流水不存在,返回券商冲正成功
			if( null == oldAcctJour || ( null != oldAcctJour && "2".equals( oldAcctJour.getJourFlag() ) || ( "44".equals( jourFlag ) && ( SFConst.SECU_GUOTAIJAZQ.equals( secCompCode ) || SFConst.SECU_GUOTAIJAXY.equals( secCompCode ) ) ) ) ) {
				// 置成功状态字
				succResFlag = true;
				// 组包返回券商
				doSecu( context );
				return;
			}
			jourFlag = oldAcctJour.getJourFlag();

			// 检查原流水数据
			SFUtil.chkCond( context, ( !curCode.equals( oldAcctJour.getCurCode() ) ), "ST4428", String.format( "冲正币种与原交易不符" ) );
			SFUtil.chkCond( context, ( Math.abs( SFUtil.sub( txAmount, oldAcctJour.getTxAmount() ) ) > 0.000001 ), "ST4483", String.format( "冲正资金与原交易不符" ) );
			SFUtil.chkCond( context, ( !"00".equals( jourFlag ) ), "ST5752", String.format( "原交易失败或异常中,不允许冲正" ) );
			SFUtil.chkCond( context, ( "44".equals( jourFlag ) && ( !SFConst.SECU_GUOTAIJAZQ.equals( secCompCode ) || !SFConst.SECU_GUOTAIJAXY.equals( secCompCode ) ) ), "ST4123", String.format( "该流水已冲正或已调整 不能冲正" ) );
			SFUtil.chkCond( context, SFUtil.isNotEmpty( oldAcctJour.getRevTxSeqId() ), "ST4502", String.format( "原流水已冲正(冲正交易)" ) );
			SFUtil.chkCond( context, ( !"1003".equals( oldAcctJour.getAbst() ) && !"2003".equals( oldAcctJour.getAbst() ) ), "ST4124", String.format( "该流水转帐类型不能被冲正" ) );

			// 新增对原交易异步上ics处理结果的判断
			// 券商端发起银转证冲正交易,原交易异步上ics，并未真的处理成功
			SFUtil.chkCond( context, ( "0".equals( oldAcctJour.getYbStatus() ) ), "ST5745", String.format( "冲正失败，请稍后再试" ) );

			SFLogger.info( context, "券商端发起银转证冲正纪录检查数据库表TRDAcctJour结束" );
		} catch( SFException e ) {
			throw e;
		} catch( Exception e ) {
			SFUtil.chkCond( context, "ST4895", e.getMessage() );
		}
	}

}
