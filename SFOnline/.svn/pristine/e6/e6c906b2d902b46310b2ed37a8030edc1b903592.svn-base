package core.communication.access.esb;


import java.util.Iterator;
import java.util.Map;

import com.dc.eai.data.CompositeData;
import com.dcfs.esb.client.converter.PackUtil;
import com.ecc.emp.access.tcpip.EMPTCPIPRequest;
import com.ecc.emp.access.tcpip.TCPIPRequestHandler;
import com.ecc.emp.core.Context;
import com.ecc.emp.core.EMPConstance;
import com.ecc.emp.format.FormatElement;
import common.exception.SFException;
import common.util.SFConst;
import common.util.SFUtil;

import core.communication.format.PBankFormatElement;
import core.communication.format.paesb.ESBCDFormat;
import core.log.SFLogger;

/**
 * EMP平台实现的TCP/IP请求处理器。
 * <p>
 * 用于处理TCP/IP请求的报文头，以及从报文头获取必要的信息，
 * 这些信息包括sessionId、serviceId(所请求的TCP/IP服务ID或交易码)等。
 * <p>
 * 参数如下：
 * <p>
 * serviceIdField：报文头解开后的ServiceId数据域<br>
 * sessionIdField：报文头解开后的SessionId数据域<br>
 * appendReqHead：是否需要截去请求报文头，可选项true(默认)、false<br>
 * appendRepHead：是否需要在返回报文中附带报文头，可选项true(默认)、false<br>
 * errorCodeField：保存错误码的数据域名<br>
 * encoding：报文头编码
 * <p>
 * 子元素：
 * <p>
 * requestHeadFormat：请求报文头格式处理器<br>
 * responseHeadFormat：响应报文头格式处理器<br>
 * serviceIdMap：ServiceId映射，允许将多个请求ServiceId映射到其他定义ServiceId中，用于交易分发<br>
 * 
 * @author zhongmc
 * @version 2.1
 * @since 1.0 2006-11-29
 * @lastmodified 2008-6-11
 * 
 */
public class PBankTCPIPRequestHandler implements TCPIPRequestHandler {

	/**
	 * 报文头编码
	 */
	private String encoding = null;
	
	/**
	 * 保存错误码的数据域
	 */
	private String errorCodeField = "errorCode";

	/**
	 * 请求报文头格式处理器
	 */
	private FormatElement requestHeadFormat = null;

	/**
	 * 响应报文头格式处理器
	 */
	private FormatElement responseHeadFormat = null;

	/**
	 * 是否需要截去请求报文头
	 */
	private boolean appendReqHead = true;

	/**
	 * 是否需要在返回报文中附带报文头
	 */
	private boolean appendRepHead = true;

	/**
	 * 报文头解开后的ServiceId数据域
	 */
	private String serviceIdField;

	/**
	 * 报文头解开后的SessionId数据域
	 */
	private String sessionIdField;

	/**
	 * ServiceId映射，允许将多个请求ServiceId映射到其他定义ServiceId中，用于交易分发
	 */
	private Map serviceIdMap = null;

	public PBankTCPIPRequestHandler() {
		super();
	}
	
	/**
	 * 从请求报文中判断该请求是否为业务处理请求。
	 * 
	 * @param msg 请求报文
	 * @return 是否业务处理请求
	 */
	public boolean isRequestPackage(byte[] msg) {
		return true;
	}

	
	/**
	 * 获得请求的EMPTCPIPRequest封装对象。
	 * <p>
	 * 从请求报文中解出报文头，从中取得Session id和Service id，
	 * 连同报文体一起封装为EMPTCPIPRequest以进行进一步处理。
	 * 
	 * @param requestMsg 请求报文
	 * @return EMPTCPIPRequest
	 */
	public EMPTCPIPRequest getTCPIPRequest(byte[] requestMsg){		
		EMPTCPIPRequest request = new EMPTCPIPRequest();		
		String reqData = new String(requestMsg);		
		CompositeData reqCD = null;
		reqCD = PackUtil.unpackXmlStr(reqData.trim());		
		String sessionId = null;
		String serviceId = null;
		String sceneId = null;		
		serviceId = reqCD.getStruct("SYS_HEAD").getField("SERVICE_CODE").strValue();
		sceneId = reqCD.getStruct("SYS_HEAD").getField("SERVICE_SCENE").strValue();		
		request.setAttribute("SID", sessionId);
		request.setAttribute("serviceId", serviceId + "_" + sceneId);
		request.setAttribute("reqData", reqCD);
		return request;
		
	}
	
	/**
	 * 处理正常的响应报文。
	 * <p>
	 * 将数据打包成返回报文头，并和返回报文体一起放入response。
	 * 
	 * @param request TCPIP请求
	 * @param retMsg 返回报文体
	 * @return 响应报文
	 */
	public byte[] getResponsePackage(EMPTCPIPRequest request, byte[] retMsg ) {
		try{
			Context context = (Context)request.getAttribute(EMPConstance.ATTR_CONTEXT );
			if( this.appendRepHead && this.responseHeadFormat != null )
			{
				byte[] headBytes;
				Object retHead = responseHeadFormat.format( context );
				if( responseHeadFormat.isBin() )
					headBytes = (byte[])retHead;
				else
					headBytes = ((String)retHead).getBytes();
				
				if( retMsg != null )
				{
					int len = headBytes.length;
					byte[] buf = new byte[len + retMsg.length];
			
					System.arraycopy(headBytes, 0, buf, 0, len);
					System.arraycopy(retMsg, 0, buf, len, retMsg.length);
					return buf;
				}
				else
					return headBytes;
			}
			return retMsg;
			
		}catch(Exception e)
		{			
			SFLogger.error(SFConst.DEFAULT_TRXCODE, null, "Failed to process response package! ", e);
			return null;
		}
	}	
	
	/**
	 * 处理异常时的响应报文。
	 * <p>
	 * 将数据和异常信息打包成返回报文头。
	 * 
	 * @param request TCPIP请求
	 * @param e 异常
	 * @return 异常响应报文
	 */
	public byte[] getExceptionResponse(EMPTCPIPRequest request, Exception e) {		
		try {			
			Context context = (Context)request.getAttribute(EMPConstance.ATTR_CONTEXT );
			if( context == null )
				context = (Context)request.getAttribute(EMPConstance.ATTR_SESSION_CONTEXT );
			
			initPubMsgHead(1,context);
			
			context.setDataValue("SYS_HEAD.RET_STATUS", "F");
			
			if(e instanceof SFException){
				SFException sfe = (SFException)e;
				String errorCode = sfe.getErrorCode();
				
				context.setDataValue("RET.RET_CODE", errorCode);
				if(SFUtil.isEmpty(sfe.getMessage())){
					context.setDataValue("RET.RET_MSG", "失败");
				}else{
					context.setDataValue("RET.RET_MSG",sfe.getMessage());
				}
			}
			
			FormatElement respHeadFormat = context.getFormat("PAESBHEAD_O");
			PBankFormatElement headFormat = (ESBCDFormat)respHeadFormat.getFormatElement();
			CompositeData responseHeadCD = (CompositeData)headFormat.format(context);
			
			
			String svcId = (String) request.getAttribute("serviceId");
			FormatElement msgFormat = context.getFormat(svcId + "_O");
			PBankFormatElement cdFormat = (ESBCDFormat)msgFormat.getFormatElement();
			CompositeData responseCD = (CompositeData)cdFormat.format(context);
			
			if(responseCD!=null){
				Iterator ir = responseCD.iterator();
				while(ir.hasNext()){
					String key = (String)ir.next();
					CompositeData cd = responseCD.getStruct(key);
					responseHeadCD.addStruct(key, cd);
					
				}
			}
			

			return PackUtil.packXmlStr(responseHeadCD).getBytes();
			
		} catch (Exception e2) {
			SFLogger.error(SFConst.DEFAULT_TRXCODE, null,"Failed to handle exception!", e2);
		}		
		return null;
	}

	
	/**
	 * 初始化ESB公共报文头内容。
	 * 
	 */
	public void initPubMsgHead(int type,Context context) throws Exception
	{
		String[] tmpStrings = null;
		String tmpName = null;
		
		for (int i = 0; i < 5; i++) {
			context.remove("_ESB_PARAM_" + i);
			context.addDataField("_ESB_PARAM_" + i, "");
		}
		
		
		if (type == 0) {
			//添加_ESB_HEAD公共KCOLL
			context.addDataElement(SFUtil.getTemplateKColl(context, "SYS_HEAD"));
			context.addDataElement(SFUtil.getTemplateKColl(context, "APP_HEAD"));
			context.addDataElement(SFUtil.getTemplateKColl(context, "RET"));
			
//			//添加_ESB_HEAD公共KCOLL
//			context.addDataElement(SFUtil.getTemplateKColl(context, "_ESB_HEAD"));
			
			//输入参数初始化
			tmpName = "SYS_HEAD;APP_HEAD;;";
			
		}
		else {
			//输出参数初始化
			tmpName = "SYS_HEAD;RET;APP_HEAD;";
		}
		tmpStrings = tmpName.split(";");

		for (int i = 0; i < tmpStrings.length; i++) {
			context.remove("_ESB_PARAM_" + i);
			context.addDataField("_ESB_PARAM_" + i, tmpStrings[i]);
		}
		
	}
	
	
	/**
	 * 获得保存错误码的数据域。
	 * 
	 * @return 保存错误码的数据域
	 */
	public String getErrorCodeField() {
		return errorCodeField;
	}
	
	/**
	 * 设置保存错误码的数据域。
	 * 
	 * @param errorCodeField 保存错误码的数据域
	 * @emp:isAttribute true
	 * @emp:name 保存错误码的数据域
	 * @emp:desc 若执行中发生异常，则将错误码保存在该数据域中
	 * @emp:defaultValue errorCode
	 */
	public void setErrorCodeField(String errorCodeField) {
		this.errorCodeField = errorCodeField;
	}

	/**
	 * 获得请求报文头格式处理器。
	 * 
	 * @return 请求报文头格式处理器
	 */
	public FormatElement getRequestHeadFormat() {
		return requestHeadFormat;
	}

	/**
	 * 注入请求报文头格式处理器。
	 * 
	 * @param headFormat 请求报文头格式处理器
	 * @emp:isChild com.ecc.emp.format.FormatElement
	 */
	public void setRequestHeadFormat(FormatElement headFormat) {
		this.requestHeadFormat = headFormat;
	}

	/**
	 * 获得响应报文头格式处理器。
	 * 
	 * @return 响应报文头格式处理器
	 */
	public FormatElement getResponseHeadFormat() {
		return responseHeadFormat;
	}

	/**
	 * 注入响应报文头格式处理器。
	 * 
	 * @param responseHeadFormat 响应报文头格式处理器
	 * @emp:isChild com.ecc.emp.format.FormatElement
	 */
	public void setResponseHeadFormat(FormatElement responseHeadFormat) {
		this.responseHeadFormat = responseHeadFormat;
	}

	/**
	 * 获得保存serviceId的数据域。
	 * 
	 * @return 保存serviceId的数据域
	 */
	public String getServiceIdField() {
		return serviceIdField;
	}

	/**
	 * 设置保存serviceId的数据域。
	 * 
	 * @param serviceIdField 保存serviceId的数据域名
	 * @emp:isAttribute true
	 * @emp:name 保存serviceId的数据域
	 * @emp:desc 解开报文头后，从请求数据中的该数据域中取得service id
	 * @emp:mustSet true
	 */
	public void setServiceIdField(String serviceIdField) {
		this.serviceIdField = serviceIdField;
	}

	/**
	 * 获得保存sessionId的数据域。
	 * 
	 * @return 保存sessionId的数据域
	 */
	public String getSessionIdField() {
		return sessionIdField;
	}

	/**
	 * 设置保存sessionId的数据域。
	 * 
	 * @param sessionIdField 保存sessionId的数据域名
	 * @emp:isAttribute true
	 * @emp:name 保存sessionId的数据域
	 * @emp:desc 解开报文头后，从请求数据中的该数据域中取得session id
	 * @emp:mustSet true
	 */
	public void setSessionIdField(String sessionIdField) {
		this.sessionIdField = sessionIdField;
	}

	/**
	 * 获得是否需要截去请求报文头。
	 * 
	 * @return 是否需要截去请求报文头
	 */
	public boolean isAppendReqHead() {
		return appendReqHead;
	}

	/**
	 * 设置是否需要截去请求报文头。
	 * 
	 * @param appendHead 是否需要截去请求报文头，可选项true(默认)、false
	 * @emp:isAttribute true
	 * @emp:name 是否需要截去请求报文头
	 * @emp:desc 若为true，则将请求报文头解开后丢弃，只将请求报文体放入request做进一步处理
	 * @emp:defaultValue true
	 */
	public void setAppendReqHead(boolean appendHead) {
		this.appendReqHead = appendHead;
	}

	/**
	 * 获得是否需要在返回报文中附带报文头。
	 * 
	 * @return 是否需要在返回报文中附带报文头
	 */
	public boolean isAppendRepHead() {
		return appendRepHead;
	}

	/**
	 * 设置是否需要在返回报文中附带报文头。
	 * 
	 * @param appendHead 是否需要在返回报文中附带报文头，可选项true(默认)、false
	 * @emp:isAttribute true
	 * @emp:name 是否需要在返回报文中附带报文头
	 * @emp:desc 若为true，则将响应数据按照响应报文头格式打包，并追加在响应报文体之前
	 * @emp:defaultValue true
	 */
	public void setAppendRepHead(boolean appendHead) {
		this.appendRepHead = appendHead;
	}

	/**
	 * 获得ServiceId映射。
	 * 
	 * @return ServiceId映射
	 */
	public Map getServiceIdMap() {
		return serviceIdMap;
	}

	/**
	 * 注入ServiceId映射。
	 * 
	 * @param serviceIdMap ServiceId映射
	 * @emp:isChild java.util.Map
	 */
	public void setServiceIdMap(Map serviceIdMap) {
		this.serviceIdMap = serviceIdMap;
	}	

	/**
	 * 获得报文头编码。
	 * 
	 * @return 报文头编码
	 */
	public String getEncoding() {
		return encoding;
	}

	/**
	 * 设置报文头编码。
	 * 
	 * @param encoding 报文头编码
	 */
	public void setEncoding(String encoding) {
		this.encoding = encoding;
	}
}
